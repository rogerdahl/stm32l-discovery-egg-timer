
timer.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000020 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccwIIOuo.o
f108f85f l       *ABS*	00000000 BootRAM
08002642 l       .text	00000000 LoopCopyDataInit
0800263a l       .text	00000000 CopyDataInit
0800265a l       .text	00000000 LoopFillZerobss
08002654 l       .text	00000000 FillZerobss
08002684 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32l1xx_exti.c
00000000 l    df *ABS*	00000000 stm32l1xx_gpio.c
00000000 l    df *ABS*	00000000 stm32l1xx_lcd.c
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32l1xx_pwr.c
00000000 l    df *ABS*	00000000 stm32l1xx_rcc.c
20000000 l     O .data	00000009 PLLMulTable
2000000c l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32l1xx_rtc.c
00000000 l    df *ABS*	00000000 stm32l1xx_syscfg.c
00000000 l    df *ABS*	00000000 _thumb1_case_uhi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
08001acc l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
08001b68 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
08001c28 l     F .text	00000084 RCC_Configuration
00000000 l    df *ABS*	00000000 system_stm32l1xx.c
00000000 l    df *ABS*	00000000 stm32l_discovery_lcd.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000024 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000024 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
080007ac g     F .text	00000028 PWR_EnterSTANDBYMode
08001e34 g     F .text	00000024 RTC_Alarm_IRQHandler
08002684  w    F .text	00000004 EXTI2_IRQHandler
08001874 g     F .text	00000014 SYSCFG_DeInit
080008d4 g     F .text	0000000c RCC_HSICmd
08001488 g     F .text	00000030 RTC_CalibOutputCmd
0800090c g     F .text	0000000c RCC_PLLCmd
08000748 g     F .text	0000002c PWR_EnterSleepMode
08001314 g     F .text	00000018 RTC_SetWakeUpCounter
08002684  w    F .text	00000004 DebugMon_Handler
08000afc g     F .text	00000018 RCC_AHBPeriphResetCmd
08001634 g     F .text	00000018 RTC_TamperCmd
08001dac g     F .text	0000005c display_time
08000408 g     F .text	00000024 GPIO_PinAFConfig
08000f6c g     F .text	000000d8 RTC_SetDate
08000bf0 g     F .text	0000000c RCC_ClearITPendingBit
080003d4 g     F .text	0000000c GPIO_ReadOutputDataBit
08002684  w    F .text	00000004 HardFault_Handler
08002684  w    F .text	00000004 TIM10_IRQHandler
08001800 g     F .text	00000020 RTC_ClearFlag
08002684  w    F .text	00000004 USB_HP_IRQHandler
08002684  w    F .text	00000004 TIM6_IRQHandler
08002684  w    F .text	00000004 SysTick_Handler
080013cc g     F .text	00000010 RTC_GetStoreOperation
08000930 g     F .text	0000000c RCC_MCOConfig
080005cc g     F .text	00000070 NVIC_Init
08001998 g     F .text	00000040 SYSCFG_RIIOSwitchConfig
08002684  w    F .text	00000004 PVD_IRQHandler
08002730 g       .text	00000000 _sidata
080018bc g     F .text	00000020 SYSCFG_USBPuCmd
0800133c g     F .text	00000064 RTC_WakeUpCmd
08002684  w    F .text	00000004 PendSV_Handler
08002684  w    F .text	00000004 NMI_Handler
08001920 g     F .text	00000048 SYSCFG_RITIMInputCaptureConfig
08002684  w    F .text	00000004 EXTI3_IRQHandler
08000b8c g     F .text	00000018 RCC_ITConfig
080016c0 g     F .text	00000024 RTC_TamperPullUpCmd
08001908 g     F .text	00000018 SYSCFG_RITIMSelect
08000b44 g     F .text	00000018 RCC_AHBPeriphClockLPModeCmd
08002730 g       .text	00000000 _etext
20000020 g       .bss	00000000 _sbss
0800093c g     F .text	00000014 RCC_SYSCLKConfig
0800010c g     F .text	0000001c EXTI_DeInit
08000850 g     F .text	0000003c RCC_WaitForHSEStartUp
0800063c g     F .text	00000014 NVIC_SetVectorTable
08000918 g     F .text	0000000c RCC_ClockSecuritySystemCmd
08001e08 g     F .text	0000002c EXTI0_IRQHandler
08002684  w    F .text	00000004 I2C2_EV_IRQHandler
08000bc8 g     F .text	00000014 RCC_ClearFlag
08000498 g     F .text	0000000c LCD_Cmd
08001564 g     F .text	000000a8 RTC_GetTimeStamp
08000840 g     F .text	00000010 RCC_HSEConfig
08001ac8 g     F .text	00000088 .hidden __udivsi3
080004e4 g     F .text	0000001c LCD_DeadTimeConfig
08000400 g     F .text	00000008 GPIO_ToggleBits
08002684  w    F .text	00000004 UsageFault_Handler
08000acc g     F .text	00000018 RCC_APB2PeriphClockCmd
08000714 g     F .text	00000034 PWR_EnterLowPowerRunMode
08000f60 g     F .text	0000000c RTC_GetSubSecond
080002dc g     F .text	000000aa GPIO_Init
080008fc g     F .text	00000010 RCC_PLLConfig
080012d0 g     F .text	00000020 RTC_GetAlarmSubSecond
08001d78 g     F .text	00000032 itoa
20000000 g       .data	00000000 _sdata
08002684  w    F .text	00000004 SPI1_IRQHandler
080019f8 g     F .text	000000bc SYSCFG_RIHysteresisConfig
08000668 g     F .text	0000001c SysTick_CLKSourceConfig
080014e0 g     F .text	00000050 RTC_SmoothCalibConfig
080003fc g     F .text	00000004 GPIO_Write
08000e24 g     F .text	000000d8 RTC_SetTime
080003e0 g     F .text	00000006 GPIO_ReadOutputData
080012a8 g     F .text	00000028 RTC_AlarmSubSecondConfig
080008e0 g     F .text	00000010 RCC_LSEConfig
08000a9c g     F .text	0000000c RCC_RTCCLKCmd
080004c0 g     F .text	0000000c LCD_MuxSegmentCmd
08000efc g     F .text	0000000c RTC_TimeStructInit
08000ae4 g     F .text	00000018 RCC_APB1PeriphClockCmd
08000bdc g     F .text	00000014 RCC_GetITStatus
080006c8 g     F .text	00000018 PWR_WakeUpPinCmd
08002684  w    F .text	00000004 USB_FS_WKUP_IRQHandler
08002688 g     F .text	00000048 __libc_init_array
08000c24 g     F .text	00000048 RTC_EnterInitMode
08000ab4 g     F .text	00000018 RCC_AHBPeriphClockCmd
08002684  w    F .text	00000004 DMA1_Channel4_IRQHandler
08002684  w    F .text	00000004 ADC1_IRQHandler
20000020 g     O .bss	00000002 t_bar
08002570 g     F .text	00000032 LCD_GLASS_DisplayString
08002718 g     F .text	00000000 _init
08001668 g     F .text	0000001c RTC_TamperSamplingFreqConfig
08000558 g     F .text	00000018 LCD_ITConfig
08002684  w    F .text	00000004 USART3_IRQHandler
08000c6c g     F .text	00000050 RTC_Init
080001ec g     F .text	0000000c EXTI_ClearITPendingBit
20000024 g       .bss	00000000 _ebss
080010a8 g     F .text	000000f4 RTC_SetAlarm
08002684  w    F .text	00000004 DMA1_Channel7_IRQHandler
08002634  w    F .text	0000003c Reset_Handler
080003cc g     F .text	00000006 GPIO_ReadInputData
08000ccc g     F .text	0000004c RTC_WaitForSynchro
08002684  w    F .text	00000004 LCD_IRQHandler
08000ba4 g     F .text	00000024 RCC_GetFlagStatus
0800201c g     F .text	00000184 LCD_GLASS_Configure_GPIO
08001888 g     F .text	00000018 SYSCFG_RIDeInit
080021a0 g     F .text	00000034 LCD_bar
080003e8 g     F .text	00000004 GPIO_SetBits
08002684  w    F .text	00000004 TIM4_IRQHandler
080001b0 g     F .text	00000014 EXTI_GetFlagStatus
08000950 g     F .text	00000010 RCC_GetSYSCLKSource
080003f0 g     F .text	0000000c GPIO_WriteBit
08000f08 g     F .text	00000058 RTC_GetTime
08001b64 g     F .text	00000000 .hidden __aeabi_idiv
08002684  w    F .text	00000004 I2C1_EV_IRQHandler
08001704 g     F .text	00000020 RTC_ReadBackupRegister
080009a4 g     F .text	000000b8 RCC_GetClocksFreq
08002684  w    F .text	00000004 DMA1_Channel6_IRQHandler
080013a0 g     F .text	0000002c RTC_DayLightSavingConfig
08000b5c g     F .text	00000018 RCC_APB2PeriphClockLPModeCmd
08001980 g     F .text	00000018 SYSCFG_RIChannelSpeedConfig
080001a0 g     F .text	00000010 EXTI_GenerateSWInterrupt
0800069c g     F .text	0000000c PWR_RTCAccessCmd
08002684  w    F .text	00000004 TIM3_IRQHandler
08002684  w    F .text	00000004 RCC_IRQHandler
08000570 g     F .text	00000014 LCD_GetFlagStatus
08000500 g     F .text	00000020 LCD_BlinkConfig
20000020 g       .bss	00000000 _bss
08002684  w    F .text	00000004 DMA1_Channel1_IRQHandler
08002684 g       .text	00000004 Default_Handler
08001440 g     F .text	00000048 RTC_CoarseCalibCmd
080001c4 g     F .text	0000000c EXTI_ClearFlag
08000a5c g     F .text	00000040 RCC_RTCCLKConfig
08001408 g     F .text	00000038 RTC_CoarseCalibConfig
08002684  w    F .text	00000004 EXTI15_10_IRQHandler
08000bfc g     F .text	0000000a RTC_StructInit
08001054 g     F .text	00000054 RTC_GetDate
08000128 g     F .text	00000068 EXTI_Init
08001684 g     F .text	0000001c RTC_TamperPinsPrechargeDuration
080011b0 g     F .text	0000009c RTC_GetAlarm
08001724 g     F .text	0000001c RTC_OutputTypeConfig
08001820 g     F .text	00000038 RTC_GetITStatus
080003ec g     F .text	00000004 GPIO_ResetBits
08002684  w    F .text	00000004 TIM7_IRQHandler
080006f8 g     F .text	0000001c PWR_VoltageScalingConfig
08001618 g     F .text	0000001c RTC_TamperTriggerConfig
08001c24  w    F .text	00000002 .hidden __aeabi_ldiv0
08002684  w    F .text	00000004 EXTI9_5_IRQHandler
08000898 g     F .text	00000018 RCC_MSIRangeConfig
08002684  w    F .text	00000004 TIM9_IRQHandler
08002684  w    F .text	00000004 TAMPER_STAMP_IRQHandler
08002684  w    F .text	00000004 RTC_WKUP_IRQHandler
08000b74 g     F .text	00000018 RCC_APB1PeriphClockLPModeCmd
080021d4 g     F .text	0000039c LCD_GLASS_WriteChar
080012f0 g     F .text	00000024 RTC_WakeUpClockConfig
080001d0 g     F .text	0000001c EXTI_GetITStatus
08002684  w    F .text	00000004 SPI2_IRQHandler
080018ac g     F .text	00000010 SYSCFG_GetBootMode
08000774 g     F .text	00000038 PWR_EnterSTOPMode
08000d18 g     F .text	00000098 RTC_DeInit
08000444 g     F .text	00000044 LCD_Init
080018a0 g     F .text	0000000c SYSCFG_MemoryRemapConfig
08002684  w    F .text	00000004 MemManage_Handler
080008bc g     F .text	00000018 RCC_AdjustHSICalibrationValue
08001e58 g     F .text	000000b0 main
08000584 g     F .text	0000000c LCD_ClearFlag
08001968 g     F .text	00000018 SYSCFG_RIResistorConfig
080013dc g     F .text	0000002c RTC_OutputConfig
08001ac8 g     F .text	00000000 .hidden __aeabi_uidiv
08002684  w    F .text	00000004 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
080026d0 g     O .text	00000034 CapLetterMap
08000974 g     F .text	00000018 RCC_PCLK1Config
08001044 g     F .text	0000000e RTC_DateStructInit
08000190 g     F .text	0000000e EXTI_StructInit
08002684  w    F .text	00000004 DMA1_Channel5_IRQHandler
08002684  w    F .text	00000004 USB_LP_IRQHandler
08002684  w    F .text	00000004 EXTI4_IRQHandler
08001b64 g     F .text	000000ac .hidden __divsi3
0800098c g     F .text	00000018 RCC_PCLK2Config
08000cbc g     F .text	00000010 RTC_ExitInitMode
080025a4 g     F .text	00000028 LCD_GLASS_Clear
08001f08 g     F .text	00000114 SystemInit
080001f8 g     F .text	000000e4 GPIO_DeInit
08002724 g     F .text	00000000 _fini
0800124c g     F .text	0000005c RTC_AlarmCmd
0800054c g     F .text	0000000c LCD_UpdateDisplayRequest
080007f8 g     F .text	00000048 RCC_DeInit
08000684 g     F .text	00000018 PWR_DeInit
080019d8 g     F .text	00000020 SYSCFG_RISwitchControlModeCmd
0800132c g     F .text	00000010 RTC_GetWakeUpCounter
2000001c g     O .data	00000004 sec
08002684  w    F .text	00000004 DMA1_Channel3_IRQHandler
08002684  w    F .text	00000004 COMP_IRQHandler
0800119c g     F .text	00000014 RTC_AlarmStructInit
0800164c g     F .text	0000001c RTC_TamperFilterConfig
08000650 g     F .text	00000018 NVIC_SystemLPConfig
00000000  w      *UND*	00000000 __preinit_array_end
080014b8 g     F .text	00000028 RTC_CalibOutputConfig
08002684  w    F .text	00000004 WWDG_IRQHandler
080025cc g     F .text	00000068 LCD_GLASS_Init
08000924 g     F .text	0000000c RCC_LSEClockSecuritySystemCmd
08000b2c g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08002684  w    F .text	00000004 TIM2_IRQHandler
08000388 g     F .text	00000014 GPIO_StructInit
20002000 g       *ABS*	00000000 _estack
08002684  w    F .text	00000004 DAC_IRQHandler
08001b50 g     F .text	00000012 .hidden __aeabi_uidivmod
08002684  w    F .text	00000004 EXTI1_IRQHandler
0800053c g     F .text	00000010 LCD_Write
20000020 g       .data	00000000 _edata
080016e4 g     F .text	00000020 RTC_WriteBackupRegister
08000aa8 g     F .text	0000000c RCC_RTCResetCmd
08001740 g     F .text	0000005c RTC_SynchroShiftConfig
080006e0 g     F .text	0000000c PWR_FastWakeUpCmd
08000c08 g     F .text	0000001c RTC_WriteProtectionCmd
08002684  w    F .text	00000004 TIM11_IRQHandler
080007d4 g     F .text	00000014 PWR_GetFlagStatus
08002684  w    F .text	00000004 USART2_IRQHandler
080018dc g     F .text	0000002c SYSCFG_EXTILineConfig
080017e4 g     F .text	0000001c RTC_GetFlagStatus
080006a8 g     F .text	00000014 PWR_PVDLevelConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
080008b0 g     F .text	0000000c RCC_MSICmd
08001858 g     F .text	0000001c RTC_ClearITPendingBit
08002684  w    F .text	00000004 I2C2_ER_IRQHandler
08002684  w    F .text	00000004 DMA1_Channel2_IRQHandler
080004a4 g     F .text	00000010 LCD_WaitForSynchro
0800179c g     F .text	00000048 RTC_ITConfig
0800160c g     F .text	0000000c RTC_GetTimeStampSubSecond
00000000  w      *UND*	00000000 __init_array_start
08001c24  w    F .text	00000002 .hidden __aeabi_idiv0
080007e8 g     F .text	00000010 PWR_ClearFlag
08000488 g     F .text	0000000e LCD_StructInit
08002684  w    F .text	00000004 FLASH_IRQHandler
08001cac g     F .text	00000066 RTC_Config
0800039c g     F .text	00000024 GPIO_PinLockConfig
08002684  w    F .text	00000004 BusFault_Handler
08002684  w    F .text	00000004 USART1_IRQHandler
080008f0 g     F .text	0000000c RCC_LSICmd
08000590 g     F .text	0000001c LCD_GetITStatus
0800042c g     F .text	00000018 LCD_DeInit
08000b14 g     F .text	00000018 RCC_APB2PeriphResetCmd
080016a0 g     F .text	00000020 RTC_TimeStampOnTamperDetectionCmd
08000db0 g     F .text	00000048 RTC_RefClockCmd
08002684  w    F .text	00000004 I2C1_ER_IRQHandler
080004b4 g     F .text	0000000c LCD_HighDriveCmd
080005b8 g     F .text	00000014 NVIC_PriorityGroupConfig
08001530 g     F .text	00000034 RTC_TimeStampCmd
08002704 g     O .text	00000014 NumberMap
08000df8 g     F .text	0000002c RTC_BypassShadowCmd
080006ec g     F .text	0000000c PWR_UltraLowPowerCmd
0800088c g     F .text	0000000c RCC_AdjustMSICalibrationValue
00000000  w      *UND*	00000000 __preinit_array_start
08001ab4 g     F .text	00000014 .hidden __gnu_thumb1_case_uhi
08001c10 g     F .text	00000012 .hidden __aeabi_idivmod
080005ac g     F .text	0000000c LCD_ClearITPendingBit
080003c0 g     F .text	0000000c GPIO_ReadInputDataBit
08000520 g     F .text	0000001c LCD_ContrastConfig
08001d14 g     F .text	00000064 RTC_AlarmConfig
080004cc g     F .text	00000018 LCD_PulseOnDurationConfig
080006bc g     F .text	0000000c PWR_PVDCmd
08000960 g     F .text	00000014 RCC_HCLKConfig



Disassembly of section .text:

0800010c <EXTI_DeInit>:
 800010c:	4b04      	ldr	r3, [pc, #16]	; (8000120 <EXTI_DeInit+0x14>)
 800010e:	2200      	movs	r2, #0
 8000110:	601a      	str	r2, [r3, #0]
 8000112:	605a      	str	r2, [r3, #4]
 8000114:	609a      	str	r2, [r3, #8]
 8000116:	60da      	str	r2, [r3, #12]
 8000118:	4a02      	ldr	r2, [pc, #8]	; (8000124 <EXTI_DeInit+0x18>)
 800011a:	615a      	str	r2, [r3, #20]
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	40010400 	.word	0x40010400
 8000124:	00ffffff 	.word	0x00ffffff

08000128 <EXTI_Init>:
 8000128:	7983      	ldrb	r3, [r0, #6]
 800012a:	b510      	push	{r4, lr}
 800012c:	2b00      	cmp	r3, #0
 800012e:	d01e      	beq.n	800016e <EXTI_Init+0x46>
 8000130:	4b16      	ldr	r3, [pc, #88]	; (800018c <EXTI_Init+0x64>)
 8000132:	6801      	ldr	r1, [r0, #0]
 8000134:	681c      	ldr	r4, [r3, #0]
 8000136:	43ca      	mvns	r2, r1
 8000138:	4014      	ands	r4, r2
 800013a:	601c      	str	r4, [r3, #0]
 800013c:	685c      	ldr	r4, [r3, #4]
 800013e:	4022      	ands	r2, r4
 8000140:	605a      	str	r2, [r3, #4]
 8000142:	7902      	ldrb	r2, [r0, #4]
 8000144:	18d2      	adds	r2, r2, r3
 8000146:	6814      	ldr	r4, [r2, #0]
 8000148:	4321      	orrs	r1, r4
 800014a:	6011      	str	r1, [r2, #0]
 800014c:	6802      	ldr	r2, [r0, #0]
 800014e:	689c      	ldr	r4, [r3, #8]
 8000150:	43d1      	mvns	r1, r2
 8000152:	400c      	ands	r4, r1
 8000154:	609c      	str	r4, [r3, #8]
 8000156:	68dc      	ldr	r4, [r3, #12]
 8000158:	4021      	ands	r1, r4
 800015a:	60d9      	str	r1, [r3, #12]
 800015c:	7941      	ldrb	r1, [r0, #5]
 800015e:	2910      	cmp	r1, #16
 8000160:	d00d      	beq.n	800017e <EXTI_Init+0x56>
 8000162:	4b0a      	ldr	r3, [pc, #40]	; (800018c <EXTI_Init+0x64>)
 8000164:	18c9      	adds	r1, r1, r3
 8000166:	680b      	ldr	r3, [r1, #0]
 8000168:	431a      	orrs	r2, r3
 800016a:	600a      	str	r2, [r1, #0]
 800016c:	e006      	b.n	800017c <EXTI_Init+0x54>
 800016e:	7903      	ldrb	r3, [r0, #4]
 8000170:	4c06      	ldr	r4, [pc, #24]	; (800018c <EXTI_Init+0x64>)
 8000172:	6801      	ldr	r1, [r0, #0]
 8000174:	191b      	adds	r3, r3, r4
 8000176:	681a      	ldr	r2, [r3, #0]
 8000178:	438a      	bics	r2, r1
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	bd10      	pop	{r4, pc}
 800017e:	6899      	ldr	r1, [r3, #8]
 8000180:	4311      	orrs	r1, r2
 8000182:	6099      	str	r1, [r3, #8]
 8000184:	68d9      	ldr	r1, [r3, #12]
 8000186:	430a      	orrs	r2, r1
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	e7f7      	b.n	800017c <EXTI_Init+0x54>
 800018c:	40010400 	.word	0x40010400

08000190 <EXTI_StructInit>:
 8000190:	2300      	movs	r3, #0
 8000192:	220c      	movs	r2, #12
 8000194:	6003      	str	r3, [r0, #0]
 8000196:	7103      	strb	r3, [r0, #4]
 8000198:	7142      	strb	r2, [r0, #5]
 800019a:	7183      	strb	r3, [r0, #6]
 800019c:	4770      	bx	lr
 800019e:	46c0      	nop			; (mov r8, r8)

080001a0 <EXTI_GenerateSWInterrupt>:
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <EXTI_GenerateSWInterrupt+0xc>)
 80001a2:	691a      	ldr	r2, [r3, #16]
 80001a4:	4310      	orrs	r0, r2
 80001a6:	6118      	str	r0, [r3, #16]
 80001a8:	4770      	bx	lr
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	40010400 	.word	0x40010400

080001b0 <EXTI_GetFlagStatus>:
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <EXTI_GetFlagStatus+0x10>)
 80001b2:	695b      	ldr	r3, [r3, #20]
 80001b4:	4018      	ands	r0, r3
 80001b6:	1e43      	subs	r3, r0, #1
 80001b8:	4198      	sbcs	r0, r3
 80001ba:	b2c0      	uxtb	r0, r0
 80001bc:	4770      	bx	lr
 80001be:	46c0      	nop			; (mov r8, r8)
 80001c0:	40010400 	.word	0x40010400

080001c4 <EXTI_ClearFlag>:
 80001c4:	4b01      	ldr	r3, [pc, #4]	; (80001cc <EXTI_ClearFlag+0x8>)
 80001c6:	6158      	str	r0, [r3, #20]
 80001c8:	4770      	bx	lr
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	40010400 	.word	0x40010400

080001d0 <EXTI_GetITStatus>:
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI_GetITStatus+0x18>)
 80001d2:	6819      	ldr	r1, [r3, #0]
 80001d4:	695a      	ldr	r2, [r3, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	4202      	tst	r2, r0
 80001da:	d003      	beq.n	80001e4 <EXTI_GetITStatus+0x14>
 80001dc:	4008      	ands	r0, r1
 80001de:	1e41      	subs	r1, r0, #1
 80001e0:	4188      	sbcs	r0, r1
 80001e2:	b2c3      	uxtb	r3, r0
 80001e4:	1c18      	adds	r0, r3, #0
 80001e6:	4770      	bx	lr
 80001e8:	40010400 	.word	0x40010400

080001ec <EXTI_ClearITPendingBit>:
 80001ec:	4b01      	ldr	r3, [pc, #4]	; (80001f4 <EXTI_ClearITPendingBit+0x8>)
 80001ee:	6158      	str	r0, [r3, #20]
 80001f0:	4770      	bx	lr
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	40010400 	.word	0x40010400

080001f8 <GPIO_DeInit>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b30      	ldr	r3, [pc, #192]	; (80002bc <GPIO_DeInit+0xc4>)
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d01e      	beq.n	800023e <GPIO_DeInit+0x46>
 8000200:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <GPIO_DeInit+0xc8>)
 8000202:	4298      	cmp	r0, r3
 8000204:	d024      	beq.n	8000250 <GPIO_DeInit+0x58>
 8000206:	4b2f      	ldr	r3, [pc, #188]	; (80002c4 <GPIO_DeInit+0xcc>)
 8000208:	4298      	cmp	r0, r3
 800020a:	d02a      	beq.n	8000262 <GPIO_DeInit+0x6a>
 800020c:	4b2e      	ldr	r3, [pc, #184]	; (80002c8 <GPIO_DeInit+0xd0>)
 800020e:	4298      	cmp	r0, r3
 8000210:	d030      	beq.n	8000274 <GPIO_DeInit+0x7c>
 8000212:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <GPIO_DeInit+0xd4>)
 8000214:	4298      	cmp	r0, r3
 8000216:	d036      	beq.n	8000286 <GPIO_DeInit+0x8e>
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <GPIO_DeInit+0xd8>)
 800021a:	4298      	cmp	r0, r3
 800021c:	d03c      	beq.n	8000298 <GPIO_DeInit+0xa0>
 800021e:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <GPIO_DeInit+0xdc>)
 8000220:	4298      	cmp	r0, r3
 8000222:	d042      	beq.n	80002aa <GPIO_DeInit+0xb2>
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <GPIO_DeInit+0xe0>)
 8000226:	4298      	cmp	r0, r3
 8000228:	d000      	beq.n	800022c <GPIO_DeInit+0x34>
 800022a:	bd08      	pop	{r3, pc}
 800022c:	2020      	movs	r0, #32
 800022e:	2101      	movs	r1, #1
 8000230:	f000 fc64 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000234:	2020      	movs	r0, #32
 8000236:	2100      	movs	r1, #0
 8000238:	f000 fc60 	bl	8000afc <RCC_AHBPeriphResetCmd>
 800023c:	e7f5      	b.n	800022a <GPIO_DeInit+0x32>
 800023e:	2001      	movs	r0, #1
 8000240:	2101      	movs	r1, #1
 8000242:	f000 fc5b 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000246:	2001      	movs	r0, #1
 8000248:	2100      	movs	r1, #0
 800024a:	f000 fc57 	bl	8000afc <RCC_AHBPeriphResetCmd>
 800024e:	e7ec      	b.n	800022a <GPIO_DeInit+0x32>
 8000250:	2002      	movs	r0, #2
 8000252:	2101      	movs	r1, #1
 8000254:	f000 fc52 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000258:	2002      	movs	r0, #2
 800025a:	2100      	movs	r1, #0
 800025c:	f000 fc4e 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000260:	e7e3      	b.n	800022a <GPIO_DeInit+0x32>
 8000262:	2004      	movs	r0, #4
 8000264:	2101      	movs	r1, #1
 8000266:	f000 fc49 	bl	8000afc <RCC_AHBPeriphResetCmd>
 800026a:	2004      	movs	r0, #4
 800026c:	2100      	movs	r1, #0
 800026e:	f000 fc45 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000272:	e7da      	b.n	800022a <GPIO_DeInit+0x32>
 8000274:	2008      	movs	r0, #8
 8000276:	2101      	movs	r1, #1
 8000278:	f000 fc40 	bl	8000afc <RCC_AHBPeriphResetCmd>
 800027c:	2008      	movs	r0, #8
 800027e:	2100      	movs	r1, #0
 8000280:	f000 fc3c 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000284:	e7d1      	b.n	800022a <GPIO_DeInit+0x32>
 8000286:	2010      	movs	r0, #16
 8000288:	2101      	movs	r1, #1
 800028a:	f000 fc37 	bl	8000afc <RCC_AHBPeriphResetCmd>
 800028e:	2010      	movs	r0, #16
 8000290:	2100      	movs	r1, #0
 8000292:	f000 fc33 	bl	8000afc <RCC_AHBPeriphResetCmd>
 8000296:	e7c8      	b.n	800022a <GPIO_DeInit+0x32>
 8000298:	2040      	movs	r0, #64	; 0x40
 800029a:	2101      	movs	r1, #1
 800029c:	f000 fc2e 	bl	8000afc <RCC_AHBPeriphResetCmd>
 80002a0:	2040      	movs	r0, #64	; 0x40
 80002a2:	2100      	movs	r1, #0
 80002a4:	f000 fc2a 	bl	8000afc <RCC_AHBPeriphResetCmd>
 80002a8:	e7bf      	b.n	800022a <GPIO_DeInit+0x32>
 80002aa:	2080      	movs	r0, #128	; 0x80
 80002ac:	2101      	movs	r1, #1
 80002ae:	f000 fc25 	bl	8000afc <RCC_AHBPeriphResetCmd>
 80002b2:	2080      	movs	r0, #128	; 0x80
 80002b4:	2100      	movs	r1, #0
 80002b6:	f000 fc21 	bl	8000afc <RCC_AHBPeriphResetCmd>
 80002ba:	e7b6      	b.n	800022a <GPIO_DeInit+0x32>
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40020400 	.word	0x40020400
 80002c4:	40020800 	.word	0x40020800
 80002c8:	40020c00 	.word	0x40020c00
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40021800 	.word	0x40021800
 80002d4:	40021c00 	.word	0x40021c00
 80002d8:	40021400 	.word	0x40021400

080002dc <GPIO_Init>:
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	4644      	mov	r4, r8
 80002e0:	465f      	mov	r7, fp
 80002e2:	4656      	mov	r6, sl
 80002e4:	464d      	mov	r5, r9
 80002e6:	b4f0      	push	{r4, r5, r6, r7}
 80002e8:	468c      	mov	ip, r1
 80002ea:	680f      	ldr	r7, [r1, #0]
 80002ec:	2103      	movs	r1, #3
 80002ee:	b083      	sub	sp, #12
 80002f0:	2400      	movs	r4, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	2601      	movs	r6, #1
 80002f6:	4688      	mov	r8, r1
 80002f8:	e003      	b.n	8000302 <GPIO_Init+0x26>
 80002fa:	3301      	adds	r3, #1
 80002fc:	3402      	adds	r4, #2
 80002fe:	2b10      	cmp	r3, #16
 8000300:	d025      	beq.n	800034e <GPIO_Init+0x72>
 8000302:	1c32      	adds	r2, r6, #0
 8000304:	409a      	lsls	r2, r3
 8000306:	1c3d      	adds	r5, r7, #0
 8000308:	4015      	ands	r5, r2
 800030a:	4295      	cmp	r5, r2
 800030c:	d1f5      	bne.n	80002fa <GPIO_Init+0x1e>
 800030e:	4642      	mov	r2, r8
 8000310:	6801      	ldr	r1, [r0, #0]
 8000312:	40a2      	lsls	r2, r4
 8000314:	43d2      	mvns	r2, r2
 8000316:	4011      	ands	r1, r2
 8000318:	6001      	str	r1, [r0, #0]
 800031a:	4661      	mov	r1, ip
 800031c:	7909      	ldrb	r1, [r1, #4]
 800031e:	4693      	mov	fp, r2
 8000320:	6802      	ldr	r2, [r0, #0]
 8000322:	9101      	str	r1, [sp, #4]
 8000324:	40a1      	lsls	r1, r4
 8000326:	4311      	orrs	r1, r2
 8000328:	6001      	str	r1, [r0, #0]
 800032a:	9901      	ldr	r1, [sp, #4]
 800032c:	3901      	subs	r1, #1
 800032e:	2901      	cmp	r1, #1
 8000330:	d914      	bls.n	800035c <GPIO_Init+0x80>
 8000332:	68c1      	ldr	r1, [r0, #12]
 8000334:	465a      	mov	r2, fp
 8000336:	400a      	ands	r2, r1
 8000338:	60c2      	str	r2, [r0, #12]
 800033a:	4665      	mov	r5, ip
 800033c:	79ea      	ldrb	r2, [r5, #7]
 800033e:	68c1      	ldr	r1, [r0, #12]
 8000340:	40a2      	lsls	r2, r4
 8000342:	430a      	orrs	r2, r1
 8000344:	3301      	adds	r3, #1
 8000346:	60c2      	str	r2, [r0, #12]
 8000348:	3402      	adds	r4, #2
 800034a:	2b10      	cmp	r3, #16
 800034c:	d1d9      	bne.n	8000302 <GPIO_Init+0x26>
 800034e:	b003      	add	sp, #12
 8000350:	bc3c      	pop	{r2, r3, r4, r5}
 8000352:	4690      	mov	r8, r2
 8000354:	4699      	mov	r9, r3
 8000356:	46a2      	mov	sl, r4
 8000358:	46ab      	mov	fp, r5
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	6881      	ldr	r1, [r0, #8]
 800035e:	465a      	mov	r2, fp
 8000360:	4011      	ands	r1, r2
 8000362:	6081      	str	r1, [r0, #8]
 8000364:	4662      	mov	r2, ip
 8000366:	7952      	ldrb	r2, [r2, #5]
 8000368:	6881      	ldr	r1, [r0, #8]
 800036a:	40a2      	lsls	r2, r4
 800036c:	4311      	orrs	r1, r2
 800036e:	6081      	str	r1, [r0, #8]
 8000370:	8881      	ldrh	r1, [r0, #4]
 8000372:	4662      	mov	r2, ip
 8000374:	43a9      	bics	r1, r5
 8000376:	8081      	strh	r1, [r0, #4]
 8000378:	7991      	ldrb	r1, [r2, #6]
 800037a:	8885      	ldrh	r5, [r0, #4]
 800037c:	4099      	lsls	r1, r3
 800037e:	4329      	orrs	r1, r5
 8000380:	b289      	uxth	r1, r1
 8000382:	8081      	strh	r1, [r0, #4]
 8000384:	e7d5      	b.n	8000332 <GPIO_Init+0x56>
 8000386:	46c0      	nop			; (mov r8, r8)

08000388 <GPIO_StructInit>:
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <GPIO_StructInit+0x10>)
 800038a:	6003      	str	r3, [r0, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	7103      	strb	r3, [r0, #4]
 8000390:	7143      	strb	r3, [r0, #5]
 8000392:	7183      	strb	r3, [r0, #6]
 8000394:	71c3      	strb	r3, [r0, #7]
 8000396:	4770      	bx	lr
 8000398:	0000ffff 	.word	0x0000ffff

0800039c <GPIO_PinLockConfig>:
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	b082      	sub	sp, #8
 80003a0:	025b      	lsls	r3, r3, #9
 80003a2:	9301      	str	r3, [sp, #4]
 80003a4:	9b01      	ldr	r3, [sp, #4]
 80003a6:	430b      	orrs	r3, r1
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	9b01      	ldr	r3, [sp, #4]
 80003ac:	61c3      	str	r3, [r0, #28]
 80003ae:	61c1      	str	r1, [r0, #28]
 80003b0:	9b01      	ldr	r3, [sp, #4]
 80003b2:	61c3      	str	r3, [r0, #28]
 80003b4:	69c3      	ldr	r3, [r0, #28]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	69c3      	ldr	r3, [r0, #28]
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	b002      	add	sp, #8
 80003be:	4770      	bx	lr

080003c0 <GPIO_ReadInputDataBit>:
 80003c0:	8a00      	ldrh	r0, [r0, #16]
 80003c2:	4008      	ands	r0, r1
 80003c4:	1e43      	subs	r3, r0, #1
 80003c6:	4198      	sbcs	r0, r3
 80003c8:	b2c0      	uxtb	r0, r0
 80003ca:	4770      	bx	lr

080003cc <GPIO_ReadInputData>:
 80003cc:	8a00      	ldrh	r0, [r0, #16]
 80003ce:	b280      	uxth	r0, r0
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <GPIO_ReadOutputDataBit>:
 80003d4:	8a80      	ldrh	r0, [r0, #20]
 80003d6:	4008      	ands	r0, r1
 80003d8:	1e43      	subs	r3, r0, #1
 80003da:	4198      	sbcs	r0, r3
 80003dc:	b2c0      	uxtb	r0, r0
 80003de:	4770      	bx	lr

080003e0 <GPIO_ReadOutputData>:
 80003e0:	8a80      	ldrh	r0, [r0, #20]
 80003e2:	b280      	uxth	r0, r0
 80003e4:	4770      	bx	lr
 80003e6:	46c0      	nop			; (mov r8, r8)

080003e8 <GPIO_SetBits>:
 80003e8:	8301      	strh	r1, [r0, #24]
 80003ea:	4770      	bx	lr

080003ec <GPIO_ResetBits>:
 80003ec:	8341      	strh	r1, [r0, #26]
 80003ee:	4770      	bx	lr

080003f0 <GPIO_WriteBit>:
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d101      	bne.n	80003f8 <GPIO_WriteBit+0x8>
 80003f4:	8341      	strh	r1, [r0, #26]
 80003f6:	4770      	bx	lr
 80003f8:	8301      	strh	r1, [r0, #24]
 80003fa:	e7fc      	b.n	80003f6 <GPIO_WriteBit+0x6>

080003fc <GPIO_Write>:
 80003fc:	8281      	strh	r1, [r0, #20]
 80003fe:	4770      	bx	lr

08000400 <GPIO_ToggleBits>:
 8000400:	8a83      	ldrh	r3, [r0, #20]
 8000402:	4059      	eors	r1, r3
 8000404:	8281      	strh	r1, [r0, #20]
 8000406:	4770      	bx	lr

08000408 <GPIO_PinAFConfig>:
 8000408:	2307      	movs	r3, #7
 800040a:	400b      	ands	r3, r1
 800040c:	08c9      	lsrs	r1, r1, #3
 800040e:	0089      	lsls	r1, r1, #2
 8000410:	1840      	adds	r0, r0, r1
 8000412:	b510      	push	{r4, lr}
 8000414:	6a01      	ldr	r1, [r0, #32]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	240f      	movs	r4, #15
 800041a:	409c      	lsls	r4, r3
 800041c:	43a1      	bics	r1, r4
 800041e:	6201      	str	r1, [r0, #32]
 8000420:	6a01      	ldr	r1, [r0, #32]
 8000422:	409a      	lsls	r2, r3
 8000424:	1c13      	adds	r3, r2, #0
 8000426:	430b      	orrs	r3, r1
 8000428:	6203      	str	r3, [r0, #32]
 800042a:	bd10      	pop	{r4, pc}

0800042c <LCD_DeInit>:
 800042c:	b510      	push	{r4, lr}
 800042e:	2480      	movs	r4, #128	; 0x80
 8000430:	00a4      	lsls	r4, r4, #2
 8000432:	1c20      	adds	r0, r4, #0
 8000434:	2101      	movs	r1, #1
 8000436:	f000 fb79 	bl	8000b2c <RCC_APB1PeriphResetCmd>
 800043a:	1c20      	adds	r0, r4, #0
 800043c:	2100      	movs	r1, #0
 800043e:	f000 fb75 	bl	8000b2c <RCC_APB1PeriphResetCmd>
 8000442:	bd10      	pop	{r4, pc}

08000444 <LCD_Init>:
 8000444:	b510      	push	{r4, lr}
 8000446:	4c0e      	ldr	r4, [pc, #56]	; (8000480 <LCD_Init+0x3c>)
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <LCD_Init+0x40>)
 800044a:	6862      	ldr	r2, [r4, #4]
 800044c:	4013      	ands	r3, r2
 800044e:	6063      	str	r3, [r4, #4]
 8000450:	6801      	ldr	r1, [r0, #0]
 8000452:	6863      	ldr	r3, [r4, #4]
 8000454:	6842      	ldr	r2, [r0, #4]
 8000456:	430b      	orrs	r3, r1
 8000458:	4313      	orrs	r3, r2
 800045a:	6063      	str	r3, [r4, #4]
 800045c:	2120      	movs	r1, #32
 800045e:	68a3      	ldr	r3, [r4, #8]
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <LCD_Init+0x3c>)
 8000462:	4219      	tst	r1, r3
 8000464:	d0fb      	beq.n	800045e <LCD_Init+0x1a>
 8000466:	6813      	ldr	r3, [r2, #0]
 8000468:	217e      	movs	r1, #126	; 0x7e
 800046a:	438b      	bics	r3, r1
 800046c:	6013      	str	r3, [r2, #0]
 800046e:	6881      	ldr	r1, [r0, #8]
 8000470:	6813      	ldr	r3, [r2, #0]
 8000472:	430b      	orrs	r3, r1
 8000474:	68c1      	ldr	r1, [r0, #12]
 8000476:	430b      	orrs	r3, r1
 8000478:	6901      	ldr	r1, [r0, #16]
 800047a:	430b      	orrs	r3, r1
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	bd10      	pop	{r4, pc}
 8000480:	40002400 	.word	0x40002400
 8000484:	fc03ffff 	.word	0xfc03ffff

08000488 <LCD_StructInit>:
 8000488:	2300      	movs	r3, #0
 800048a:	6003      	str	r3, [r0, #0]
 800048c:	6043      	str	r3, [r0, #4]
 800048e:	6083      	str	r3, [r0, #8]
 8000490:	60c3      	str	r3, [r0, #12]
 8000492:	6103      	str	r3, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <LCD_Cmd>:
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <LCD_Cmd+0x8>)
 800049a:	6018      	str	r0, [r3, #0]
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	42048000 	.word	0x42048000

080004a4 <LCD_WaitForSynchro>:
 80004a4:	4902      	ldr	r1, [pc, #8]	; (80004b0 <LCD_WaitForSynchro+0xc>)
 80004a6:	2220      	movs	r2, #32
 80004a8:	688b      	ldr	r3, [r1, #8]
 80004aa:	421a      	tst	r2, r3
 80004ac:	d0fc      	beq.n	80004a8 <LCD_WaitForSynchro+0x4>
 80004ae:	4770      	bx	lr
 80004b0:	40002400 	.word	0x40002400

080004b4 <LCD_HighDriveCmd>:
 80004b4:	4b01      	ldr	r3, [pc, #4]	; (80004bc <LCD_HighDriveCmd+0x8>)
 80004b6:	6018      	str	r0, [r3, #0]
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	42048080 	.word	0x42048080

080004c0 <LCD_MuxSegmentCmd>:
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <LCD_MuxSegmentCmd+0x8>)
 80004c2:	6018      	str	r0, [r3, #0]
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	4204801c 	.word	0x4204801c

080004cc <LCD_PulseOnDurationConfig>:
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <LCD_PulseOnDurationConfig+0x14>)
 80004ce:	2170      	movs	r1, #112	; 0x70
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	438a      	bics	r2, r1
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	685a      	ldr	r2, [r3, #4]
 80004d8:	4310      	orrs	r0, r2
 80004da:	6058      	str	r0, [r3, #4]
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40002400 	.word	0x40002400

080004e4 <LCD_DeadTimeConfig>:
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <LCD_DeadTimeConfig+0x14>)
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <LCD_DeadTimeConfig+0x18>)
 80004e8:	6859      	ldr	r1, [r3, #4]
 80004ea:	400a      	ands	r2, r1
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	4310      	orrs	r0, r2
 80004f2:	6058      	str	r0, [r3, #4]
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40002400 	.word	0x40002400
 80004fc:	fffffc7f 	.word	0xfffffc7f

08000500 <LCD_BlinkConfig>:
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LCD_BlinkConfig+0x18>)
 8000502:	b510      	push	{r4, lr}
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <LCD_BlinkConfig+0x1c>)
 8000506:	685c      	ldr	r4, [r3, #4]
 8000508:	4022      	ands	r2, r4
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	685a      	ldr	r2, [r3, #4]
 800050e:	4311      	orrs	r1, r2
 8000510:	4308      	orrs	r0, r1
 8000512:	6058      	str	r0, [r3, #4]
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40002400 	.word	0x40002400
 800051c:	fffc1fff 	.word	0xfffc1fff

08000520 <LCD_ContrastConfig>:
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <LCD_ContrastConfig+0x14>)
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <LCD_ContrastConfig+0x18>)
 8000524:	6859      	ldr	r1, [r3, #4]
 8000526:	400a      	ands	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	4310      	orrs	r0, r2
 800052e:	6058      	str	r0, [r3, #4]
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40002400 	.word	0x40002400
 8000538:	ffffe3ff 	.word	0xffffe3ff

0800053c <LCD_Write>:
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <LCD_Write+0xc>)
 800053e:	0080      	lsls	r0, r0, #2
 8000540:	18c0      	adds	r0, r0, r3
 8000542:	6041      	str	r1, [r0, #4]
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40002410 	.word	0x40002410

0800054c <LCD_UpdateDisplayRequest>:
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <LCD_UpdateDisplayRequest+0x8>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	4770      	bx	lr
 8000554:	42048108 	.word	0x42048108

08000558 <LCD_ITConfig>:
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LCD_ITConfig+0x14>)
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	2900      	cmp	r1, #0
 800055e:	d102      	bne.n	8000566 <LCD_ITConfig+0xe>
 8000560:	4382      	bics	r2, r0
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	4770      	bx	lr
 8000566:	4310      	orrs	r0, r2
 8000568:	6058      	str	r0, [r3, #4]
 800056a:	e7fb      	b.n	8000564 <LCD_ITConfig+0xc>
 800056c:	40002400 	.word	0x40002400

08000570 <LCD_GetFlagStatus>:
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <LCD_GetFlagStatus+0x10>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4018      	ands	r0, r3
 8000576:	1e43      	subs	r3, r0, #1
 8000578:	4198      	sbcs	r0, r3
 800057a:	b2c0      	uxtb	r0, r0
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40002400 	.word	0x40002400

08000584 <LCD_ClearFlag>:
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <LCD_ClearFlag+0x8>)
 8000586:	60d8      	str	r0, [r3, #12]
 8000588:	4770      	bx	lr
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40002400 	.word	0x40002400

08000590 <LCD_GetITStatus>:
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <LCD_GetITStatus+0x18>)
 8000592:	6899      	ldr	r1, [r3, #8]
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	2300      	movs	r3, #0
 8000598:	4202      	tst	r2, r0
 800059a:	d003      	beq.n	80005a4 <LCD_GetITStatus+0x14>
 800059c:	4008      	ands	r0, r1
 800059e:	1e41      	subs	r1, r0, #1
 80005a0:	4188      	sbcs	r0, r1
 80005a2:	b2c3      	uxtb	r3, r0
 80005a4:	1c18      	adds	r0, r3, #0
 80005a6:	4770      	bx	lr
 80005a8:	40002400 	.word	0x40002400

080005ac <LCD_ClearITPendingBit>:
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <LCD_ClearITPendingBit+0x8>)
 80005ae:	60d8      	str	r0, [r3, #12]
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40002400 	.word	0x40002400

080005b8 <NVIC_PriorityGroupConfig>:
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <NVIC_PriorityGroupConfig+0xc>)
 80005ba:	4318      	orrs	r0, r3
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <NVIC_PriorityGroupConfig+0x10>)
 80005be:	60d8      	str	r0, [r3, #12]
 80005c0:	4770      	bx	lr
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	05fa0000 	.word	0x05fa0000
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <NVIC_Init>:
 80005cc:	78c3      	ldrb	r3, [r0, #3]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10b      	bne.n	80005ea <NVIC_Init+0x1e>
 80005d2:	7803      	ldrb	r3, [r0, #0]
 80005d4:	221f      	movs	r2, #31
 80005d6:	0959      	lsrs	r1, r3, #5
 80005d8:	4013      	ands	r3, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	409a      	lsls	r2, r3
 80005de:	1c13      	adds	r3, r2, #0
 80005e0:	3120      	adds	r1, #32
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <NVIC_Init+0x64>)
 80005e4:	0089      	lsls	r1, r1, #2
 80005e6:	508b      	str	r3, [r1, r2]
 80005e8:	4770      	bx	lr
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <NVIC_Init+0x68>)
 80005ec:	2104      	movs	r1, #4
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	23e0      	movs	r3, #224	; 0xe0
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4393      	bics	r3, r2
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	7842      	ldrb	r2, [r0, #1]
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	b2c9      	uxtb	r1, r1
 80005fe:	408a      	lsls	r2, r1
 8000600:	b2d1      	uxtb	r1, r2
 8000602:	220f      	movs	r2, #15
 8000604:	411a      	asrs	r2, r3
 8000606:	1c13      	adds	r3, r2, #0
 8000608:	7882      	ldrb	r2, [r0, #2]
 800060a:	401a      	ands	r2, r3
 800060c:	430a      	orrs	r2, r1
 800060e:	7803      	ldrb	r3, [r0, #0]
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <NVIC_Init+0x6c>)
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	185b      	adds	r3, r3, r1
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	7803      	ldrb	r3, [r0, #0]
 800061c:	221f      	movs	r2, #31
 800061e:	0959      	lsrs	r1, r3, #5
 8000620:	4013      	ands	r3, r2
 8000622:	2201      	movs	r2, #1
 8000624:	409a      	lsls	r2, r3
 8000626:	1c13      	adds	r3, r2, #0
 8000628:	4a01      	ldr	r2, [pc, #4]	; (8000630 <NVIC_Init+0x64>)
 800062a:	0089      	lsls	r1, r1, #2
 800062c:	508b      	str	r3, [r1, r2]
 800062e:	e7db      	b.n	80005e8 <NVIC_Init+0x1c>
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e400 	.word	0xe000e400

0800063c <NVIC_SetVectorTable>:
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <NVIC_SetVectorTable+0xc>)
 800063e:	4019      	ands	r1, r3
 8000640:	4b02      	ldr	r3, [pc, #8]	; (800064c <NVIC_SetVectorTable+0x10>)
 8000642:	4308      	orrs	r0, r1
 8000644:	6098      	str	r0, [r3, #8]
 8000646:	4770      	bx	lr
 8000648:	1fffff80 	.word	0x1fffff80
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_SystemLPConfig>:
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <NVIC_SystemLPConfig+0x14>)
 8000652:	691a      	ldr	r2, [r3, #16]
 8000654:	2900      	cmp	r1, #0
 8000656:	d102      	bne.n	800065e <NVIC_SystemLPConfig+0xe>
 8000658:	4382      	bics	r2, r0
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	4770      	bx	lr
 800065e:	4310      	orrs	r0, r2
 8000660:	6118      	str	r0, [r3, #16]
 8000662:	e7fb      	b.n	800065c <NVIC_SystemLPConfig+0xc>
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <SysTick_CLKSourceConfig>:
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SysTick_CLKSourceConfig+0x18>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	2804      	cmp	r0, #4
 800066e:	d003      	beq.n	8000678 <SysTick_CLKSourceConfig+0x10>
 8000670:	2104      	movs	r1, #4
 8000672:	438a      	bics	r2, r1
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	4770      	bx	lr
 8000678:	4310      	orrs	r0, r2
 800067a:	6018      	str	r0, [r3, #0]
 800067c:	e7fb      	b.n	8000676 <SysTick_CLKSourceConfig+0xe>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	e000e010 	.word	0xe000e010

08000684 <PWR_DeInit>:
 8000684:	b510      	push	{r4, lr}
 8000686:	2480      	movs	r4, #128	; 0x80
 8000688:	0564      	lsls	r4, r4, #21
 800068a:	1c20      	adds	r0, r4, #0
 800068c:	2101      	movs	r1, #1
 800068e:	f000 fa4d 	bl	8000b2c <RCC_APB1PeriphResetCmd>
 8000692:	1c20      	adds	r0, r4, #0
 8000694:	2100      	movs	r1, #0
 8000696:	f000 fa49 	bl	8000b2c <RCC_APB1PeriphResetCmd>
 800069a:	bd10      	pop	{r4, pc}

0800069c <PWR_RTCAccessCmd>:
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <PWR_RTCAccessCmd+0x8>)
 800069e:	6018      	str	r0, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	420e0020 	.word	0x420e0020

080006a8 <PWR_PVDLevelConfig>:
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <PWR_PVDLevelConfig+0x10>)
 80006aa:	21e0      	movs	r1, #224	; 0xe0
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	438a      	bics	r2, r1
 80006b0:	4310      	orrs	r0, r2
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40007000 	.word	0x40007000

080006bc <PWR_PVDCmd>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <PWR_PVDCmd+0x8>)
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	420e0010 	.word	0x420e0010

080006c8 <PWR_WakeUpPinCmd>:
 80006c8:	b082      	sub	sp, #8
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <PWR_WakeUpPinCmd+0x14>)
 80006d0:	18c0      	adds	r0, r0, r3
 80006d2:	9001      	str	r0, [sp, #4]
 80006d4:	9b01      	ldr	r3, [sp, #4]
 80006d6:	6019      	str	r1, [r3, #0]
 80006d8:	b002      	add	sp, #8
 80006da:	4770      	bx	lr
 80006dc:	420e00a0 	.word	0x420e00a0

080006e0 <PWR_FastWakeUpCmd>:
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <PWR_FastWakeUpCmd+0x8>)
 80006e2:	6018      	str	r0, [r3, #0]
 80006e4:	4770      	bx	lr
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	420e0028 	.word	0x420e0028

080006ec <PWR_UltraLowPowerCmd>:
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <PWR_UltraLowPowerCmd+0x8>)
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	420e0024 	.word	0x420e0024

080006f8 <PWR_VoltageScalingConfig>:
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <PWR_VoltageScalingConfig+0x14>)
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <PWR_VoltageScalingConfig+0x18>)
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	400a      	ands	r2, r1
 8000700:	4310      	orrs	r0, r2
 8000702:	220c      	movs	r2, #12
 8000704:	4390      	bics	r0, r2
 8000706:	6018      	str	r0, [r3, #0]
 8000708:	4770      	bx	lr
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40007000 	.word	0x40007000
 8000710:	ffffe7ff 	.word	0xffffe7ff

08000714 <PWR_EnterLowPowerRunMode>:
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <PWR_EnterLowPowerRunMode+0x2c>)
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	2800      	cmp	r0, #0
 800071a:	d107      	bne.n	800072c <PWR_EnterLowPowerRunMode+0x18>
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <PWR_EnterLowPowerRunMode+0x30>)
 800071e:	400a      	ands	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	438a      	bics	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4770      	bx	lr
 800072c:	2201      	movs	r2, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	01d2      	lsls	r2, r2, #7
 8000738:	430a      	orrs	r2, r1
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e7f5      	b.n	800072a <PWR_EnterLowPowerRunMode+0x16>
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40007000 	.word	0x40007000
 8000744:	ffffbfff 	.word	0xffffbfff

08000748 <PWR_EnterSleepMode>:
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <PWR_EnterSleepMode+0x24>)
 800074a:	b510      	push	{r4, lr}
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	2403      	movs	r4, #3
 8000750:	43a2      	bics	r2, r4
 8000752:	4310      	orrs	r0, r2
 8000754:	6018      	str	r0, [r3, #0]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <PWR_EnterSleepMode+0x28>)
 8000758:	2004      	movs	r0, #4
 800075a:	691a      	ldr	r2, [r3, #16]
 800075c:	4382      	bics	r2, r0
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	2901      	cmp	r1, #1
 8000762:	d001      	beq.n	8000768 <PWR_EnterSleepMode+0x20>
 8000764:	bf20      	wfe
 8000766:	bd10      	pop	{r4, pc}
 8000768:	bf30      	wfi
 800076a:	e7fc      	b.n	8000766 <PWR_EnterSleepMode+0x1e>
 800076c:	40007000 	.word	0x40007000
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <PWR_EnterSTOPMode>:
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <PWR_EnterSTOPMode+0x30>)
 8000776:	b510      	push	{r4, lr}
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	2403      	movs	r4, #3
 800077c:	43a2      	bics	r2, r4
 800077e:	4310      	orrs	r0, r2
 8000780:	6018      	str	r0, [r3, #0]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <PWR_EnterSTOPMode+0x34>)
 8000784:	2204      	movs	r2, #4
 8000786:	6918      	ldr	r0, [r3, #16]
 8000788:	4302      	orrs	r2, r0
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	2901      	cmp	r1, #1
 800078e:	d006      	beq.n	800079e <PWR_EnterSTOPMode+0x2a>
 8000790:	bf20      	wfe
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <PWR_EnterSTOPMode+0x34>)
 8000794:	2104      	movs	r1, #4
 8000796:	691a      	ldr	r2, [r3, #16]
 8000798:	438a      	bics	r2, r1
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf30      	wfi
 80007a0:	e7f7      	b.n	8000792 <PWR_EnterSTOPMode+0x1e>
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40007000 	.word	0x40007000
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <PWR_EnterSTANDBYMode>:
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <PWR_EnterSTANDBYMode+0x20>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	4311      	orrs	r1, r2
 80007b4:	6019      	str	r1, [r3, #0]
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	2102      	movs	r1, #2
 80007ba:	4301      	orrs	r1, r0
 80007bc:	6019      	str	r1, [r3, #0]
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <PWR_EnterSTANDBYMode+0x24>)
 80007c0:	6919      	ldr	r1, [r3, #16]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	bf30      	wfi
 80007c8:	4770      	bx	lr
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40007000 	.word	0x40007000
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <PWR_GetFlagStatus>:
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <PWR_GetFlagStatus+0x10>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4018      	ands	r0, r3
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	b2c0      	uxtb	r0, r0
 80007e0:	4770      	bx	lr
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40007000 	.word	0x40007000

080007e8 <PWR_ClearFlag>:
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <PWR_ClearFlag+0xc>)
 80007ea:	0080      	lsls	r0, r0, #2
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4310      	orrs	r0, r2
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	4770      	bx	lr
 80007f4:	40007000 	.word	0x40007000

080007f8 <RCC_DeInit>:
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <RCC_DeInit+0x34>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	6819      	ldr	r1, [r3, #0]
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	6899      	ldr	r1, [r3, #8]
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <RCC_DeInit+0x38>)
 8000808:	400a      	ands	r2, r1
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <RCC_DeInit+0x3c>)
 8000810:	400a      	ands	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <RCC_DeInit+0x40>)
 8000818:	400a      	ands	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	6899      	ldr	r1, [r3, #8]
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <RCC_DeInit+0x44>)
 8000820:	400a      	ands	r2, r1
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	4770      	bx	lr
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40023800 	.word	0x40023800
 8000830:	88ffc00c 	.word	0x88ffc00c
 8000834:	eefefffe 	.word	0xeefefffe
 8000838:	fffbffff 	.word	0xfffbffff
 800083c:	ff02ffff 	.word	0xff02ffff

08000840 <RCC_HSEConfig>:
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <RCC_HSEConfig+0xc>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	7018      	strb	r0, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40023802 	.word	0x40023802

08000850 <RCC_WaitForHSEStartUp>:
 8000850:	2300      	movs	r3, #0
 8000852:	b082      	sub	sp, #8
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	490b      	ldr	r1, [pc, #44]	; (8000888 <RCC_WaitForHSEStartUp+0x38>)
 800085c:	0292      	lsls	r2, r2, #10
 800085e:	00d8      	lsls	r0, r3, #3
 8000860:	680b      	ldr	r3, [r1, #0]
 8000862:	4213      	tst	r3, r2
 8000864:	d10b      	bne.n	800087e <RCC_WaitForHSEStartUp+0x2e>
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	9b01      	ldr	r3, [sp, #4]
 800086e:	4283      	cmp	r3, r0
 8000870:	d1f6      	bne.n	8000860 <RCC_WaitForHSEStartUp+0x10>
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <RCC_WaitForHSEStartUp+0x38>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	0380      	lsls	r0, r0, #14
 8000878:	0fc0      	lsrs	r0, r0, #31
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr
 800087e:	9b01      	ldr	r3, [sp, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9b01      	ldr	r3, [sp, #4]
 8000886:	e7f4      	b.n	8000872 <RCC_WaitForHSEStartUp+0x22>
 8000888:	40023800 	.word	0x40023800

0800088c <RCC_AdjustMSICalibrationValue>:
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <RCC_AdjustMSICalibrationValue+0x8>)
 800088e:	7018      	strb	r0, [r3, #0]
 8000890:	4770      	bx	lr
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40023807 	.word	0x40023807

08000898 <RCC_MSIRangeConfig>:
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <RCC_MSIRangeConfig+0x10>)
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <RCC_MSIRangeConfig+0x14>)
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	400a      	ands	r2, r1
 80008a0:	4310      	orrs	r0, r2
 80008a2:	6058      	str	r0, [r3, #4]
 80008a4:	4770      	bx	lr
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40023800 	.word	0x40023800
 80008ac:	ffff1fff 	.word	0xffff1fff

080008b0 <RCC_MSICmd>:
 80008b0:	4b01      	ldr	r3, [pc, #4]	; (80008b8 <RCC_MSICmd+0x8>)
 80008b2:	6018      	str	r0, [r3, #0]
 80008b4:	4770      	bx	lr
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	42470020 	.word	0x42470020

080008bc <RCC_AdjustHSICalibrationValue>:
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <RCC_AdjustHSICalibrationValue+0x10>)
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <RCC_AdjustHSICalibrationValue+0x14>)
 80008c0:	6859      	ldr	r1, [r3, #4]
 80008c2:	0200      	lsls	r0, r0, #8
 80008c4:	400a      	ands	r2, r1
 80008c6:	4310      	orrs	r0, r2
 80008c8:	6058      	str	r0, [r3, #4]
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800
 80008d0:	ffffe0ff 	.word	0xffffe0ff

080008d4 <RCC_HSICmd>:
 80008d4:	4b01      	ldr	r3, [pc, #4]	; (80008dc <RCC_HSICmd+0x8>)
 80008d6:	6018      	str	r0, [r3, #0]
 80008d8:	4770      	bx	lr
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	42470000 	.word	0x42470000

080008e0 <RCC_LSEConfig>:
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <RCC_LSEConfig+0xc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	7018      	strb	r0, [r3, #0]
 80008e8:	4770      	bx	lr
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40023835 	.word	0x40023835

080008f0 <RCC_LSICmd>:
 80008f0:	4b01      	ldr	r3, [pc, #4]	; (80008f8 <RCC_LSICmd+0x8>)
 80008f2:	6018      	str	r0, [r3, #0]
 80008f4:	4770      	bx	lr
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	42470680 	.word	0x42470680

080008fc <RCC_PLLConfig>:
 80008fc:	4310      	orrs	r0, r2
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <RCC_PLLConfig+0xc>)
 8000900:	4301      	orrs	r1, r0
 8000902:	7019      	strb	r1, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	4002380a 	.word	0x4002380a

0800090c <RCC_PLLCmd>:
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <RCC_PLLCmd+0x8>)
 800090e:	6018      	str	r0, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	42470060 	.word	0x42470060

08000918 <RCC_ClockSecuritySystemCmd>:
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <RCC_ClockSecuritySystemCmd+0x8>)
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	42470070 	.word	0x42470070

08000924 <RCC_LSEClockSecuritySystemCmd>:
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <RCC_LSEClockSecuritySystemCmd+0x8>)
 8000926:	6018      	str	r0, [r3, #0]
 8000928:	4770      	bx	lr
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	424706ac 	.word	0x424706ac

08000930 <RCC_MCOConfig>:
 8000930:	4b01      	ldr	r3, [pc, #4]	; (8000938 <RCC_MCOConfig+0x8>)
 8000932:	4308      	orrs	r0, r1
 8000934:	7018      	strb	r0, [r3, #0]
 8000936:	4770      	bx	lr
 8000938:	4002380b 	.word	0x4002380b

0800093c <RCC_SYSCLKConfig>:
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <RCC_SYSCLKConfig+0x10>)
 800093e:	2103      	movs	r1, #3
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	438a      	bics	r2, r1
 8000944:	4310      	orrs	r0, r2
 8000946:	6098      	str	r0, [r3, #8]
 8000948:	4770      	bx	lr
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40023800 	.word	0x40023800

08000950 <RCC_GetSYSCLKSource>:
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <RCC_GetSYSCLKSource+0xc>)
 8000952:	200c      	movs	r0, #12
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4018      	ands	r0, r3
 8000958:	4770      	bx	lr
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40023800 	.word	0x40023800

08000960 <RCC_HCLKConfig>:
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <RCC_HCLKConfig+0x10>)
 8000962:	21f0      	movs	r1, #240	; 0xf0
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	438a      	bics	r2, r1
 8000968:	4310      	orrs	r0, r2
 800096a:	6098      	str	r0, [r3, #8]
 800096c:	4770      	bx	lr
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40023800 	.word	0x40023800

08000974 <RCC_PCLK1Config>:
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <RCC_PCLK1Config+0x10>)
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <RCC_PCLK1Config+0x14>)
 8000978:	6899      	ldr	r1, [r3, #8]
 800097a:	400a      	ands	r2, r1
 800097c:	4310      	orrs	r0, r2
 800097e:	6098      	str	r0, [r3, #8]
 8000980:	4770      	bx	lr
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40023800 	.word	0x40023800
 8000988:	fffff8ff 	.word	0xfffff8ff

0800098c <RCC_PCLK2Config>:
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <RCC_PCLK2Config+0x10>)
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <RCC_PCLK2Config+0x14>)
 8000990:	6899      	ldr	r1, [r3, #8]
 8000992:	00c0      	lsls	r0, r0, #3
 8000994:	400a      	ands	r2, r1
 8000996:	4310      	orrs	r0, r2
 8000998:	6098      	str	r0, [r3, #8]
 800099a:	4770      	bx	lr
 800099c:	40023800 	.word	0x40023800
 80009a0:	ffffc7ff 	.word	0xffffc7ff

080009a4 <RCC_GetClocksFreq>:
 80009a4:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <RCC_GetClocksFreq+0xa8>)
 80009a6:	b538      	push	{r3, r4, r5, lr}
 80009a8:	6893      	ldr	r3, [r2, #8]
 80009aa:	210c      	movs	r1, #12
 80009ac:	1c04      	adds	r4, r0, #0
 80009ae:	400b      	ands	r3, r1
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d041      	beq.n	8000a38 <RCC_GetClocksFreq+0x94>
 80009b4:	d931      	bls.n	8000a1a <RCC_GetClocksFreq+0x76>
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d014      	beq.n	80009e4 <RCC_GetClocksFreq+0x40>
 80009ba:	2b0c      	cmp	r3, #12
 80009bc:	d139      	bne.n	8000a32 <RCC_GetClocksFreq+0x8e>
 80009be:	6893      	ldr	r3, [r2, #8]
 80009c0:	4d23      	ldr	r5, [pc, #140]	; (8000a50 <RCC_GetClocksFreq+0xac>)
 80009c2:	6891      	ldr	r1, [r2, #8]
 80009c4:	029b      	lsls	r3, r3, #10
 80009c6:	0f1b      	lsrs	r3, r3, #28
 80009c8:	5ceb      	ldrb	r3, [r5, r3]
 80009ca:	0209      	lsls	r1, r1, #8
 80009cc:	6892      	ldr	r2, [r2, #8]
 80009ce:	0f89      	lsrs	r1, r1, #30
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3101      	adds	r1, #1
 80009d4:	03d0      	lsls	r0, r2, #15
 80009d6:	d433      	bmi.n	8000a40 <RCC_GetClocksFreq+0x9c>
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <RCC_GetClocksFreq+0xb0>)
 80009da:	4358      	muls	r0, r3
 80009dc:	f001 f874 	bl	8001ac8 <__aeabi_uidiv>
 80009e0:	6020      	str	r0, [r4, #0]
 80009e2:	e002      	b.n	80009ea <RCC_GetClocksFreq+0x46>
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <RCC_GetClocksFreq+0xb4>)
 80009e6:	4d1a      	ldr	r5, [pc, #104]	; (8000a50 <RCC_GetClocksFreq+0xac>)
 80009e8:	6020      	str	r0, [r4, #0]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <RCC_GetClocksFreq+0xa8>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	0612      	lsls	r2, r2, #24
 80009f0:	0f12      	lsrs	r2, r2, #28
 80009f2:	18aa      	adds	r2, r5, r2
 80009f4:	7b12      	ldrb	r2, [r2, #12]
 80009f6:	40d0      	lsrs	r0, r2
 80009f8:	6060      	str	r0, [r4, #4]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	1c01      	adds	r1, r0, #0
 80009fe:	0552      	lsls	r2, r2, #21
 8000a00:	0f52      	lsrs	r2, r2, #29
 8000a02:	18aa      	adds	r2, r5, r2
 8000a04:	7b12      	ldrb	r2, [r2, #12]
 8000a06:	40d1      	lsrs	r1, r2
 8000a08:	60a1      	str	r1, [r4, #8]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	049b      	lsls	r3, r3, #18
 8000a0e:	0f5b      	lsrs	r3, r3, #29
 8000a10:	18ed      	adds	r5, r5, r3
 8000a12:	7b2b      	ldrb	r3, [r5, #12]
 8000a14:	40d8      	lsrs	r0, r3
 8000a16:	60e0      	str	r0, [r4, #12]
 8000a18:	bd38      	pop	{r3, r4, r5, pc}
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d109      	bne.n	8000a32 <RCC_GetClocksFreq+0x8e>
 8000a1e:	6853      	ldr	r3, [r2, #4]
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	0f5b      	lsrs	r3, r3, #29
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	3301      	adds	r3, #1
 8000a28:	0200      	lsls	r0, r0, #8
 8000a2a:	4098      	lsls	r0, r3
 8000a2c:	6020      	str	r0, [r4, #0]
 8000a2e:	4d08      	ldr	r5, [pc, #32]	; (8000a50 <RCC_GetClocksFreq+0xac>)
 8000a30:	e7db      	b.n	80009ea <RCC_GetClocksFreq+0x46>
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <RCC_GetClocksFreq+0xa8>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	e7f3      	b.n	8000a20 <RCC_GetClocksFreq+0x7c>
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <RCC_GetClocksFreq+0xb0>)
 8000a3a:	4d05      	ldr	r5, [pc, #20]	; (8000a50 <RCC_GetClocksFreq+0xac>)
 8000a3c:	6020      	str	r0, [r4, #0]
 8000a3e:	e7d4      	b.n	80009ea <RCC_GetClocksFreq+0x46>
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <RCC_GetClocksFreq+0xb4>)
 8000a42:	4358      	muls	r0, r3
 8000a44:	f001 f840 	bl	8001ac8 <__aeabi_uidiv>
 8000a48:	6020      	str	r0, [r4, #0]
 8000a4a:	e7ce      	b.n	80009ea <RCC_GetClocksFreq+0x46>
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	20000000 	.word	0x20000000
 8000a54:	00f42400 	.word	0x00f42400
 8000a58:	007a1200 	.word	0x007a1200

08000a5c <RCC_RTCCLKConfig>:
 8000a5c:	23c0      	movs	r3, #192	; 0xc0
 8000a5e:	029b      	lsls	r3, r3, #10
 8000a60:	1c02      	adds	r2, r0, #0
 8000a62:	b510      	push	{r4, lr}
 8000a64:	401a      	ands	r2, r3
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d108      	bne.n	8000a7c <RCC_RTCCLKConfig+0x20>
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <RCC_RTCCLKConfig+0x34>)
 8000a6c:	4909      	ldr	r1, [pc, #36]	; (8000a94 <RCC_RTCCLKConfig+0x38>)
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	4021      	ands	r1, r4
 8000a72:	24c0      	movs	r4, #192	; 0xc0
 8000a74:	05e4      	lsls	r4, r4, #23
 8000a76:	4020      	ands	r0, r4
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6018      	str	r0, [r3, #0]
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <RCC_RTCCLKConfig+0x34>)
 8000a7e:	4906      	ldr	r1, [pc, #24]	; (8000a98 <RCC_RTCCLKConfig+0x3c>)
 8000a80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a82:	4001      	ands	r1, r0
 8000a84:	6359      	str	r1, [r3, #52]	; 0x34
 8000a86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8c:	bd10      	pop	{r4, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40023800 	.word	0x40023800
 8000a94:	9fffffff 	.word	0x9fffffff
 8000a98:	fffcffff 	.word	0xfffcffff

08000a9c <RCC_RTCCLKCmd>:
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <RCC_RTCCLKCmd+0x8>)
 8000a9e:	6018      	str	r0, [r3, #0]
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	424706d8 	.word	0x424706d8

08000aa8 <RCC_RTCResetCmd>:
 8000aa8:	4b01      	ldr	r3, [pc, #4]	; (8000ab0 <RCC_RTCResetCmd+0x8>)
 8000aaa:	6018      	str	r0, [r3, #0]
 8000aac:	4770      	bx	lr
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	424706dc 	.word	0x424706dc

08000ab4 <RCC_AHBPeriphClockCmd>:
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <RCC_AHBPeriphClockCmd+0x14>)
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d102      	bne.n	8000ac2 <RCC_AHBPeriphClockCmd+0xe>
 8000abc:	4382      	bics	r2, r0
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4770      	bx	lr
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	61d8      	str	r0, [r3, #28]
 8000ac6:	e7fb      	b.n	8000ac0 <RCC_AHBPeriphClockCmd+0xc>
 8000ac8:	40023800 	.word	0x40023800

08000acc <RCC_APB2PeriphClockCmd>:
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <RCC_APB2PeriphClockCmd+0x14>)
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	d102      	bne.n	8000ada <RCC_APB2PeriphClockCmd+0xe>
 8000ad4:	4382      	bics	r2, r0
 8000ad6:	621a      	str	r2, [r3, #32]
 8000ad8:	4770      	bx	lr
 8000ada:	4310      	orrs	r0, r2
 8000adc:	6218      	str	r0, [r3, #32]
 8000ade:	e7fb      	b.n	8000ad8 <RCC_APB2PeriphClockCmd+0xc>
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <RCC_APB1PeriphClockCmd>:
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <RCC_APB1PeriphClockCmd+0x14>)
 8000ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	d102      	bne.n	8000af2 <RCC_APB1PeriphClockCmd+0xe>
 8000aec:	4382      	bics	r2, r0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
 8000af0:	4770      	bx	lr
 8000af2:	4310      	orrs	r0, r2
 8000af4:	6258      	str	r0, [r3, #36]	; 0x24
 8000af6:	e7fb      	b.n	8000af0 <RCC_APB1PeriphClockCmd+0xc>
 8000af8:	40023800 	.word	0x40023800

08000afc <RCC_AHBPeriphResetCmd>:
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <RCC_AHBPeriphResetCmd+0x14>)
 8000afe:	691a      	ldr	r2, [r3, #16]
 8000b00:	2900      	cmp	r1, #0
 8000b02:	d102      	bne.n	8000b0a <RCC_AHBPeriphResetCmd+0xe>
 8000b04:	4382      	bics	r2, r0
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	4770      	bx	lr
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	6118      	str	r0, [r3, #16]
 8000b0e:	e7fb      	b.n	8000b08 <RCC_AHBPeriphResetCmd+0xc>
 8000b10:	40023800 	.word	0x40023800

08000b14 <RCC_APB2PeriphResetCmd>:
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <RCC_APB2PeriphResetCmd+0x14>)
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	d102      	bne.n	8000b22 <RCC_APB2PeriphResetCmd+0xe>
 8000b1c:	4382      	bics	r2, r0
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	4770      	bx	lr
 8000b22:	4310      	orrs	r0, r2
 8000b24:	6158      	str	r0, [r3, #20]
 8000b26:	e7fb      	b.n	8000b20 <RCC_APB2PeriphResetCmd+0xc>
 8000b28:	40023800 	.word	0x40023800

08000b2c <RCC_APB1PeriphResetCmd>:
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <RCC_APB1PeriphResetCmd+0x14>)
 8000b2e:	699a      	ldr	r2, [r3, #24]
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d102      	bne.n	8000b3a <RCC_APB1PeriphResetCmd+0xe>
 8000b34:	4382      	bics	r2, r0
 8000b36:	619a      	str	r2, [r3, #24]
 8000b38:	4770      	bx	lr
 8000b3a:	4310      	orrs	r0, r2
 8000b3c:	6198      	str	r0, [r3, #24]
 8000b3e:	e7fb      	b.n	8000b38 <RCC_APB1PeriphResetCmd+0xc>
 8000b40:	40023800 	.word	0x40023800

08000b44 <RCC_AHBPeriphClockLPModeCmd>:
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <RCC_AHBPeriphClockLPModeCmd+0x14>)
 8000b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d102      	bne.n	8000b52 <RCC_AHBPeriphClockLPModeCmd+0xe>
 8000b4c:	4382      	bics	r2, r0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8000b50:	4770      	bx	lr
 8000b52:	4310      	orrs	r0, r2
 8000b54:	6298      	str	r0, [r3, #40]	; 0x28
 8000b56:	e7fb      	b.n	8000b50 <RCC_AHBPeriphClockLPModeCmd+0xc>
 8000b58:	40023800 	.word	0x40023800

08000b5c <RCC_APB2PeriphClockLPModeCmd>:
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d102      	bne.n	8000b6a <RCC_APB2PeriphClockLPModeCmd+0xe>
 8000b64:	4382      	bics	r2, r0
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4770      	bx	lr
 8000b6a:	4310      	orrs	r0, r2
 8000b6c:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000b6e:	e7fb      	b.n	8000b68 <RCC_APB2PeriphClockLPModeCmd+0xc>
 8000b70:	40023800 	.word	0x40023800

08000b74 <RCC_APB1PeriphClockLPModeCmd>:
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	d102      	bne.n	8000b82 <RCC_APB1PeriphClockLPModeCmd+0xe>
 8000b7c:	4382      	bics	r2, r0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b80:	4770      	bx	lr
 8000b82:	4310      	orrs	r0, r2
 8000b84:	6318      	str	r0, [r3, #48]	; 0x30
 8000b86:	e7fb      	b.n	8000b80 <RCC_APB1PeriphClockLPModeCmd+0xc>
 8000b88:	40023800 	.word	0x40023800

08000b8c <RCC_ITConfig>:
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <RCC_ITConfig+0x14>)
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d102      	bne.n	8000b9a <RCC_ITConfig+0xe>
 8000b94:	4382      	bics	r2, r0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	4310      	orrs	r0, r2
 8000b9c:	7018      	strb	r0, [r3, #0]
 8000b9e:	e7fb      	b.n	8000b98 <RCC_ITConfig+0xc>
 8000ba0:	4002380d 	.word	0x4002380d

08000ba4 <RCC_GetFlagStatus>:
 8000ba4:	0943      	lsrs	r3, r0, #5
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d008      	beq.n	8000bbc <RCC_GetFlagStatus+0x18>
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <RCC_GetFlagStatus+0x20>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	221f      	movs	r2, #31
 8000bb0:	4010      	ands	r0, r2
 8000bb2:	40c3      	lsrs	r3, r0
 8000bb4:	1c18      	adds	r0, r3, #0
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4018      	ands	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <RCC_GetFlagStatus+0x20>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e7f5      	b.n	8000bae <RCC_GetFlagStatus+0xa>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <RCC_ClearFlag>:
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <RCC_ClearFlag+0x10>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bce:	0452      	lsls	r2, r2, #17
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd4:	4770      	bx	lr
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40023800 	.word	0x40023800

08000bdc <RCC_GetITStatus>:
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <RCC_GetITStatus+0x10>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4018      	ands	r0, r3
 8000be2:	1e43      	subs	r3, r0, #1
 8000be4:	4198      	sbcs	r0, r3
 8000be6:	b2c0      	uxtb	r0, r0
 8000be8:	4770      	bx	lr
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40023800 	.word	0x40023800

08000bf0 <RCC_ClearITPendingBit>:
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <RCC_ClearITPendingBit+0x8>)
 8000bf2:	7018      	strb	r0, [r3, #0]
 8000bf4:	4770      	bx	lr
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	4002380e 	.word	0x4002380e

08000bfc <RTC_StructInit>:
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	227f      	movs	r2, #127	; 0x7f
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	c00e      	stmia	r0!, {r1, r2, r3}
 8000c04:	4770      	bx	lr
 8000c06:	46c0      	nop			; (mov r8, r8)

08000c08 <RTC_WriteProtectionCmd>:
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d105      	bne.n	8000c18 <RTC_WriteProtectionCmd+0x10>
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <RTC_WriteProtectionCmd+0x18>)
 8000c0e:	22ca      	movs	r2, #202	; 0xca
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
 8000c12:	2253      	movs	r2, #83	; 0x53
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
 8000c16:	4770      	bx	lr
 8000c18:	4b01      	ldr	r3, [pc, #4]	; (8000c20 <RTC_WriteProtectionCmd+0x18>)
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8000c1e:	e7fa      	b.n	8000c16 <RTC_WriteProtectionCmd+0xe>
 8000c20:	40002800 	.word	0x40002800

08000c24 <RTC_EnterInitMode>:
 8000c24:	b510      	push	{r4, lr}
 8000c26:	2300      	movs	r3, #0
 8000c28:	b082      	sub	sp, #8
 8000c2a:	4c0f      	ldr	r4, [pc, #60]	; (8000c68 <RTC_EnterInitMode+0x44>)
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	68e3      	ldr	r3, [r4, #12]
 8000c30:	2001      	movs	r0, #1
 8000c32:	065a      	lsls	r2, r3, #25
 8000c34:	d415      	bmi.n	8000c62 <RTC_EnterInitMode+0x3e>
 8000c36:	2301      	movs	r3, #1
 8000c38:	425b      	negs	r3, r3
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	60e3      	str	r3, [r4, #12]
 8000c3e:	2040      	movs	r0, #64	; 0x40
 8000c40:	0189      	lsls	r1, r1, #6
 8000c42:	e001      	b.n	8000c48 <RTC_EnterInitMode+0x24>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d108      	bne.n	8000c5a <RTC_EnterInitMode+0x36>
 8000c48:	68e3      	ldr	r3, [r4, #12]
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	9b01      	ldr	r3, [sp, #4]
 8000c50:	3301      	adds	r3, #1
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	9b01      	ldr	r3, [sp, #4]
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d1f4      	bne.n	8000c44 <RTC_EnterInitMode+0x20>
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <RTC_EnterInitMode+0x44>)
 8000c5c:	68d8      	ldr	r0, [r3, #12]
 8000c5e:	0640      	lsls	r0, r0, #25
 8000c60:	0fc0      	lsrs	r0, r0, #31
 8000c62:	b002      	add	sp, #8
 8000c64:	bd10      	pop	{r4, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40002800 	.word	0x40002800

08000c6c <RTC_Init>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c12      	ldr	r4, [pc, #72]	; (8000cb8 <RTC_Init+0x4c>)
 8000c70:	23ca      	movs	r3, #202	; 0xca
 8000c72:	6263      	str	r3, [r4, #36]	; 0x24
 8000c74:	2353      	movs	r3, #83	; 0x53
 8000c76:	6263      	str	r3, [r4, #36]	; 0x24
 8000c78:	1c05      	adds	r5, r0, #0
 8000c7a:	f7ff ffd3 	bl	8000c24 <RTC_EnterInitMode>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d013      	beq.n	8000cac <RTC_Init+0x40>
 8000c84:	68a3      	ldr	r3, [r4, #8]
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	4393      	bics	r3, r2
 8000c8a:	60a3      	str	r3, [r4, #8]
 8000c8c:	68a3      	ldr	r3, [r4, #8]
 8000c8e:	682a      	ldr	r2, [r5, #0]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60a3      	str	r3, [r4, #8]
 8000c94:	68ab      	ldr	r3, [r5, #8]
 8000c96:	6123      	str	r3, [r4, #16]
 8000c98:	686b      	ldr	r3, [r5, #4]
 8000c9a:	6922      	ldr	r2, [r4, #16]
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	6123      	str	r3, [r4, #16]
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	4393      	bics	r3, r2
 8000ca8:	60e3      	str	r3, [r4, #12]
 8000caa:	2301      	movs	r3, #1
 8000cac:	4a02      	ldr	r2, [pc, #8]	; (8000cb8 <RTC_Init+0x4c>)
 8000cae:	21ff      	movs	r1, #255	; 0xff
 8000cb0:	1c18      	adds	r0, r3, #0
 8000cb2:	6251      	str	r1, [r2, #36]	; 0x24
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40002800 	.word	0x40002800

08000cbc <RTC_ExitInitMode>:
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <RTC_ExitInitMode+0xc>)
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	438a      	bics	r2, r1
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	4770      	bx	lr
 8000cc8:	40002800 	.word	0x40002800

08000ccc <RTC_WaitForSynchro>:
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4c10      	ldr	r4, [pc, #64]	; (8000d14 <RTC_WaitForSynchro+0x48>)
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	23ca      	movs	r3, #202	; 0xca
 8000cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8000cda:	2353      	movs	r3, #83	; 0x53
 8000cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	22a0      	movs	r2, #160	; 0xa0
 8000ce2:	4393      	bics	r3, r2
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	60e3      	str	r3, [r4, #12]
 8000ce8:	2020      	movs	r0, #32
 8000cea:	0209      	lsls	r1, r1, #8
 8000cec:	e001      	b.n	8000cf2 <RTC_WaitForSynchro+0x26>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d108      	bne.n	8000d04 <RTC_WaitForSynchro+0x38>
 8000cf2:	68e3      	ldr	r3, [r4, #12]
 8000cf4:	1c02      	adds	r2, r0, #0
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	9b01      	ldr	r3, [sp, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d1f4      	bne.n	8000cee <RTC_WaitForSynchro+0x22>
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <RTC_WaitForSynchro+0x48>)
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	68d8      	ldr	r0, [r3, #12]
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d0c:	0680      	lsls	r0, r0, #26
 8000d0e:	0fc0      	lsrs	r0, r0, #31
 8000d10:	b002      	add	sp, #8
 8000d12:	bd10      	pop	{r4, pc}
 8000d14:	40002800 	.word	0x40002800

08000d18 <RTC_DeInit>:
 8000d18:	b530      	push	{r4, r5, lr}
 8000d1a:	4c21      	ldr	r4, [pc, #132]	; (8000da0 <RTC_DeInit+0x88>)
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	23ca      	movs	r3, #202	; 0xca
 8000d20:	2500      	movs	r5, #0
 8000d22:	9501      	str	r5, [sp, #4]
 8000d24:	6263      	str	r3, [r4, #36]	; 0x24
 8000d26:	2353      	movs	r3, #83	; 0x53
 8000d28:	6263      	str	r3, [r4, #36]	; 0x24
 8000d2a:	f7ff ff7b 	bl	8000c24 <RTC_EnterInitMode>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d019      	beq.n	8000d66 <RTC_DeInit+0x4e>
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <RTC_DeInit+0x8c>)
 8000d34:	6025      	str	r5, [r4, #0]
 8000d36:	6063      	str	r3, [r4, #4]
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	60a3      	str	r3, [r4, #8]
 8000d42:	2004      	movs	r0, #4
 8000d44:	0189      	lsls	r1, r1, #6
 8000d46:	e001      	b.n	8000d4c <RTC_DeInit+0x34>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d108      	bne.n	8000d5e <RTC_DeInit+0x46>
 8000d4c:	68e3      	ldr	r3, [r4, #12]
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	401a      	ands	r2, r3
 8000d52:	9b01      	ldr	r3, [sp, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	9b01      	ldr	r3, [sp, #4]
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d1f4      	bne.n	8000d48 <RTC_DeInit+0x30>
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <RTC_DeInit+0x88>)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	0751      	lsls	r1, r2, #29
 8000d64:	d405      	bmi.n	8000d72 <RTC_DeInit+0x5a>
 8000d66:	2000      	movs	r0, #0
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <RTC_DeInit+0x88>)
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d6e:	b003      	add	sp, #12
 8000d70:	bd30      	pop	{r4, r5, pc}
 8000d72:	490d      	ldr	r1, [pc, #52]	; (8000da8 <RTC_DeInit+0x90>)
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	6159      	str	r1, [r3, #20]
 8000d7c:	490b      	ldr	r1, [pc, #44]	; (8000dac <RTC_DeInit+0x94>)
 8000d7e:	6119      	str	r1, [r3, #16]
 8000d80:	619a      	str	r2, [r3, #24]
 8000d82:	61da      	str	r2, [r3, #28]
 8000d84:	621a      	str	r2, [r3, #32]
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d8c:	649a      	str	r2, [r3, #72]	; 0x48
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
 8000d92:	f7ff ff9b 	bl	8000ccc <RTC_WaitForSynchro>
 8000d96:	1e43      	subs	r3, r0, #1
 8000d98:	4198      	sbcs	r0, r3
 8000d9a:	b2c0      	uxtb	r0, r0
 8000d9c:	e7e4      	b.n	8000d68 <RTC_DeInit+0x50>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40002800 	.word	0x40002800
 8000da4:	00002101 	.word	0x00002101
 8000da8:	0000ffff 	.word	0x0000ffff
 8000dac:	007f00ff 	.word	0x007f00ff

08000db0 <RTC_RefClockCmd>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4c10      	ldr	r4, [pc, #64]	; (8000df4 <RTC_RefClockCmd+0x44>)
 8000db4:	23ca      	movs	r3, #202	; 0xca
 8000db6:	6263      	str	r3, [r4, #36]	; 0x24
 8000db8:	2353      	movs	r3, #83	; 0x53
 8000dba:	6263      	str	r3, [r4, #36]	; 0x24
 8000dbc:	1c05      	adds	r5, r0, #0
 8000dbe:	f7ff ff31 	bl	8000c24 <RTC_EnterInitMode>
 8000dc2:	1c02      	adds	r2, r0, #0
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d00b      	beq.n	8000de2 <RTC_RefClockCmd+0x32>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d10d      	bne.n	8000dea <RTC_RefClockCmd+0x3a>
 8000dce:	68a3      	ldr	r3, [r4, #8]
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	4393      	bics	r3, r2
 8000dd4:	60a3      	str	r3, [r4, #8]
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <RTC_RefClockCmd+0x44>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	2001      	movs	r0, #1
 8000dde:	438a      	bics	r2, r1
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <RTC_RefClockCmd+0x44>)
 8000de4:	21ff      	movs	r1, #255	; 0xff
 8000de6:	6251      	str	r1, [r2, #36]	; 0x24
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
 8000dea:	68a2      	ldr	r2, [r4, #8]
 8000dec:	2310      	movs	r3, #16
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60a3      	str	r3, [r4, #8]
 8000df2:	e7f0      	b.n	8000dd6 <RTC_RefClockCmd+0x26>
 8000df4:	40002800 	.word	0x40002800

08000df8 <RTC_BypassShadowCmd>:
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <RTC_BypassShadowCmd+0x28>)
 8000dfa:	22ca      	movs	r2, #202	; 0xca
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8000dfe:	2253      	movs	r2, #83	; 0x53
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d107      	bne.n	8000e16 <RTC_BypassShadowCmd+0x1e>
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	21df      	movs	r1, #223	; 0xdf
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <RTC_BypassShadowCmd+0x28>)
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
 8000e14:	4770      	bx	lr
 8000e16:	6899      	ldr	r1, [r3, #8]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	e7f6      	b.n	8000e0e <RTC_BypassShadowCmd+0x16>
 8000e20:	40002800 	.word	0x40002800

08000e24 <RTC_SetTime>:
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <RTC_SetTime+0xd0>)
 8000e26:	b570      	push	{r4, r5, r6, lr}
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d130      	bne.n	8000e90 <RTC_SetTime+0x6c>
 8000e2e:	2540      	movs	r5, #64	; 0x40
 8000e30:	401d      	ands	r5, r3
 8000e32:	d15b      	bne.n	8000eec <RTC_SetTime+0xc8>
 8000e34:	70cd      	strb	r5, [r1, #3]
 8000e36:	780b      	ldrb	r3, [r1, #0]
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2b09      	cmp	r3, #9
 8000e3c:	d907      	bls.n	8000e4e <RTC_SetTime+0x2a>
 8000e3e:	3b0a      	subs	r3, #10
 8000e40:	3401      	adds	r4, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b2e4      	uxtb	r4, r4
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d8f9      	bhi.n	8000e3e <RTC_SetTime+0x1a>
 8000e4a:	0124      	lsls	r4, r4, #4
 8000e4c:	b2e4      	uxtb	r4, r4
 8000e4e:	7848      	ldrb	r0, [r1, #1]
 8000e50:	4323      	orrs	r3, r4
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	2400      	movs	r4, #0
 8000e56:	2809      	cmp	r0, #9
 8000e58:	d907      	bls.n	8000e6a <RTC_SetTime+0x46>
 8000e5a:	380a      	subs	r0, #10
 8000e5c:	3401      	adds	r4, #1
 8000e5e:	b2c0      	uxtb	r0, r0
 8000e60:	b2e4      	uxtb	r4, r4
 8000e62:	2809      	cmp	r0, #9
 8000e64:	d8f9      	bhi.n	8000e5a <RTC_SetTime+0x36>
 8000e66:	0124      	lsls	r4, r4, #4
 8000e68:	b2e4      	uxtb	r4, r4
 8000e6a:	788a      	ldrb	r2, [r1, #2]
 8000e6c:	4320      	orrs	r0, r4
 8000e6e:	0200      	lsls	r0, r0, #8
 8000e70:	2100      	movs	r1, #0
 8000e72:	2a09      	cmp	r2, #9
 8000e74:	d907      	bls.n	8000e86 <RTC_SetTime+0x62>
 8000e76:	3a0a      	subs	r2, #10
 8000e78:	3101      	adds	r1, #1
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	b2c9      	uxtb	r1, r1
 8000e7e:	2a09      	cmp	r2, #9
 8000e80:	d8f9      	bhi.n	8000e76 <RTC_SetTime+0x52>
 8000e82:	0109      	lsls	r1, r1, #4
 8000e84:	b2c9      	uxtb	r1, r1
 8000e86:	431d      	orrs	r5, r3
 8000e88:	4305      	orrs	r5, r0
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	4315      	orrs	r5, r2
 8000e8e:	e00b      	b.n	8000ea8 <RTC_SetTime+0x84>
 8000e90:	2240      	movs	r2, #64	; 0x40
 8000e92:	4013      	ands	r3, r2
 8000e94:	d127      	bne.n	8000ee6 <RTC_SetTime+0xc2>
 8000e96:	70cb      	strb	r3, [r1, #3]
 8000e98:	780d      	ldrb	r5, [r1, #0]
 8000e9a:	784a      	ldrb	r2, [r1, #1]
 8000e9c:	042d      	lsls	r5, r5, #16
 8000e9e:	0212      	lsls	r2, r2, #8
 8000ea0:	4315      	orrs	r5, r2
 8000ea2:	788a      	ldrb	r2, [r1, #2]
 8000ea4:	4315      	orrs	r5, r2
 8000ea6:	431d      	orrs	r5, r3
 8000ea8:	4c12      	ldr	r4, [pc, #72]	; (8000ef4 <RTC_SetTime+0xd0>)
 8000eaa:	26ca      	movs	r6, #202	; 0xca
 8000eac:	6266      	str	r6, [r4, #36]	; 0x24
 8000eae:	2653      	movs	r6, #83	; 0x53
 8000eb0:	6266      	str	r6, [r4, #36]	; 0x24
 8000eb2:	f7ff feb7 	bl	8000c24 <RTC_EnterInitMode>
 8000eb6:	1c06      	adds	r6, r0, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d00f      	beq.n	8000ede <RTC_SetTime+0xba>
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <RTC_SetTime+0xd4>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	401d      	ands	r5, r3
 8000ec4:	6025      	str	r5, [r4, #0]
 8000ec6:	68e3      	ldr	r3, [r4, #12]
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4393      	bics	r3, r2
 8000ecc:	60e3      	str	r3, [r4, #12]
 8000ece:	68a3      	ldr	r3, [r4, #8]
 8000ed0:	069a      	lsls	r2, r3, #26
 8000ed2:	d404      	bmi.n	8000ede <RTC_SetTime+0xba>
 8000ed4:	f7ff fefa 	bl	8000ccc <RTC_WaitForSynchro>
 8000ed8:	1e43      	subs	r3, r0, #1
 8000eda:	4198      	sbcs	r0, r3
 8000edc:	b2c0      	uxtb	r0, r0
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <RTC_SetTime+0xd0>)
 8000ee0:	22ff      	movs	r2, #255	; 0xff
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ee4:	bd70      	pop	{r4, r5, r6, pc}
 8000ee6:	78cb      	ldrb	r3, [r1, #3]
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	e7d5      	b.n	8000e98 <RTC_SetTime+0x74>
 8000eec:	78cd      	ldrb	r5, [r1, #3]
 8000eee:	042d      	lsls	r5, r5, #16
 8000ef0:	e7a1      	b.n	8000e36 <RTC_SetTime+0x12>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40002800 	.word	0x40002800
 8000ef8:	007f7f7f 	.word	0x007f7f7f

08000efc <RTC_TimeStructInit>:
 8000efc:	2300      	movs	r3, #0
 8000efe:	70c3      	strb	r3, [r0, #3]
 8000f00:	7003      	strb	r3, [r0, #0]
 8000f02:	7043      	strb	r3, [r0, #1]
 8000f04:	7083      	strb	r3, [r0, #2]
 8000f06:	4770      	bx	lr

08000f08 <RTC_GetTime>:
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <RTC_GetTime+0x54>)
 8000f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2780      	movs	r7, #128	; 0x80
 8000f10:	257f      	movs	r5, #127	; 0x7f
 8000f12:	03ff      	lsls	r7, r7, #15
 8000f14:	029c      	lsls	r4, r3, #10
 8000f16:	045a      	lsls	r2, r3, #17
 8000f18:	401d      	ands	r5, r3
 8000f1a:	403b      	ands	r3, r7
 8000f1c:	0ea4      	lsrs	r4, r4, #26
 8000f1e:	0e52      	lsrs	r2, r2, #25
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	700c      	strb	r4, [r1, #0]
 8000f24:	704a      	strb	r2, [r1, #1]
 8000f26:	708d      	strb	r5, [r1, #2]
 8000f28:	70cb      	strb	r3, [r1, #3]
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d115      	bne.n	8000f5a <RTC_GetTime+0x52>
 8000f2e:	0923      	lsrs	r3, r4, #4
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	181b      	adds	r3, r3, r0
 8000f34:	0058      	lsls	r0, r3, #1
 8000f36:	230f      	movs	r3, #15
 8000f38:	401c      	ands	r4, r3
 8000f3a:	1904      	adds	r4, r0, r4
 8000f3c:	0910      	lsrs	r0, r2, #4
 8000f3e:	700c      	strb	r4, [r1, #0]
 8000f40:	0084      	lsls	r4, r0, #2
 8000f42:	1900      	adds	r0, r0, r4
 8000f44:	0040      	lsls	r0, r0, #1
 8000f46:	401a      	ands	r2, r3
 8000f48:	092e      	lsrs	r6, r5, #4
 8000f4a:	1882      	adds	r2, r0, r2
 8000f4c:	704a      	strb	r2, [r1, #1]
 8000f4e:	00b2      	lsls	r2, r6, #2
 8000f50:	18b6      	adds	r6, r6, r2
 8000f52:	0076      	lsls	r6, r6, #1
 8000f54:	401d      	ands	r5, r3
 8000f56:	1975      	adds	r5, r6, r5
 8000f58:	708d      	strb	r5, [r1, #2]
 8000f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5c:	40002800 	.word	0x40002800

08000f60 <RTC_GetSubSecond>:
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <RTC_GetSubSecond+0x8>)
 8000f62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4770      	bx	lr
 8000f68:	40002800 	.word	0x40002800

08000f6c <RTC_SetDate>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d136      	bne.n	8000fe0 <RTC_SetDate+0x74>
 8000f72:	784b      	ldrb	r3, [r1, #1]
 8000f74:	2210      	movs	r2, #16
 8000f76:	421a      	tst	r2, r3
 8000f78:	d003      	beq.n	8000f82 <RTC_SetDate+0x16>
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	330a      	adds	r3, #10
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	704b      	strb	r3, [r1, #1]
 8000f82:	78ca      	ldrb	r2, [r1, #3]
 8000f84:	2a09      	cmp	r2, #9
 8000f86:	d955      	bls.n	8001034 <RTC_SetDate+0xc8>
 8000f88:	2000      	movs	r0, #0
 8000f8a:	3a0a      	subs	r2, #10
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	b2c0      	uxtb	r0, r0
 8000f92:	2a09      	cmp	r2, #9
 8000f94:	d8f9      	bhi.n	8000f8a <RTC_SetDate+0x1e>
 8000f96:	0100      	lsls	r0, r0, #4
 8000f98:	b2c4      	uxtb	r4, r0
 8000f9a:	4322      	orrs	r2, r4
 8000f9c:	0412      	lsls	r2, r2, #16
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d907      	bls.n	8000fb4 <RTC_SetDate+0x48>
 8000fa4:	3b0a      	subs	r3, #10
 8000fa6:	3401      	adds	r4, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b2e4      	uxtb	r4, r4
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d8f9      	bhi.n	8000fa4 <RTC_SetDate+0x38>
 8000fb0:	0124      	lsls	r4, r4, #4
 8000fb2:	b2e4      	uxtb	r4, r4
 8000fb4:	7888      	ldrb	r0, [r1, #2]
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	2809      	cmp	r0, #9
 8000fbc:	d93c      	bls.n	8001038 <RTC_SetDate+0xcc>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	380a      	subs	r0, #10
 8000fc2:	3401      	adds	r4, #1
 8000fc4:	b2c0      	uxtb	r0, r0
 8000fc6:	b2e4      	uxtb	r4, r4
 8000fc8:	2809      	cmp	r0, #9
 8000fca:	d8f9      	bhi.n	8000fc0 <RTC_SetDate+0x54>
 8000fcc:	0124      	lsls	r4, r4, #4
 8000fce:	b2e5      	uxtb	r5, r4
 8000fd0:	7809      	ldrb	r1, [r1, #0]
 8000fd2:	1c14      	adds	r4, r2, #0
 8000fd4:	0349      	lsls	r1, r1, #13
 8000fd6:	430c      	orrs	r4, r1
 8000fd8:	431c      	orrs	r4, r3
 8000fda:	4328      	orrs	r0, r5
 8000fdc:	4304      	orrs	r4, r0
 8000fde:	e009      	b.n	8000ff4 <RTC_SetDate+0x88>
 8000fe0:	78cc      	ldrb	r4, [r1, #3]
 8000fe2:	784b      	ldrb	r3, [r1, #1]
 8000fe4:	0424      	lsls	r4, r4, #16
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	431c      	orrs	r4, r3
 8000fea:	788b      	ldrb	r3, [r1, #2]
 8000fec:	431c      	orrs	r4, r3
 8000fee:	780b      	ldrb	r3, [r1, #0]
 8000ff0:	035b      	lsls	r3, r3, #13
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	4d11      	ldr	r5, [pc, #68]	; (800103c <RTC_SetDate+0xd0>)
 8000ff6:	21ca      	movs	r1, #202	; 0xca
 8000ff8:	6269      	str	r1, [r5, #36]	; 0x24
 8000ffa:	2153      	movs	r1, #83	; 0x53
 8000ffc:	6269      	str	r1, [r5, #36]	; 0x24
 8000ffe:	f7ff fe11 	bl	8000c24 <RTC_EnterInitMode>
 8001002:	1c01      	adds	r1, r0, #0
 8001004:	2000      	movs	r0, #0
 8001006:	2900      	cmp	r1, #0
 8001008:	d00a      	beq.n	8001020 <RTC_SetDate+0xb4>
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <RTC_SetDate+0xd4>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	4004      	ands	r4, r0
 8001010:	606c      	str	r4, [r5, #4]
 8001012:	68eb      	ldr	r3, [r5, #12]
 8001014:	2001      	movs	r0, #1
 8001016:	4393      	bics	r3, r2
 8001018:	60eb      	str	r3, [r5, #12]
 800101a:	68ab      	ldr	r3, [r5, #8]
 800101c:	069a      	lsls	r2, r3, #26
 800101e:	d503      	bpl.n	8001028 <RTC_SetDate+0xbc>
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <RTC_SetDate+0xd0>)
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	f7ff fe50 	bl	8000ccc <RTC_WaitForSynchro>
 800102c:	1e43      	subs	r3, r0, #1
 800102e:	4198      	sbcs	r0, r3
 8001030:	b2c0      	uxtb	r0, r0
 8001032:	e7f5      	b.n	8001020 <RTC_SetDate+0xb4>
 8001034:	2400      	movs	r4, #0
 8001036:	e7b0      	b.n	8000f9a <RTC_SetDate+0x2e>
 8001038:	2500      	movs	r5, #0
 800103a:	e7c9      	b.n	8000fd0 <RTC_SetDate+0x64>
 800103c:	40002800 	.word	0x40002800
 8001040:	00ffff3f 	.word	0x00ffff3f

08001044 <RTC_DateStructInit>:
 8001044:	2301      	movs	r3, #1
 8001046:	7003      	strb	r3, [r0, #0]
 8001048:	7083      	strb	r3, [r0, #2]
 800104a:	7043      	strb	r3, [r0, #1]
 800104c:	2300      	movs	r3, #0
 800104e:	70c3      	strb	r3, [r0, #3]
 8001050:	4770      	bx	lr
 8001052:	46c0      	nop			; (mov r8, r8)

08001054 <RTC_GetDate>:
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <RTC_GetDate+0x50>)
 8001056:	b570      	push	{r4, r5, r6, lr}
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	253f      	movs	r5, #63	; 0x3f
 800105c:	021c      	lsls	r4, r3, #8
 800105e:	04da      	lsls	r2, r3, #19
 8001060:	401d      	ands	r5, r3
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	0e24      	lsrs	r4, r4, #24
 8001066:	0ed2      	lsrs	r2, r2, #27
 8001068:	0f5b      	lsrs	r3, r3, #29
 800106a:	70cc      	strb	r4, [r1, #3]
 800106c:	704a      	strb	r2, [r1, #1]
 800106e:	708d      	strb	r5, [r1, #2]
 8001070:	700b      	strb	r3, [r1, #0]
 8001072:	2800      	cmp	r0, #0
 8001074:	d115      	bne.n	80010a2 <RTC_GetDate+0x4e>
 8001076:	0923      	lsrs	r3, r4, #4
 8001078:	0098      	lsls	r0, r3, #2
 800107a:	181b      	adds	r3, r3, r0
 800107c:	0058      	lsls	r0, r3, #1
 800107e:	230f      	movs	r3, #15
 8001080:	401c      	ands	r4, r3
 8001082:	1904      	adds	r4, r0, r4
 8001084:	0910      	lsrs	r0, r2, #4
 8001086:	70cc      	strb	r4, [r1, #3]
 8001088:	0084      	lsls	r4, r0, #2
 800108a:	1900      	adds	r0, r0, r4
 800108c:	0040      	lsls	r0, r0, #1
 800108e:	401a      	ands	r2, r3
 8001090:	092e      	lsrs	r6, r5, #4
 8001092:	1882      	adds	r2, r0, r2
 8001094:	704a      	strb	r2, [r1, #1]
 8001096:	00b2      	lsls	r2, r6, #2
 8001098:	18b6      	adds	r6, r6, r2
 800109a:	0076      	lsls	r6, r6, #1
 800109c:	401d      	ands	r5, r3
 800109e:	1975      	adds	r5, r6, r5
 80010a0:	708d      	strb	r5, [r1, #2]
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	40002800 	.word	0x40002800

080010a8 <RTC_SetAlarm>:
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <RTC_SetAlarm+0xf0>)
 80010aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d145      	bne.n	800113e <RTC_SetAlarm+0x96>
 80010b2:	2640      	movs	r6, #64	; 0x40
 80010b4:	401e      	ands	r6, r3
 80010b6:	d166      	bne.n	8001186 <RTC_SetAlarm+0xde>
 80010b8:	70d6      	strb	r6, [r2, #3]
 80010ba:	7813      	ldrb	r3, [r2, #0]
 80010bc:	2000      	movs	r0, #0
 80010be:	2b09      	cmp	r3, #9
 80010c0:	d907      	bls.n	80010d2 <RTC_SetAlarm+0x2a>
 80010c2:	3b0a      	subs	r3, #10
 80010c4:	3001      	adds	r0, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b2c0      	uxtb	r0, r0
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d8f9      	bhi.n	80010c2 <RTC_SetAlarm+0x1a>
 80010ce:	0100      	lsls	r0, r0, #4
 80010d0:	b2c0      	uxtb	r0, r0
 80010d2:	7854      	ldrb	r4, [r2, #1]
 80010d4:	4303      	orrs	r3, r0
 80010d6:	041b      	lsls	r3, r3, #16
 80010d8:	2500      	movs	r5, #0
 80010da:	2c09      	cmp	r4, #9
 80010dc:	d907      	bls.n	80010ee <RTC_SetAlarm+0x46>
 80010de:	3c0a      	subs	r4, #10
 80010e0:	3501      	adds	r5, #1
 80010e2:	b2e4      	uxtb	r4, r4
 80010e4:	b2ed      	uxtb	r5, r5
 80010e6:	2c09      	cmp	r4, #9
 80010e8:	d8f9      	bhi.n	80010de <RTC_SetAlarm+0x36>
 80010ea:	012d      	lsls	r5, r5, #4
 80010ec:	b2ed      	uxtb	r5, r5
 80010ee:	7890      	ldrb	r0, [r2, #2]
 80010f0:	432c      	orrs	r4, r5
 80010f2:	0224      	lsls	r4, r4, #8
 80010f4:	2809      	cmp	r0, #9
 80010f6:	d94d      	bls.n	8001194 <RTC_SetAlarm+0xec>
 80010f8:	2500      	movs	r5, #0
 80010fa:	380a      	subs	r0, #10
 80010fc:	3501      	adds	r5, #1
 80010fe:	b2c0      	uxtb	r0, r0
 8001100:	b2ed      	uxtb	r5, r5
 8001102:	2809      	cmp	r0, #9
 8001104:	d8f9      	bhi.n	80010fa <RTC_SetAlarm+0x52>
 8001106:	012f      	lsls	r7, r5, #4
 8001108:	b2ff      	uxtb	r7, r7
 800110a:	4307      	orrs	r7, r0
 800110c:	7b10      	ldrb	r0, [r2, #12]
 800110e:	2500      	movs	r5, #0
 8001110:	2809      	cmp	r0, #9
 8001112:	d93d      	bls.n	8001190 <RTC_SetAlarm+0xe8>
 8001114:	380a      	subs	r0, #10
 8001116:	3501      	adds	r5, #1
 8001118:	b2c0      	uxtb	r0, r0
 800111a:	b2ed      	uxtb	r5, r5
 800111c:	2809      	cmp	r0, #9
 800111e:	d8f9      	bhi.n	8001114 <RTC_SetAlarm+0x6c>
 8001120:	012d      	lsls	r5, r5, #4
 8001122:	b2ed      	uxtb	r5, r5
 8001124:	46ac      	mov	ip, r5
 8001126:	6855      	ldr	r5, [r2, #4]
 8001128:	6892      	ldr	r2, [r2, #8]
 800112a:	4315      	orrs	r5, r2
 800112c:	432e      	orrs	r6, r5
 800112e:	4662      	mov	r2, ip
 8001130:	4333      	orrs	r3, r6
 8001132:	4323      	orrs	r3, r4
 8001134:	4310      	orrs	r0, r2
 8001136:	433b      	orrs	r3, r7
 8001138:	0602      	lsls	r2, r0, #24
 800113a:	4313      	orrs	r3, r2
 800113c:	e012      	b.n	8001164 <RTC_SetAlarm+0xbc>
 800113e:	2040      	movs	r0, #64	; 0x40
 8001140:	4003      	ands	r3, r0
 8001142:	d11d      	bne.n	8001180 <RTC_SetAlarm+0xd8>
 8001144:	70d3      	strb	r3, [r2, #3]
 8001146:	6854      	ldr	r4, [r2, #4]
 8001148:	6895      	ldr	r5, [r2, #8]
 800114a:	7890      	ldrb	r0, [r2, #2]
 800114c:	432c      	orrs	r4, r5
 800114e:	4320      	orrs	r0, r4
 8001150:	7814      	ldrb	r4, [r2, #0]
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	4320      	orrs	r0, r4
 8001156:	7854      	ldrb	r4, [r2, #1]
 8001158:	7b12      	ldrb	r2, [r2, #12]
 800115a:	0224      	lsls	r4, r4, #8
 800115c:	4320      	orrs	r0, r4
 800115e:	0612      	lsls	r2, r2, #24
 8001160:	4310      	orrs	r0, r2
 8001162:	4303      	orrs	r3, r0
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <RTC_SetAlarm+0xf0>)
 8001166:	27ca      	movs	r7, #202	; 0xca
 8001168:	6257      	str	r7, [r2, #36]	; 0x24
 800116a:	2753      	movs	r7, #83	; 0x53
 800116c:	6257      	str	r7, [r2, #36]	; 0x24
 800116e:	2780      	movs	r7, #128	; 0x80
 8001170:	007f      	lsls	r7, r7, #1
 8001172:	42b9      	cmp	r1, r7
 8001174:	d00a      	beq.n	800118c <RTC_SetAlarm+0xe4>
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <RTC_SetAlarm+0xf0>)
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	78d3      	ldrb	r3, [r2, #3]
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	e7df      	b.n	8001146 <RTC_SetAlarm+0x9e>
 8001186:	78d6      	ldrb	r6, [r2, #3]
 8001188:	0436      	lsls	r6, r6, #16
 800118a:	e796      	b.n	80010ba <RTC_SetAlarm+0x12>
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	e7f3      	b.n	8001178 <RTC_SetAlarm+0xd0>
 8001190:	46ac      	mov	ip, r5
 8001192:	e7c8      	b.n	8001126 <RTC_SetAlarm+0x7e>
 8001194:	2700      	movs	r7, #0
 8001196:	e7b8      	b.n	800110a <RTC_SetAlarm+0x62>
 8001198:	40002800 	.word	0x40002800

0800119c <RTC_AlarmStructInit>:
 800119c:	2300      	movs	r3, #0
 800119e:	2201      	movs	r2, #1
 80011a0:	70c3      	strb	r3, [r0, #3]
 80011a2:	7003      	strb	r3, [r0, #0]
 80011a4:	7043      	strb	r3, [r0, #1]
 80011a6:	7083      	strb	r3, [r0, #2]
 80011a8:	6083      	str	r3, [r0, #8]
 80011aa:	7302      	strb	r2, [r0, #12]
 80011ac:	6043      	str	r3, [r0, #4]
 80011ae:	4770      	bx	lr

080011b0 <RTC_GetAlarm>:
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	4647      	mov	r7, r8
 80011b6:	b480      	push	{r7}
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4299      	cmp	r1, r3
 80011bc:	d03e      	beq.n	800123c <RTC_GetAlarm+0x8c>
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <RTC_GetAlarm+0x94>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	b2d9      	uxtb	r1, r3
 80011c4:	277f      	movs	r7, #127	; 0x7f
 80011c6:	400f      	ands	r7, r1
 80011c8:	4688      	mov	r8, r1
 80011ca:	2680      	movs	r6, #128	; 0x80
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	03c9      	lsls	r1, r1, #15
 80011d0:	05f6      	lsls	r6, r6, #23
 80011d2:	401e      	ands	r6, r3
 80011d4:	4019      	ands	r1, r3
 80011d6:	0c09      	lsrs	r1, r1, #16
 80011d8:	6096      	str	r6, [r2, #8]
 80011da:	4e1b      	ldr	r6, [pc, #108]	; (8001248 <RTC_GetAlarm+0x98>)
 80011dc:	029d      	lsls	r5, r3, #10
 80011de:	045c      	lsls	r4, r3, #17
 80011e0:	70d1      	strb	r1, [r2, #3]
 80011e2:	0099      	lsls	r1, r3, #2
 80011e4:	0ead      	lsrs	r5, r5, #26
 80011e6:	0e64      	lsrs	r4, r4, #25
 80011e8:	0e89      	lsrs	r1, r1, #26
 80011ea:	4033      	ands	r3, r6
 80011ec:	7015      	strb	r5, [r2, #0]
 80011ee:	7054      	strb	r4, [r2, #1]
 80011f0:	7097      	strb	r7, [r2, #2]
 80011f2:	7311      	strb	r1, [r2, #12]
 80011f4:	6053      	str	r3, [r2, #4]
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d11d      	bne.n	8001236 <RTC_GetAlarm+0x86>
 80011fa:	092b      	lsrs	r3, r5, #4
 80011fc:	0098      	lsls	r0, r3, #2
 80011fe:	181b      	adds	r3, r3, r0
 8001200:	0058      	lsls	r0, r3, #1
 8001202:	230f      	movs	r3, #15
 8001204:	401d      	ands	r5, r3
 8001206:	1945      	adds	r5, r0, r5
 8001208:	0920      	lsrs	r0, r4, #4
 800120a:	7015      	strb	r5, [r2, #0]
 800120c:	0085      	lsls	r5, r0, #2
 800120e:	1940      	adds	r0, r0, r5
 8001210:	0040      	lsls	r0, r0, #1
 8001212:	093f      	lsrs	r7, r7, #4
 8001214:	401c      	ands	r4, r3
 8001216:	1904      	adds	r4, r0, r4
 8001218:	00b8      	lsls	r0, r7, #2
 800121a:	183f      	adds	r7, r7, r0
 800121c:	0908      	lsrs	r0, r1, #4
 800121e:	7054      	strb	r4, [r2, #1]
 8001220:	0084      	lsls	r4, r0, #2
 8001222:	4646      	mov	r6, r8
 8001224:	1900      	adds	r0, r0, r4
 8001226:	007f      	lsls	r7, r7, #1
 8001228:	401e      	ands	r6, r3
 800122a:	0040      	lsls	r0, r0, #1
 800122c:	4019      	ands	r1, r3
 800122e:	19be      	adds	r6, r7, r6
 8001230:	1841      	adds	r1, r0, r1
 8001232:	7096      	strb	r6, [r2, #2]
 8001234:	7311      	strb	r1, [r2, #12]
 8001236:	bc04      	pop	{r2}
 8001238:	4690      	mov	r8, r2
 800123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <RTC_GetAlarm+0x94>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	e7bf      	b.n	80011c2 <RTC_GetAlarm+0x12>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40002800 	.word	0x40002800
 8001248:	80808080 	.word	0x80808080

0800124c <RTC_AlarmCmd>:
 800124c:	b510      	push	{r4, lr}
 800124e:	2300      	movs	r3, #0
 8001250:	4c14      	ldr	r4, [pc, #80]	; (80012a4 <RTC_AlarmCmd+0x58>)
 8001252:	b082      	sub	sp, #8
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	23ca      	movs	r3, #202	; 0xca
 8001258:	6263      	str	r3, [r4, #36]	; 0x24
 800125a:	2353      	movs	r3, #83	; 0x53
 800125c:	6263      	str	r3, [r4, #36]	; 0x24
 800125e:	68a3      	ldr	r3, [r4, #8]
 8001260:	2900      	cmp	r1, #0
 8001262:	d11b      	bne.n	800129c <RTC_AlarmCmd+0x50>
 8001264:	4383      	bics	r3, r0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	60a3      	str	r3, [r4, #8]
 800126a:	0a00      	lsrs	r0, r0, #8
 800126c:	0189      	lsls	r1, r1, #6
 800126e:	e001      	b.n	8001274 <RTC_AlarmCmd+0x28>
 8001270:	2a00      	cmp	r2, #0
 8001272:	d108      	bne.n	8001286 <RTC_AlarmCmd+0x3a>
 8001274:	68e3      	ldr	r3, [r4, #12]
 8001276:	1c1a      	adds	r2, r3, #0
 8001278:	9b01      	ldr	r3, [sp, #4]
 800127a:	4002      	ands	r2, r0
 800127c:	3301      	adds	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	9b01      	ldr	r3, [sp, #4]
 8001282:	428b      	cmp	r3, r1
 8001284:	d1f4      	bne.n	8001270 <RTC_AlarmCmd+0x24>
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <RTC_AlarmCmd+0x58>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4018      	ands	r0, r3
 800128c:	1e43      	subs	r3, r0, #1
 800128e:	4198      	sbcs	r0, r3
 8001290:	b2c0      	uxtb	r0, r0
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <RTC_AlarmCmd+0x58>)
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
 8001298:	b002      	add	sp, #8
 800129a:	bd10      	pop	{r4, pc}
 800129c:	4318      	orrs	r0, r3
 800129e:	60a0      	str	r0, [r4, #8]
 80012a0:	2001      	movs	r0, #1
 80012a2:	e7f6      	b.n	8001292 <RTC_AlarmCmd+0x46>
 80012a4:	40002800 	.word	0x40002800

080012a8 <RTC_AlarmSubSecondConfig>:
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <RTC_AlarmSubSecondConfig+0x24>)
 80012aa:	b510      	push	{r4, lr}
 80012ac:	24ca      	movs	r4, #202	; 0xca
 80012ae:	625c      	str	r4, [r3, #36]	; 0x24
 80012b0:	2453      	movs	r4, #83	; 0x53
 80012b2:	625c      	str	r4, [r3, #36]	; 0x24
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4311      	orrs	r1, r2
 80012b8:	0064      	lsls	r4, r4, #1
 80012ba:	42a0      	cmp	r0, r4
 80012bc:	d004      	beq.n	80012c8 <RTC_AlarmSubSecondConfig+0x20>
 80012be:	6499      	str	r1, [r3, #72]	; 0x48
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <RTC_AlarmSubSecondConfig+0x24>)
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	6459      	str	r1, [r3, #68]	; 0x44
 80012ca:	e7f9      	b.n	80012c0 <RTC_AlarmSubSecondConfig+0x18>
 80012cc:	40002800 	.word	0x40002800

080012d0 <RTC_GetAlarmSubSecond>:
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4298      	cmp	r0, r3
 80012d6:	d004      	beq.n	80012e2 <RTC_GetAlarmSubSecond+0x12>
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <RTC_GetAlarmSubSecond+0x1c>)
 80012da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012dc:	0440      	lsls	r0, r0, #17
 80012de:	0c40      	lsrs	r0, r0, #17
 80012e0:	4770      	bx	lr
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <RTC_GetAlarmSubSecond+0x1c>)
 80012e4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80012e6:	0440      	lsls	r0, r0, #17
 80012e8:	0c40      	lsrs	r0, r0, #17
 80012ea:	e7f9      	b.n	80012e0 <RTC_GetAlarmSubSecond+0x10>
 80012ec:	40002800 	.word	0x40002800

080012f0 <RTC_WakeUpClockConfig>:
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <RTC_WakeUpClockConfig+0x20>)
 80012f2:	22ca      	movs	r2, #202	; 0xca
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
 80012f6:	2253      	movs	r2, #83	; 0x53
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	2107      	movs	r1, #7
 80012fe:	438a      	bics	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	4310      	orrs	r0, r2
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	6098      	str	r0, [r3, #8]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
 800130c:	4770      	bx	lr
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40002800 	.word	0x40002800

08001314 <RTC_SetWakeUpCounter>:
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <RTC_SetWakeUpCounter+0x14>)
 8001316:	22ca      	movs	r2, #202	; 0xca
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
 800131a:	2253      	movs	r2, #83	; 0x53
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	6158      	str	r0, [r3, #20]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
 8001324:	4770      	bx	lr
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40002800 	.word	0x40002800

0800132c <RTC_GetWakeUpCounter>:
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <RTC_GetWakeUpCounter+0xc>)
 800132e:	6958      	ldr	r0, [r3, #20]
 8001330:	0400      	lsls	r0, r0, #16
 8001332:	0c00      	lsrs	r0, r0, #16
 8001334:	4770      	bx	lr
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40002800 	.word	0x40002800

0800133c <RTC_WakeUpCmd>:
 800133c:	b510      	push	{r4, lr}
 800133e:	2300      	movs	r3, #0
 8001340:	4c15      	ldr	r4, [pc, #84]	; (8001398 <RTC_WakeUpCmd+0x5c>)
 8001342:	b082      	sub	sp, #8
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	23ca      	movs	r3, #202	; 0xca
 8001348:	6263      	str	r3, [r4, #36]	; 0x24
 800134a:	2353      	movs	r3, #83	; 0x53
 800134c:	6263      	str	r3, [r4, #36]	; 0x24
 800134e:	68a2      	ldr	r2, [r4, #8]
 8001350:	2800      	cmp	r0, #0
 8001352:	d11a      	bne.n	800138a <RTC_WakeUpCmd+0x4e>
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <RTC_WakeUpCmd+0x60>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4013      	ands	r3, r2
 800135a:	60a3      	str	r3, [r4, #8]
 800135c:	2004      	movs	r0, #4
 800135e:	0189      	lsls	r1, r1, #6
 8001360:	e001      	b.n	8001366 <RTC_WakeUpCmd+0x2a>
 8001362:	2a00      	cmp	r2, #0
 8001364:	d108      	bne.n	8001378 <RTC_WakeUpCmd+0x3c>
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	1c02      	adds	r2, r0, #0
 800136a:	401a      	ands	r2, r3
 800136c:	9b01      	ldr	r3, [sp, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	428b      	cmp	r3, r1
 8001376:	d1f4      	bne.n	8001362 <RTC_WakeUpCmd+0x26>
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <RTC_WakeUpCmd+0x5c>)
 800137a:	68d8      	ldr	r0, [r3, #12]
 800137c:	0740      	lsls	r0, r0, #29
 800137e:	0fc0      	lsrs	r0, r0, #31
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <RTC_WakeUpCmd+0x5c>)
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	b002      	add	sp, #8
 8001388:	bd10      	pop	{r4, pc}
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4313      	orrs	r3, r2
 8001390:	60a3      	str	r3, [r4, #8]
 8001392:	2001      	movs	r0, #1
 8001394:	e7f4      	b.n	8001380 <RTC_WakeUpCmd+0x44>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40002800 	.word	0x40002800
 800139c:	fffffbff 	.word	0xfffffbff

080013a0 <RTC_DayLightSavingConfig>:
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <RTC_DayLightSavingConfig+0x24>)
 80013a2:	22ca      	movs	r2, #202	; 0xca
 80013a4:	b510      	push	{r4, lr}
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
 80013a8:	2253      	movs	r2, #83	; 0x53
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
 80013ac:	689c      	ldr	r4, [r3, #8]
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <RTC_DayLightSavingConfig+0x28>)
 80013b0:	4022      	ands	r2, r4
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	4311      	orrs	r1, r2
 80013b8:	4308      	orrs	r0, r1
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	6098      	str	r0, [r3, #8]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
 80013c0:	bd10      	pop	{r4, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40002800 	.word	0x40002800
 80013c8:	fffbffff 	.word	0xfffbffff

080013cc <RTC_GetStoreOperation>:
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <RTC_GetStoreOperation+0xc>)
 80013ce:	2080      	movs	r0, #128	; 0x80
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	02c0      	lsls	r0, r0, #11
 80013d4:	4018      	ands	r0, r3
 80013d6:	4770      	bx	lr
 80013d8:	40002800 	.word	0x40002800

080013dc <RTC_OutputConfig>:
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <RTC_OutputConfig+0x24>)
 80013de:	22ca      	movs	r2, #202	; 0xca
 80013e0:	b510      	push	{r4, lr}
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
 80013e4:	2253      	movs	r2, #83	; 0x53
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
 80013e8:	689c      	ldr	r4, [r3, #8]
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <RTC_OutputConfig+0x28>)
 80013ec:	4022      	ands	r2, r4
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	4311      	orrs	r1, r2
 80013f4:	4308      	orrs	r0, r1
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	6098      	str	r0, [r3, #8]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40002800 	.word	0x40002800
 8001404:	ff8fffff 	.word	0xff8fffff

08001408 <RTC_CoarseCalibConfig>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4c0c      	ldr	r4, [pc, #48]	; (800143c <RTC_CoarseCalibConfig+0x34>)
 800140c:	23ca      	movs	r3, #202	; 0xca
 800140e:	6263      	str	r3, [r4, #36]	; 0x24
 8001410:	2353      	movs	r3, #83	; 0x53
 8001412:	6263      	str	r3, [r4, #36]	; 0x24
 8001414:	1c06      	adds	r6, r0, #0
 8001416:	1c0d      	adds	r5, r1, #0
 8001418:	f7ff fc04 	bl	8000c24 <RTC_EnterInitMode>
 800141c:	1c02      	adds	r2, r0, #0
 800141e:	2000      	movs	r0, #0
 8001420:	2a00      	cmp	r2, #0
 8001422:	d006      	beq.n	8001432 <RTC_CoarseCalibConfig+0x2a>
 8001424:	4335      	orrs	r5, r6
 8001426:	61a5      	str	r5, [r4, #24]
 8001428:	68e3      	ldr	r3, [r4, #12]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4393      	bics	r3, r2
 800142e:	60e3      	str	r3, [r4, #12]
 8001430:	2001      	movs	r0, #1
 8001432:	4a02      	ldr	r2, [pc, #8]	; (800143c <RTC_CoarseCalibConfig+0x34>)
 8001434:	21ff      	movs	r1, #255	; 0xff
 8001436:	6251      	str	r1, [r2, #36]	; 0x24
 8001438:	bd70      	pop	{r4, r5, r6, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40002800 	.word	0x40002800

08001440 <RTC_CoarseCalibCmd>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4c10      	ldr	r4, [pc, #64]	; (8001484 <RTC_CoarseCalibCmd+0x44>)
 8001444:	23ca      	movs	r3, #202	; 0xca
 8001446:	6263      	str	r3, [r4, #36]	; 0x24
 8001448:	2353      	movs	r3, #83	; 0x53
 800144a:	6263      	str	r3, [r4, #36]	; 0x24
 800144c:	1c05      	adds	r5, r0, #0
 800144e:	f7ff fbe9 	bl	8000c24 <RTC_EnterInitMode>
 8001452:	1c02      	adds	r2, r0, #0
 8001454:	2000      	movs	r0, #0
 8001456:	2a00      	cmp	r2, #0
 8001458:	d00b      	beq.n	8001472 <RTC_CoarseCalibCmd+0x32>
 800145a:	2d00      	cmp	r5, #0
 800145c:	d10d      	bne.n	800147a <RTC_CoarseCalibCmd+0x3a>
 800145e:	68a3      	ldr	r3, [r4, #8]
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	4393      	bics	r3, r2
 8001464:	60a3      	str	r3, [r4, #8]
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <RTC_CoarseCalibCmd+0x44>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	2001      	movs	r0, #1
 800146e:	438a      	bics	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <RTC_CoarseCalibCmd+0x44>)
 8001474:	21ff      	movs	r1, #255	; 0xff
 8001476:	6251      	str	r1, [r2, #36]	; 0x24
 8001478:	bd38      	pop	{r3, r4, r5, pc}
 800147a:	68a2      	ldr	r2, [r4, #8]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	4313      	orrs	r3, r2
 8001480:	60a3      	str	r3, [r4, #8]
 8001482:	e7f0      	b.n	8001466 <RTC_CoarseCalibCmd+0x26>
 8001484:	40002800 	.word	0x40002800

08001488 <RTC_CalibOutputCmd>:
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <RTC_CalibOutputCmd+0x28>)
 800148a:	22ca      	movs	r2, #202	; 0xca
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
 800148e:	2253      	movs	r2, #83	; 0x53
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
 8001492:	6899      	ldr	r1, [r3, #8]
 8001494:	2800      	cmp	r0, #0
 8001496:	d106      	bne.n	80014a6 <RTC_CalibOutputCmd+0x1e>
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <RTC_CalibOutputCmd+0x2c>)
 800149a:	400a      	ands	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <RTC_CalibOutputCmd+0x28>)
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
 80014a4:	4770      	bx	lr
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	430a      	orrs	r2, r1
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e7f6      	b.n	800149e <RTC_CalibOutputCmd+0x16>
 80014b0:	40002800 	.word	0x40002800
 80014b4:	ff7fffff 	.word	0xff7fffff

080014b8 <RTC_CalibOutputConfig>:
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <RTC_CalibOutputConfig+0x20>)
 80014ba:	22ca      	movs	r2, #202	; 0xca
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
 80014be:	2253      	movs	r2, #83	; 0x53
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <RTC_CalibOutputConfig+0x24>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4310      	orrs	r0, r2
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	6098      	str	r0, [r3, #8]
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
 80014d4:	4770      	bx	lr
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40002800 	.word	0x40002800
 80014dc:	fff7ffff 	.word	0xfff7ffff

080014e0 <RTC_SmoothCalibConfig>:
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	4e12      	ldr	r6, [pc, #72]	; (800152c <RTC_SmoothCalibConfig+0x4c>)
 80014e4:	23ca      	movs	r3, #202	; 0xca
 80014e6:	6273      	str	r3, [r6, #36]	; 0x24
 80014e8:	2353      	movs	r3, #83	; 0x53
 80014ea:	6273      	str	r3, [r6, #36]	; 0x24
 80014ec:	2580      	movs	r5, #128	; 0x80
 80014ee:	68f3      	ldr	r3, [r6, #12]
 80014f0:	026d      	lsls	r5, r5, #9
 80014f2:	422b      	tst	r3, r5
 80014f4:	d00b      	beq.n	800150e <RTC_SmoothCalibConfig+0x2e>
 80014f6:	68f3      	ldr	r3, [r6, #12]
 80014f8:	422b      	tst	r3, r5
 80014fa:	d008      	beq.n	800150e <RTC_SmoothCalibConfig+0x2e>
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	e002      	b.n	8001508 <RTC_SmoothCalibConfig+0x28>
 8001502:	3b01      	subs	r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <RTC_SmoothCalibConfig+0x2e>
 8001508:	68f4      	ldr	r4, [r6, #12]
 800150a:	422c      	tst	r4, r5
 800150c:	d1f9      	bne.n	8001502 <RTC_SmoothCalibConfig+0x22>
 800150e:	4c07      	ldr	r4, [pc, #28]	; (800152c <RTC_SmoothCalibConfig+0x4c>)
 8001510:	2300      	movs	r3, #0
 8001512:	68e5      	ldr	r5, [r4, #12]
 8001514:	03ee      	lsls	r6, r5, #15
 8001516:	d403      	bmi.n	8001520 <RTC_SmoothCalibConfig+0x40>
 8001518:	4311      	orrs	r1, r2
 800151a:	4308      	orrs	r0, r1
 800151c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800151e:	2301      	movs	r3, #1
 8001520:	4a02      	ldr	r2, [pc, #8]	; (800152c <RTC_SmoothCalibConfig+0x4c>)
 8001522:	21ff      	movs	r1, #255	; 0xff
 8001524:	1c18      	adds	r0, r3, #0
 8001526:	6251      	str	r1, [r2, #36]	; 0x24
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40002800 	.word	0x40002800

08001530 <RTC_TimeStampCmd>:
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RTC_TimeStampCmd+0x2c>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <RTC_TimeStampCmd+0x30>)
 8001536:	4013      	ands	r3, r2
 8001538:	2900      	cmp	r1, #0
 800153a:	d109      	bne.n	8001550 <RTC_TimeStampCmd+0x20>
 800153c:	4318      	orrs	r0, r3
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <RTC_TimeStampCmd+0x2c>)
 8001540:	22ca      	movs	r2, #202	; 0xca
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
 8001544:	2253      	movs	r2, #83	; 0x53
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	6098      	str	r0, [r3, #8]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
 800154e:	4770      	bx	lr
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	4313      	orrs	r3, r2
 8001556:	4318      	orrs	r0, r3
 8001558:	e7f1      	b.n	800153e <RTC_TimeStampCmd+0xe>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40002800 	.word	0x40002800
 8001560:	fffff7f7 	.word	0xfffff7f7

08001564 <RTC_GetTimeStamp>:
 8001564:	b530      	push	{r4, r5, lr}
 8001566:	4c28      	ldr	r4, [pc, #160]	; (8001608 <RTC_GetTimeStamp+0xa4>)
 8001568:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800156a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800156c:	029d      	lsls	r5, r3, #10
 800156e:	0ead      	lsrs	r5, r5, #26
 8001570:	700d      	strb	r5, [r1, #0]
 8001572:	045d      	lsls	r5, r3, #17
 8001574:	0e6d      	lsrs	r5, r5, #25
 8001576:	704d      	strb	r5, [r1, #1]
 8001578:	257f      	movs	r5, #127	; 0x7f
 800157a:	401d      	ands	r5, r3
 800157c:	708d      	strb	r5, [r1, #2]
 800157e:	2580      	movs	r5, #128	; 0x80
 8001580:	03ed      	lsls	r5, r5, #15
 8001582:	402b      	ands	r3, r5
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	70cb      	strb	r3, [r1, #3]
 8001588:	2300      	movs	r3, #0
 800158a:	70d3      	strb	r3, [r2, #3]
 800158c:	04e3      	lsls	r3, r4, #19
 800158e:	0edb      	lsrs	r3, r3, #27
 8001590:	7053      	strb	r3, [r2, #1]
 8001592:	233f      	movs	r3, #63	; 0x3f
 8001594:	4023      	ands	r3, r4
 8001596:	0424      	lsls	r4, r4, #16
 8001598:	0f64      	lsrs	r4, r4, #29
 800159a:	7093      	strb	r3, [r2, #2]
 800159c:	7014      	strb	r4, [r2, #0]
 800159e:	2800      	cmp	r0, #0
 80015a0:	d130      	bne.n	8001604 <RTC_GetTimeStamp+0xa0>
 80015a2:	7808      	ldrb	r0, [r1, #0]
 80015a4:	0903      	lsrs	r3, r0, #4
 80015a6:	009c      	lsls	r4, r3, #2
 80015a8:	191b      	adds	r3, r3, r4
 80015aa:	005c      	lsls	r4, r3, #1
 80015ac:	230f      	movs	r3, #15
 80015ae:	4018      	ands	r0, r3
 80015b0:	1820      	adds	r0, r4, r0
 80015b2:	7008      	strb	r0, [r1, #0]
 80015b4:	7848      	ldrb	r0, [r1, #1]
 80015b6:	0904      	lsrs	r4, r0, #4
 80015b8:	00a5      	lsls	r5, r4, #2
 80015ba:	1964      	adds	r4, r4, r5
 80015bc:	0064      	lsls	r4, r4, #1
 80015be:	4018      	ands	r0, r3
 80015c0:	1820      	adds	r0, r4, r0
 80015c2:	7048      	strb	r0, [r1, #1]
 80015c4:	7888      	ldrb	r0, [r1, #2]
 80015c6:	0904      	lsrs	r4, r0, #4
 80015c8:	00a5      	lsls	r5, r4, #2
 80015ca:	1964      	adds	r4, r4, r5
 80015cc:	0064      	lsls	r4, r4, #1
 80015ce:	4018      	ands	r0, r3
 80015d0:	1820      	adds	r0, r4, r0
 80015d2:	7088      	strb	r0, [r1, #2]
 80015d4:	7851      	ldrb	r1, [r2, #1]
 80015d6:	0908      	lsrs	r0, r1, #4
 80015d8:	0084      	lsls	r4, r0, #2
 80015da:	1900      	adds	r0, r0, r4
 80015dc:	0040      	lsls	r0, r0, #1
 80015de:	4019      	ands	r1, r3
 80015e0:	1841      	adds	r1, r0, r1
 80015e2:	7051      	strb	r1, [r2, #1]
 80015e4:	7891      	ldrb	r1, [r2, #2]
 80015e6:	0908      	lsrs	r0, r1, #4
 80015e8:	0084      	lsls	r4, r0, #2
 80015ea:	1900      	adds	r0, r0, r4
 80015ec:	0040      	lsls	r0, r0, #1
 80015ee:	4019      	ands	r1, r3
 80015f0:	1841      	adds	r1, r0, r1
 80015f2:	7091      	strb	r1, [r2, #2]
 80015f4:	7811      	ldrb	r1, [r2, #0]
 80015f6:	0908      	lsrs	r0, r1, #4
 80015f8:	0084      	lsls	r4, r0, #2
 80015fa:	1900      	adds	r0, r0, r4
 80015fc:	0040      	lsls	r0, r0, #1
 80015fe:	400b      	ands	r3, r1
 8001600:	18c3      	adds	r3, r0, r3
 8001602:	7013      	strb	r3, [r2, #0]
 8001604:	bd30      	pop	{r4, r5, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40002800 	.word	0x40002800

0800160c <RTC_GetTimeStampSubSecond>:
 800160c:	4b01      	ldr	r3, [pc, #4]	; (8001614 <RTC_GetTimeStampSubSecond+0x8>)
 800160e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001610:	4770      	bx	lr
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40002800 	.word	0x40002800

08001618 <RTC_TamperTriggerConfig>:
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <RTC_TamperTriggerConfig+0x18>)
 800161a:	0040      	lsls	r0, r0, #1
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	2900      	cmp	r1, #0
 8001620:	d002      	beq.n	8001628 <RTC_TamperTriggerConfig+0x10>
 8001622:	4310      	orrs	r0, r2
 8001624:	6418      	str	r0, [r3, #64]	; 0x40
 8001626:	4770      	bx	lr
 8001628:	4382      	bics	r2, r0
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
 800162c:	e7fb      	b.n	8001626 <RTC_TamperTriggerConfig+0xe>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40002800 	.word	0x40002800

08001634 <RTC_TamperCmd>:
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <RTC_TamperCmd+0x14>)
 8001636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001638:	2900      	cmp	r1, #0
 800163a:	d102      	bne.n	8001642 <RTC_TamperCmd+0xe>
 800163c:	4382      	bics	r2, r0
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
 8001640:	4770      	bx	lr
 8001642:	4310      	orrs	r0, r2
 8001644:	6418      	str	r0, [r3, #64]	; 0x40
 8001646:	e7fb      	b.n	8001640 <RTC_TamperCmd+0xc>
 8001648:	40002800 	.word	0x40002800

0800164c <RTC_TamperFilterConfig>:
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <RTC_TamperFilterConfig+0x14>)
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <RTC_TamperFilterConfig+0x18>)
 8001650:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001652:	400a      	ands	r2, r1
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
 8001656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001658:	4310      	orrs	r0, r2
 800165a:	6418      	str	r0, [r3, #64]	; 0x40
 800165c:	4770      	bx	lr
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40002800 	.word	0x40002800
 8001664:	ffffe7ff 	.word	0xffffe7ff

08001668 <RTC_TamperSamplingFreqConfig>:
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <RTC_TamperSamplingFreqConfig+0x14>)
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <RTC_TamperSamplingFreqConfig+0x18>)
 800166c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800166e:	400a      	ands	r2, r1
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
 8001672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001674:	4310      	orrs	r0, r2
 8001676:	6418      	str	r0, [r3, #64]	; 0x40
 8001678:	4770      	bx	lr
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40002800 	.word	0x40002800
 8001680:	fffff8ff 	.word	0xfffff8ff

08001684 <RTC_TamperPinsPrechargeDuration>:
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <RTC_TamperPinsPrechargeDuration+0x14>)
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <RTC_TamperPinsPrechargeDuration+0x18>)
 8001688:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800168a:	400a      	ands	r2, r1
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	4310      	orrs	r0, r2
 8001692:	6418      	str	r0, [r3, #64]	; 0x40
 8001694:	4770      	bx	lr
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40002800 	.word	0x40002800
 800169c:	ffff9fff 	.word	0xffff9fff

080016a0 <RTC_TimeStampOnTamperDetectionCmd>:
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <RTC_TimeStampOnTamperDetectionCmd+0x1c>)
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d104      	bne.n	80016b0 <RTC_TimeStampOnTamperDetectionCmd+0x10>
 80016a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	438a      	bics	r2, r1
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
 80016ae:	4770      	bx	lr
 80016b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	430a      	orrs	r2, r1
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
 80016b8:	e7f9      	b.n	80016ae <RTC_TimeStampOnTamperDetectionCmd+0xe>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40002800 	.word	0x40002800

080016c0 <RTC_TamperPullUpCmd>:
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <RTC_TamperPullUpCmd+0x1c>)
 80016c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d104      	bne.n	80016d2 <RTC_TamperPullUpCmd+0x12>
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	0212      	lsls	r2, r2, #8
 80016cc:	430a      	orrs	r2, r1
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
 80016d0:	4770      	bx	lr
 80016d2:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <RTC_TamperPullUpCmd+0x20>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
 80016d8:	e7fa      	b.n	80016d0 <RTC_TamperPullUpCmd+0x10>
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40002800 	.word	0x40002800
 80016e0:	ffff7fff 	.word	0xffff7fff

080016e4 <RTC_WriteBackupRegister>:
 80016e4:	b082      	sub	sp, #8
 80016e6:	2300      	movs	r3, #0
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <RTC_WriteBackupRegister+0x1c>)
 80016ec:	0080      	lsls	r0, r0, #2
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	18c0      	adds	r0, r0, r3
 80016f4:	9001      	str	r0, [sp, #4]
 80016f6:	9b01      	ldr	r3, [sp, #4]
 80016f8:	6019      	str	r1, [r3, #0]
 80016fa:	b002      	add	sp, #8
 80016fc:	4770      	bx	lr
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40002850 	.word	0x40002850

08001704 <RTC_ReadBackupRegister>:
 8001704:	b082      	sub	sp, #8
 8001706:	2300      	movs	r3, #0
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <RTC_ReadBackupRegister+0x1c>)
 800170c:	0080      	lsls	r0, r0, #2
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	9b01      	ldr	r3, [sp, #4]
 8001712:	18c0      	adds	r0, r0, r3
 8001714:	9001      	str	r0, [sp, #4]
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	b002      	add	sp, #8
 800171c:	4770      	bx	lr
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	40002850 	.word	0x40002850

08001724 <RTC_OutputTypeConfig>:
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <RTC_OutputTypeConfig+0x14>)
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <RTC_OutputTypeConfig+0x18>)
 8001728:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800172a:	400a      	ands	r2, r1
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	4310      	orrs	r0, r2
 8001732:	6418      	str	r0, [r3, #64]	; 0x40
 8001734:	4770      	bx	lr
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40002800 	.word	0x40002800
 800173c:	fffbffff 	.word	0xfffbffff

08001740 <RTC_SynchroShiftConfig>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d15      	ldr	r5, [pc, #84]	; (8001798 <RTC_SynchroShiftConfig+0x58>)
 8001744:	23ca      	movs	r3, #202	; 0xca
 8001746:	626b      	str	r3, [r5, #36]	; 0x24
 8001748:	2353      	movs	r3, #83	; 0x53
 800174a:	626b      	str	r3, [r5, #36]	; 0x24
 800174c:	68ea      	ldr	r2, [r5, #12]
 800174e:	2308      	movs	r3, #8
 8001750:	4213      	tst	r3, r2
 8001752:	d00c      	beq.n	800176e <RTC_SynchroShiftConfig+0x2e>
 8001754:	68ea      	ldr	r2, [r5, #12]
 8001756:	4213      	tst	r3, r2
 8001758:	d009      	beq.n	800176e <RTC_SynchroShiftConfig+0x2e>
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	2408      	movs	r4, #8
 8001760:	e002      	b.n	8001768 <RTC_SynchroShiftConfig+0x28>
 8001762:	3b01      	subs	r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <RTC_SynchroShiftConfig+0x2e>
 8001768:	68ea      	ldr	r2, [r5, #12]
 800176a:	4214      	tst	r4, r2
 800176c:	d1f9      	bne.n	8001762 <RTC_SynchroShiftConfig+0x22>
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <RTC_SynchroShiftConfig+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	68dc      	ldr	r4, [r3, #12]
 8001774:	0725      	lsls	r5, r4, #28
 8001776:	d402      	bmi.n	800177e <RTC_SynchroShiftConfig+0x3e>
 8001778:	689c      	ldr	r4, [r3, #8]
 800177a:	06e5      	lsls	r5, r4, #27
 800177c:	d504      	bpl.n	8001788 <RTC_SynchroShiftConfig+0x48>
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <RTC_SynchroShiftConfig+0x58>)
 8001780:	21ff      	movs	r1, #255	; 0xff
 8001782:	1c10      	adds	r0, r2, #0
 8001784:	6259      	str	r1, [r3, #36]	; 0x24
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	4308      	orrs	r0, r1
 800178a:	62d8      	str	r0, [r3, #44]	; 0x2c
 800178c:	f7ff fa9e 	bl	8000ccc <RTC_WaitForSynchro>
 8001790:	1e43      	subs	r3, r0, #1
 8001792:	4198      	sbcs	r0, r3
 8001794:	b2c2      	uxtb	r2, r0
 8001796:	e7f2      	b.n	800177e <RTC_SynchroShiftConfig+0x3e>
 8001798:	40002800 	.word	0x40002800

0800179c <RTC_ITConfig>:
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <RTC_ITConfig+0x44>)
 800179e:	22ca      	movs	r2, #202	; 0xca
 80017a0:	b510      	push	{r4, lr}
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
 80017a4:	2253      	movs	r2, #83	; 0x53
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
 80017a8:	2900      	cmp	r1, #0
 80017aa:	d10e      	bne.n	80017ca <RTC_ITConfig+0x2e>
 80017ac:	6899      	ldr	r1, [r3, #8]
 80017ae:	2204      	movs	r2, #4
 80017b0:	1c04      	adds	r4, r0, #0
 80017b2:	4394      	bics	r4, r2
 80017b4:	43a1      	bics	r1, r4
 80017b6:	6099      	str	r1, [r3, #8]
 80017b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017ba:	4010      	ands	r0, r2
 80017bc:	1c0a      	adds	r2, r1, #0
 80017be:	4382      	bics	r2, r0
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <RTC_ITConfig+0x44>)
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	2204      	movs	r2, #4
 80017ce:	1c04      	adds	r4, r0, #0
 80017d0:	4394      	bics	r4, r2
 80017d2:	4321      	orrs	r1, r4
 80017d4:	6099      	str	r1, [r3, #8]
 80017d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017d8:	4010      	ands	r0, r2
 80017da:	4308      	orrs	r0, r1
 80017dc:	6418      	str	r0, [r3, #64]	; 0x40
 80017de:	e7f0      	b.n	80017c2 <RTC_ITConfig+0x26>
 80017e0:	40002800 	.word	0x40002800

080017e4 <RTC_GetFlagStatus>:
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <RTC_GetFlagStatus+0x14>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <RTC_GetFlagStatus+0x18>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	4018      	ands	r0, r3
 80017ee:	1e43      	subs	r3, r0, #1
 80017f0:	4198      	sbcs	r0, r3
 80017f2:	b2c0      	uxtb	r0, r0
 80017f4:	4770      	bx	lr
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	40002800 	.word	0x40002800
 80017fc:	0001ff7f 	.word	0x0001ff7f

08001800 <RTC_ClearFlag>:
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <RTC_ClearFlag+0x18>)
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <RTC_ClearFlag+0x1c>)
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	4010      	ands	r0, r2
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	4310      	orrs	r0, r2
 800180c:	43c0      	mvns	r0, r0
 800180e:	400a      	ands	r2, r1
 8001810:	4302      	orrs	r2, r0
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	4770      	bx	lr
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40002800 	.word	0x40002800
 800181c:	0001ff7f 	.word	0x0001ff7f

08001820 <RTC_GetITStatus>:
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <RTC_GetITStatus+0x34>)
 8001822:	1c03      	adds	r3, r0, #0
 8001824:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001826:	b530      	push	{r4, r5, lr}
 8001828:	6891      	ldr	r1, [r2, #8]
 800182a:	68d4      	ldr	r4, [r2, #12]
 800182c:	2204      	movs	r2, #4
 800182e:	4002      	ands	r2, r0
 8001830:	1c1d      	adds	r5, r3, #0
 8001832:	0c98      	lsrs	r0, r3, #18
 8001834:	40c5      	lsrs	r5, r0
 8001836:	0be8      	lsrs	r0, r5, #15
 8001838:	4002      	ands	r2, r0
 800183a:	4019      	ands	r1, r3
 800183c:	430a      	orrs	r2, r1
 800183e:	2000      	movs	r0, #0
 8001840:	2a00      	cmp	r2, #0
 8001842:	d006      	beq.n	8001852 <RTC_GetITStatus+0x32>
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0918      	lsrs	r0, r3, #4
 8001848:	0c24      	lsrs	r4, r4, #16
 800184a:	4020      	ands	r0, r4
 800184c:	1e43      	subs	r3, r0, #1
 800184e:	4198      	sbcs	r0, r3
 8001850:	b2c0      	uxtb	r0, r0
 8001852:	bd30      	pop	{r4, r5, pc}
 8001854:	40002800 	.word	0x40002800

08001858 <RTC_ClearITPendingBit>:
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <RTC_ClearITPendingBit+0x18>)
 800185a:	b510      	push	{r4, lr}
 800185c:	0301      	lsls	r1, r0, #12
 800185e:	68dc      	ldr	r4, [r3, #12]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	0c09      	lsrs	r1, r1, #16
 8001864:	4311      	orrs	r1, r2
 8001866:	43c9      	mvns	r1, r1
 8001868:	4022      	ands	r2, r4
 800186a:	430a      	orrs	r2, r1
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	bd10      	pop	{r4, pc}
 8001870:	40002800 	.word	0x40002800

08001874 <SYSCFG_DeInit>:
 8001874:	b508      	push	{r3, lr}
 8001876:	2001      	movs	r0, #1
 8001878:	2101      	movs	r1, #1
 800187a:	f7ff f94b 	bl	8000b14 <RCC_APB2PeriphResetCmd>
 800187e:	2001      	movs	r0, #1
 8001880:	2100      	movs	r1, #0
 8001882:	f7ff f947 	bl	8000b14 <RCC_APB2PeriphResetCmd>
 8001886:	bd08      	pop	{r3, pc}

08001888 <SYSCFG_RIDeInit>:
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <SYSCFG_RIDeInit+0x14>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	4770      	bx	lr
 800189c:	40007c04 	.word	0x40007c04

080018a0 <SYSCFG_MemoryRemapConfig>:
 80018a0:	4b01      	ldr	r3, [pc, #4]	; (80018a8 <SYSCFG_MemoryRemapConfig+0x8>)
 80018a2:	6018      	str	r0, [r3, #0]
 80018a4:	4770      	bx	lr
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40010000 	.word	0x40010000

080018ac <SYSCFG_GetBootMode>:
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <SYSCFG_GetBootMode+0xc>)
 80018ae:	20c0      	movs	r0, #192	; 0xc0
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0080      	lsls	r0, r0, #2
 80018b4:	4018      	ands	r0, r3
 80018b6:	4770      	bx	lr
 80018b8:	40010000 	.word	0x40010000

080018bc <SYSCFG_USBPuCmd>:
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SYSCFG_USBPuCmd+0x1c>)
 80018be:	2800      	cmp	r0, #0
 80018c0:	d104      	bne.n	80018cc <SYSCFG_USBPuCmd+0x10>
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	2101      	movs	r1, #1
 80018c6:	438a      	bics	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	4770      	bx	lr
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e7f9      	b.n	80018ca <SYSCFG_USBPuCmd+0xe>
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40010000 	.word	0x40010000

080018dc <SYSCFG_EXTILineConfig>:
 80018dc:	2303      	movs	r3, #3
 80018de:	400b      	ands	r3, r1
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <SYSCFG_EXTILineConfig+0x28>)
 80018e2:	0889      	lsrs	r1, r1, #2
 80018e4:	0089      	lsls	r1, r1, #2
 80018e6:	1889      	adds	r1, r1, r2
 80018e8:	b510      	push	{r4, lr}
 80018ea:	688a      	ldr	r2, [r1, #8]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	240f      	movs	r4, #15
 80018f0:	409c      	lsls	r4, r3
 80018f2:	43a2      	bics	r2, r4
 80018f4:	608a      	str	r2, [r1, #8]
 80018f6:	688a      	ldr	r2, [r1, #8]
 80018f8:	4098      	lsls	r0, r3
 80018fa:	1c03      	adds	r3, r0, #0
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
 8001900:	bd10      	pop	{r4, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40010000 	.word	0x40010000

08001908 <SYSCFG_RITIMSelect>:
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <SYSCFG_RITIMSelect+0x10>)
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <SYSCFG_RITIMSelect+0x14>)
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	400a      	ands	r2, r1
 8001910:	4310      	orrs	r0, r2
 8001912:	6018      	str	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40007c04 	.word	0x40007c04
 800191c:	fffcffff 	.word	0xfffcffff

08001920 <SYSCFG_RITIMInputCaptureConfig>:
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <SYSCFG_RITIMInputCaptureConfig+0x3c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4303      	orrs	r3, r0
 8001926:	0342      	lsls	r2, r0, #13
 8001928:	d502      	bpl.n	8001930 <SYSCFG_RITIMInputCaptureConfig+0x10>
 800192a:	220f      	movs	r2, #15
 800192c:	4393      	bics	r3, r2
 800192e:	430b      	orrs	r3, r1
 8001930:	0302      	lsls	r2, r0, #12
 8001932:	d503      	bpl.n	800193c <SYSCFG_RITIMInputCaptureConfig+0x1c>
 8001934:	22f0      	movs	r2, #240	; 0xf0
 8001936:	4393      	bics	r3, r2
 8001938:	010a      	lsls	r2, r1, #4
 800193a:	4313      	orrs	r3, r2
 800193c:	02c2      	lsls	r2, r0, #11
 800193e:	d503      	bpl.n	8001948 <SYSCFG_RITIMInputCaptureConfig+0x28>
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <SYSCFG_RITIMInputCaptureConfig+0x40>)
 8001942:	4013      	ands	r3, r2
 8001944:	020a      	lsls	r2, r1, #8
 8001946:	4313      	orrs	r3, r2
 8001948:	0282      	lsls	r2, r0, #10
 800194a:	d503      	bpl.n	8001954 <SYSCFG_RITIMInputCaptureConfig+0x34>
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SYSCFG_RITIMInputCaptureConfig+0x44>)
 800194e:	0309      	lsls	r1, r1, #12
 8001950:	4013      	ands	r3, r2
 8001952:	430b      	orrs	r3, r1
 8001954:	4a01      	ldr	r2, [pc, #4]	; (800195c <SYSCFG_RITIMInputCaptureConfig+0x3c>)
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4770      	bx	lr
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40007c04 	.word	0x40007c04
 8001960:	fffff0ff 	.word	0xfffff0ff
 8001964:	ffff0fff 	.word	0xffff0fff

08001968 <SYSCFG_RIResistorConfig>:
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <SYSCFG_RIResistorConfig+0x14>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2900      	cmp	r1, #0
 800196e:	d102      	bne.n	8001976 <SYSCFG_RIResistorConfig+0xe>
 8001970:	4382      	bics	r2, r0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4770      	bx	lr
 8001976:	4310      	orrs	r0, r2
 8001978:	6018      	str	r0, [r3, #0]
 800197a:	e7fb      	b.n	8001974 <SYSCFG_RIResistorConfig+0xc>
 800197c:	40007c00 	.word	0x40007c00

08001980 <SYSCFG_RIChannelSpeedConfig>:
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SYSCFG_RIChannelSpeedConfig+0x14>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2900      	cmp	r1, #0
 8001986:	d102      	bne.n	800198e <SYSCFG_RIChannelSpeedConfig+0xe>
 8001988:	4310      	orrs	r0, r2
 800198a:	6018      	str	r0, [r3, #0]
 800198c:	4770      	bx	lr
 800198e:	4382      	bics	r2, r0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e7fb      	b.n	800198c <SYSCFG_RIChannelSpeedConfig+0xc>
 8001994:	40007c00 	.word	0x40007c00

08001998 <SYSCFG_RIIOSwitchConfig>:
 8001998:	0fc3      	lsrs	r3, r0, #31
 800199a:	0040      	lsls	r0, r0, #1
 800199c:	0840      	lsrs	r0, r0, #1
 800199e:	2900      	cmp	r1, #0
 80019a0:	d006      	beq.n	80019b0 <SYSCFG_RIIOSwitchConfig+0x18>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <SYSCFG_RIIOSwitchConfig+0x26>
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <SYSCFG_RIIOSwitchConfig+0x3c>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4310      	orrs	r0, r2
 80019ac:	6058      	str	r0, [r3, #4]
 80019ae:	e005      	b.n	80019bc <SYSCFG_RIIOSwitchConfig+0x24>
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <SYSCFG_RIIOSwitchConfig+0x30>
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <SYSCFG_RIIOSwitchConfig+0x3c>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4382      	bics	r2, r0
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	4770      	bx	lr
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SYSCFG_RIIOSwitchConfig+0x3c>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4310      	orrs	r0, r2
 80019c4:	6098      	str	r0, [r3, #8]
 80019c6:	e7f9      	b.n	80019bc <SYSCFG_RIIOSwitchConfig+0x24>
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <SYSCFG_RIIOSwitchConfig+0x3c>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4382      	bics	r2, r0
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	e7f4      	b.n	80019bc <SYSCFG_RIIOSwitchConfig+0x24>
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40007c04 	.word	0x40007c04

080019d8 <SYSCFG_RISwitchControlModeCmd>:
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SYSCFG_RISwitchControlModeCmd+0x1c>)
 80019da:	2800      	cmp	r0, #0
 80019dc:	d104      	bne.n	80019e8 <SYSCFG_RISwitchControlModeCmd+0x10>
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	0052      	lsls	r2, r2, #1
 80019e2:	0852      	lsrs	r2, r2, #1
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	4770      	bx	lr
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0612      	lsls	r2, r2, #24
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e7f8      	b.n	80019e6 <SYSCFG_RISwitchControlModeCmd+0xe>
 80019f4:	40007c04 	.word	0x40007c04

080019f8 <SYSCFG_RIHysteresisConfig>:
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <SYSCFG_RIHysteresisConfig+0xb8>)
 80019fa:	2801      	cmp	r0, #1
 80019fc:	d00f      	beq.n	8001a1e <SYSCFG_RIHysteresisConfig+0x26>
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d013      	beq.n	8001a2a <SYSCFG_RIHysteresisConfig+0x32>
 8001a02:	2803      	cmp	r0, #3
 8001a04:	d019      	beq.n	8001a3a <SYSCFG_RIHysteresisConfig+0x42>
 8001a06:	2804      	cmp	r0, #4
 8001a08:	d02c      	beq.n	8001a64 <SYSCFG_RIHysteresisConfig+0x6c>
 8001a0a:	2805      	cmp	r0, #5
 8001a0c:	d024      	beq.n	8001a58 <SYSCFG_RIHysteresisConfig+0x60>
 8001a0e:	2806      	cmp	r0, #6
 8001a10:	d038      	beq.n	8001a84 <SYSCFG_RIHysteresisConfig+0x8c>
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d132      	bne.n	8001a7c <SYSCFG_RIHysteresisConfig+0x84>
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	6199      	str	r1, [r3, #24]
 8001a1c:	4770      	bx	lr
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d011      	beq.n	8001a46 <SYSCFG_RIHysteresisConfig+0x4e>
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	438a      	bics	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	e7f8      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d00f      	beq.n	8001a4e <SYSCFG_RIHysteresisConfig+0x56>
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	43c9      	mvns	r1, r1
 8001a32:	0409      	lsls	r1, r1, #16
 8001a34:	4011      	ands	r1, r2
 8001a36:	60d9      	str	r1, [r3, #12]
 8001a38:	e7f0      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d01a      	beq.n	8001a74 <SYSCFG_RIHysteresisConfig+0x7c>
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	438a      	bics	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	e7ea      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	60d9      	str	r1, [r3, #12]
 8001a4c:	e7e6      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	0409      	lsls	r1, r1, #16
 8001a52:	4311      	orrs	r1, r2
 8001a54:	60d9      	str	r1, [r3, #12]
 8001a56:	e7e1      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d020      	beq.n	8001a9e <SYSCFG_RIHysteresisConfig+0xa6>
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	438a      	bics	r2, r1
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	e7db      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d015      	beq.n	8001a94 <SYSCFG_RIHysteresisConfig+0x9c>
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	43c9      	mvns	r1, r1
 8001a6c:	0409      	lsls	r1, r1, #16
 8001a6e:	4011      	ands	r1, r2
 8001a70:	6119      	str	r1, [r3, #16]
 8001a72:	e7d3      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	6119      	str	r1, [r3, #16]
 8001a7a:	e7cf      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	438a      	bics	r2, r1
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e7cb      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a84:	2a00      	cmp	r2, #0
 8001a86:	d00e      	beq.n	8001aa6 <SYSCFG_RIHysteresisConfig+0xae>
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	43c9      	mvns	r1, r1
 8001a8c:	0409      	lsls	r1, r1, #16
 8001a8e:	4011      	ands	r1, r2
 8001a90:	6159      	str	r1, [r3, #20]
 8001a92:	e7c3      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	0409      	lsls	r1, r1, #16
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	6119      	str	r1, [r3, #16]
 8001a9c:	e7be      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	6159      	str	r1, [r3, #20]
 8001aa4:	e7ba      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	0409      	lsls	r1, r1, #16
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	6159      	str	r1, [r3, #20]
 8001aae:	e7b5      	b.n	8001a1c <SYSCFG_RIHysteresisConfig+0x24>
 8001ab0:	40007c04 	.word	0x40007c04

08001ab4 <__gnu_thumb1_case_uhi>:
 8001ab4:	b403      	push	{r0, r1}
 8001ab6:	4671      	mov	r1, lr
 8001ab8:	0849      	lsrs	r1, r1, #1
 8001aba:	0040      	lsls	r0, r0, #1
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	5a09      	ldrh	r1, [r1, r0]
 8001ac0:	0049      	lsls	r1, r1, #1
 8001ac2:	448e      	add	lr, r1
 8001ac4:	bc03      	pop	{r0, r1}
 8001ac6:	4770      	bx	lr

08001ac8 <__aeabi_uidiv>:
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d034      	beq.n	8001b36 <.udivsi3_skip_div0_test+0x6a>

08001acc <.udivsi3_skip_div0_test>:
 8001acc:	2301      	movs	r3, #1
 8001ace:	2200      	movs	r2, #0
 8001ad0:	b410      	push	{r4}
 8001ad2:	4288      	cmp	r0, r1
 8001ad4:	d32c      	bcc.n	8001b30 <.udivsi3_skip_div0_test+0x64>
 8001ad6:	2401      	movs	r4, #1
 8001ad8:	0724      	lsls	r4, r4, #28
 8001ada:	42a1      	cmp	r1, r4
 8001adc:	d204      	bcs.n	8001ae8 <.udivsi3_skip_div0_test+0x1c>
 8001ade:	4281      	cmp	r1, r0
 8001ae0:	d202      	bcs.n	8001ae8 <.udivsi3_skip_div0_test+0x1c>
 8001ae2:	0109      	lsls	r1, r1, #4
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	e7f8      	b.n	8001ada <.udivsi3_skip_div0_test+0xe>
 8001ae8:	00e4      	lsls	r4, r4, #3
 8001aea:	42a1      	cmp	r1, r4
 8001aec:	d204      	bcs.n	8001af8 <.udivsi3_skip_div0_test+0x2c>
 8001aee:	4281      	cmp	r1, r0
 8001af0:	d202      	bcs.n	8001af8 <.udivsi3_skip_div0_test+0x2c>
 8001af2:	0049      	lsls	r1, r1, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	e7f8      	b.n	8001aea <.udivsi3_skip_div0_test+0x1e>
 8001af8:	4288      	cmp	r0, r1
 8001afa:	d301      	bcc.n	8001b00 <.udivsi3_skip_div0_test+0x34>
 8001afc:	1a40      	subs	r0, r0, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	084c      	lsrs	r4, r1, #1
 8001b02:	42a0      	cmp	r0, r4
 8001b04:	d302      	bcc.n	8001b0c <.udivsi3_skip_div0_test+0x40>
 8001b06:	1b00      	subs	r0, r0, r4
 8001b08:	085c      	lsrs	r4, r3, #1
 8001b0a:	4322      	orrs	r2, r4
 8001b0c:	088c      	lsrs	r4, r1, #2
 8001b0e:	42a0      	cmp	r0, r4
 8001b10:	d302      	bcc.n	8001b18 <.udivsi3_skip_div0_test+0x4c>
 8001b12:	1b00      	subs	r0, r0, r4
 8001b14:	089c      	lsrs	r4, r3, #2
 8001b16:	4322      	orrs	r2, r4
 8001b18:	08cc      	lsrs	r4, r1, #3
 8001b1a:	42a0      	cmp	r0, r4
 8001b1c:	d302      	bcc.n	8001b24 <.udivsi3_skip_div0_test+0x58>
 8001b1e:	1b00      	subs	r0, r0, r4
 8001b20:	08dc      	lsrs	r4, r3, #3
 8001b22:	4322      	orrs	r2, r4
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d003      	beq.n	8001b30 <.udivsi3_skip_div0_test+0x64>
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	d001      	beq.n	8001b30 <.udivsi3_skip_div0_test+0x64>
 8001b2c:	0909      	lsrs	r1, r1, #4
 8001b2e:	e7e3      	b.n	8001af8 <.udivsi3_skip_div0_test+0x2c>
 8001b30:	1c10      	adds	r0, r2, #0
 8001b32:	bc10      	pop	{r4}
 8001b34:	4770      	bx	lr
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d001      	beq.n	8001b3e <.udivsi3_skip_div0_test+0x72>
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	43c0      	mvns	r0, r0
 8001b3e:	b407      	push	{r0, r1, r2}
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <.udivsi3_skip_div0_test+0x80>)
 8001b42:	a102      	add	r1, pc, #8	; (adr r1, 8001b4c <.udivsi3_skip_div0_test+0x80>)
 8001b44:	1840      	adds	r0, r0, r1
 8001b46:	9002      	str	r0, [sp, #8]
 8001b48:	bd03      	pop	{r0, r1, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	000000d9 	.word	0x000000d9

08001b50 <__aeabi_uidivmod>:
 8001b50:	2900      	cmp	r1, #0
 8001b52:	d0f0      	beq.n	8001b36 <.udivsi3_skip_div0_test+0x6a>
 8001b54:	b503      	push	{r0, r1, lr}
 8001b56:	f7ff ffb9 	bl	8001acc <.udivsi3_skip_div0_test>
 8001b5a:	bc0e      	pop	{r1, r2, r3}
 8001b5c:	4342      	muls	r2, r0
 8001b5e:	1a89      	subs	r1, r1, r2
 8001b60:	4718      	bx	r3
 8001b62:	46c0      	nop			; (mov r8, r8)

08001b64 <__aeabi_idiv>:
 8001b64:	2900      	cmp	r1, #0
 8001b66:	d041      	beq.n	8001bec <.divsi3_skip_div0_test+0x84>

08001b68 <.divsi3_skip_div0_test>:
 8001b68:	b410      	push	{r4}
 8001b6a:	1c04      	adds	r4, r0, #0
 8001b6c:	404c      	eors	r4, r1
 8001b6e:	46a4      	mov	ip, r4
 8001b70:	2301      	movs	r3, #1
 8001b72:	2200      	movs	r2, #0
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d500      	bpl.n	8001b7a <.divsi3_skip_div0_test+0x12>
 8001b78:	4249      	negs	r1, r1
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d500      	bpl.n	8001b80 <.divsi3_skip_div0_test+0x18>
 8001b7e:	4240      	negs	r0, r0
 8001b80:	4288      	cmp	r0, r1
 8001b82:	d32c      	bcc.n	8001bde <.divsi3_skip_div0_test+0x76>
 8001b84:	2401      	movs	r4, #1
 8001b86:	0724      	lsls	r4, r4, #28
 8001b88:	42a1      	cmp	r1, r4
 8001b8a:	d204      	bcs.n	8001b96 <.divsi3_skip_div0_test+0x2e>
 8001b8c:	4281      	cmp	r1, r0
 8001b8e:	d202      	bcs.n	8001b96 <.divsi3_skip_div0_test+0x2e>
 8001b90:	0109      	lsls	r1, r1, #4
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	e7f8      	b.n	8001b88 <.divsi3_skip_div0_test+0x20>
 8001b96:	00e4      	lsls	r4, r4, #3
 8001b98:	42a1      	cmp	r1, r4
 8001b9a:	d204      	bcs.n	8001ba6 <.divsi3_skip_div0_test+0x3e>
 8001b9c:	4281      	cmp	r1, r0
 8001b9e:	d202      	bcs.n	8001ba6 <.divsi3_skip_div0_test+0x3e>
 8001ba0:	0049      	lsls	r1, r1, #1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	e7f8      	b.n	8001b98 <.divsi3_skip_div0_test+0x30>
 8001ba6:	4288      	cmp	r0, r1
 8001ba8:	d301      	bcc.n	8001bae <.divsi3_skip_div0_test+0x46>
 8001baa:	1a40      	subs	r0, r0, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	084c      	lsrs	r4, r1, #1
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	d302      	bcc.n	8001bba <.divsi3_skip_div0_test+0x52>
 8001bb4:	1b00      	subs	r0, r0, r4
 8001bb6:	085c      	lsrs	r4, r3, #1
 8001bb8:	4322      	orrs	r2, r4
 8001bba:	088c      	lsrs	r4, r1, #2
 8001bbc:	42a0      	cmp	r0, r4
 8001bbe:	d302      	bcc.n	8001bc6 <.divsi3_skip_div0_test+0x5e>
 8001bc0:	1b00      	subs	r0, r0, r4
 8001bc2:	089c      	lsrs	r4, r3, #2
 8001bc4:	4322      	orrs	r2, r4
 8001bc6:	08cc      	lsrs	r4, r1, #3
 8001bc8:	42a0      	cmp	r0, r4
 8001bca:	d302      	bcc.n	8001bd2 <.divsi3_skip_div0_test+0x6a>
 8001bcc:	1b00      	subs	r0, r0, r4
 8001bce:	08dc      	lsrs	r4, r3, #3
 8001bd0:	4322      	orrs	r2, r4
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d003      	beq.n	8001bde <.divsi3_skip_div0_test+0x76>
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	d001      	beq.n	8001bde <.divsi3_skip_div0_test+0x76>
 8001bda:	0909      	lsrs	r1, r1, #4
 8001bdc:	e7e3      	b.n	8001ba6 <.divsi3_skip_div0_test+0x3e>
 8001bde:	1c10      	adds	r0, r2, #0
 8001be0:	4664      	mov	r4, ip
 8001be2:	2c00      	cmp	r4, #0
 8001be4:	d500      	bpl.n	8001be8 <.divsi3_skip_div0_test+0x80>
 8001be6:	4240      	negs	r0, r0
 8001be8:	bc10      	pop	{r4}
 8001bea:	4770      	bx	lr
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d006      	beq.n	8001bfe <.divsi3_skip_div0_test+0x96>
 8001bf0:	db03      	blt.n	8001bfa <.divsi3_skip_div0_test+0x92>
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	43c0      	mvns	r0, r0
 8001bf6:	0840      	lsrs	r0, r0, #1
 8001bf8:	e001      	b.n	8001bfe <.divsi3_skip_div0_test+0x96>
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	0600      	lsls	r0, r0, #24
 8001bfe:	b407      	push	{r0, r1, r2}
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <.divsi3_skip_div0_test+0xa4>)
 8001c02:	a102      	add	r1, pc, #8	; (adr r1, 8001c0c <.divsi3_skip_div0_test+0xa4>)
 8001c04:	1840      	adds	r0, r0, r1
 8001c06:	9002      	str	r0, [sp, #8]
 8001c08:	bd03      	pop	{r0, r1, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	00000019 	.word	0x00000019

08001c10 <__aeabi_idivmod>:
 8001c10:	2900      	cmp	r1, #0
 8001c12:	d0eb      	beq.n	8001bec <.divsi3_skip_div0_test+0x84>
 8001c14:	b503      	push	{r0, r1, lr}
 8001c16:	f7ff ffa7 	bl	8001b68 <.divsi3_skip_div0_test>
 8001c1a:	bc0e      	pop	{r1, r2, r3}
 8001c1c:	4342      	muls	r2, r0
 8001c1e:	1a89      	subs	r1, r1, r2
 8001c20:	4718      	bx	r3
 8001c22:	46c0      	nop			; (mov r8, r8)

08001c24 <__aeabi_idiv0>:
 8001c24:	4770      	bx	lr
 8001c26:	46c0      	nop			; (mov r8, r8)

08001c28 <RCC_Configuration>:


/* application related setup */

static void RCC_Configuration(void)
{
 8001c28:	b508      	push	{r3, lr}
    /* Enable HSI Clock */
    RCC_HSICmd(ENABLE);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7fe fe52 	bl	80008d4 <RCC_HSICmd>

    /*!< Wait till HSI is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8001c30:	2021      	movs	r0, #33	; 0x21
 8001c32:	f7fe ffb7 	bl	8000ba4 <RCC_GetFlagStatus>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d0fa      	beq.n	8001c30 <RCC_Configuration+0x8>

    /* Set HSI as sys clock*/
    RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7fe fe7e 	bl	800093c <RCC_SYSCLKConfig>

    /* Set MSI clock range to ~4.194MHz*/
    RCC_MSIRangeConfig(RCC_MSIRange_6);
 8001c40:	20c0      	movs	r0, #192	; 0xc0
 8001c42:	0200      	lsls	r0, r0, #8
 8001c44:	f7fe fe28 	bl	8000898 <RCC_MSIRangeConfig>

    /* Enable the GPIOs clocks */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC| RCC_AHBPeriph_GPIOD| RCC_AHBPeriph_GPIOE| RCC_AHBPeriph_GPIOH, ENABLE);
 8001c48:	203f      	movs	r0, #63	; 0x3f
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f7fe ff32 	bl	8000ab4 <RCC_AHBPeriphClockCmd>

    /* Enable comparator, LCD and PWR mngt clocks */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_COMP | RCC_APB1Periph_LCD | RCC_APB1Periph_PWR,ENABLE);
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <RCC_Configuration+0x7c>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	f7fe ff46 	bl	8000ae4 <RCC_APB1PeriphClockCmd>

    /* Enable ADC & SYSCFG clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_SYSCFG , ENABLE);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <RCC_Configuration+0x80>)
 8001c5c:	f7fe ff36 	bl	8000acc <RCC_APB2PeriphClockCmd>

    /* Allow access to the RTC */
    PWR_RTCAccessCmd(ENABLE);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7fe fd1b 	bl	800069c <PWR_RTCAccessCmd>

    /* Reset RTC Backup Domain */
    RCC_RTCResetCmd(ENABLE);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7fe ff1e 	bl	8000aa8 <RCC_RTCResetCmd>
    RCC_RTCResetCmd(DISABLE);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7fe ff1b 	bl	8000aa8 <RCC_RTCResetCmd>

    /* LSE Enable */
    RCC_LSEConfig(RCC_LSE_ON);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7fe fe34 	bl	80008e0 <RCC_LSEConfig>

    /* Wait until LSE is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 8001c78:	2049      	movs	r0, #73	; 0x49
 8001c7a:	f7fe ff93 	bl	8000ba4 <RCC_GetFlagStatus>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d0fa      	beq.n	8001c78 <RCC_Configuration+0x50>

    /* RTC Clock Source Selection */
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8001c82:	2080      	movs	r0, #128	; 0x80
 8001c84:	0240      	lsls	r0, r0, #9
 8001c86:	f7fe fee9 	bl	8000a5c <RCC_RTCCLKConfig>

    /* Enable the RTC */
    RCC_RTCCLKCmd(ENABLE);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7fe ff06 	bl	8000a9c <RCC_RTCCLKCmd>

    /*Disable HSE*/
    RCC_HSEConfig(RCC_HSE_OFF);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7fe fdd5 	bl	8000840 <RCC_HSEConfig>
    if(RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET )
 8001c96:	2031      	movs	r0, #49	; 0x31
 8001c98:	f7fe ff84 	bl	8000ba4 <RCC_GetFlagStatus>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d000      	beq.n	8001ca2 <RCC_Configuration+0x7a>
 8001ca0:	e7fe      	b.n	8001ca0 <RCC_Configuration+0x78>
    {
        /* Stay in infinite loop if HSE is not disabled*/
        while(1);
    }
}
 8001ca2:	bd08      	pop	{r3, pc}
 8001ca4:	90000200 	.word	0x90000200
 8001ca8:	00000201 	.word	0x00000201

08001cac <RTC_Config>:
  * @brief  Configures the RTC peripheral and select the clock source.
  * @param  None
  * @retval None
  */
void RTC_Config(void)
{
 8001cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    RTC_InitTypeDef RTC_InitStructure;
    RTC_TimeTypeDef  RTC_TimeStruct;

    /* Enable the PWR clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8001cae:	2080      	movs	r0, #128	; 0x80
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	0540      	lsls	r0, r0, #21
 8001cb4:	f7fe ff16 	bl	8000ae4 <RCC_APB1PeriphClockCmd>

    /* Allow access to RTC */
    PWR_RTCAccessCmd(ENABLE);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7fe fcef 	bl	800069c <PWR_RTCAccessCmd>

    /* Reset RTC Domain */
    RCC_RTCResetCmd(ENABLE);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7fe fef2 	bl	8000aa8 <RCC_RTCResetCmd>
    RCC_RTCResetCmd(DISABLE);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7fe feef 	bl	8000aa8 <RCC_RTCResetCmd>

    /* Enable the LSE OSC */
    RCC_LSEConfig(RCC_LSE_ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7fe fe08 	bl	80008e0 <RCC_LSEConfig>

    /* Wait till LSE is ready */
    while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	2049      	movs	r0, #73	; 0x49
 8001cd2:	f7fe ff67 	bl	8000ba4 <RCC_GetFlagStatus>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d0fa      	beq.n	8001cd0 <RTC_Config+0x24>
    {
    }

    /* Select the RTC Clock Source */
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8001cda:	2080      	movs	r0, #128	; 0x80
 8001cdc:	0240      	lsls	r0, r0, #9
 8001cde:	f7fe febd 	bl	8000a5c <RCC_RTCCLKConfig>

    /* Configure the RTC data register and RTC prescaler */
    RTC_InitStructure.RTC_AsynchPrediv = 0x7F;
 8001ce2:	237f      	movs	r3, #127	; 0x7f
    RTC_InitStructure.RTC_SynchPrediv  = 0xFF;
    RTC_InitStructure.RTC_HourFormat   = RTC_HourFormat_24;
 8001ce4:	2400      	movs	r4, #0

    /* Select the RTC Clock Source */
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);

    /* Configure the RTC data register and RTC prescaler */
    RTC_InitStructure.RTC_AsynchPrediv = 0x7F;
 8001ce6:	9302      	str	r3, [sp, #8]
    RTC_InitStructure.RTC_SynchPrediv  = 0xFF;
    RTC_InitStructure.RTC_HourFormat   = RTC_HourFormat_24;
    RTC_Init(&RTC_InitStructure);
 8001ce8:	a801      	add	r0, sp, #4
    /* Select the RTC Clock Source */
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);

    /* Configure the RTC data register and RTC prescaler */
    RTC_InitStructure.RTC_AsynchPrediv = 0x7F;
    RTC_InitStructure.RTC_SynchPrediv  = 0xFF;
 8001cea:	23ff      	movs	r3, #255	; 0xff
 8001cec:	9303      	str	r3, [sp, #12]
    RTC_InitStructure.RTC_HourFormat   = RTC_HourFormat_24;
 8001cee:	9401      	str	r4, [sp, #4]
    RTC_Init(&RTC_InitStructure);
 8001cf0:	f7fe ffbc 	bl	8000c6c <RTC_Init>

    /* Set the time to 00h 00mn 00s AM */
    RTC_TimeStruct.RTC_H12     = RTC_H12_AM;
 8001cf4:	466b      	mov	r3, sp
    RTC_TimeStruct.RTC_Hours   = 0x00;
    RTC_TimeStruct.RTC_Minutes = 0x00;
    RTC_TimeStruct.RTC_Seconds = 0x00;
    RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8001cf6:	4669      	mov	r1, sp
 8001cf8:	1c20      	adds	r0, r4, #0
    RTC_InitStructure.RTC_SynchPrediv  = 0xFF;
    RTC_InitStructure.RTC_HourFormat   = RTC_HourFormat_24;
    RTC_Init(&RTC_InitStructure);

    /* Set the time to 00h 00mn 00s AM */
    RTC_TimeStruct.RTC_H12     = RTC_H12_AM;
 8001cfa:	70dc      	strb	r4, [r3, #3]
    RTC_TimeStruct.RTC_Hours   = 0x00;
 8001cfc:	701c      	strb	r4, [r3, #0]
    RTC_TimeStruct.RTC_Minutes = 0x00;
 8001cfe:	705c      	strb	r4, [r3, #1]
    RTC_TimeStruct.RTC_Seconds = 0x00;
 8001d00:	709c      	strb	r4, [r3, #2]
    RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8001d02:	f7ff f88f 	bl	8000e24 <RTC_SetTime>

    /* Enable the RTC Clock */
    RCC_RTCCLKCmd(ENABLE);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7fe fec8 	bl	8000a9c <RCC_RTCCLKCmd>

    /* Wait for RTC APB registers synchronisation */
    RTC_WaitForSynchro();
 8001d0c:	f7fe ffde 	bl	8000ccc <RTC_WaitForSynchro>
}
 8001d10:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

08001d14 <RTC_AlarmConfig>:
  * @brief  Configures the RTC Alarm.
  * @param  None
  * @retval None
  */
void RTC_AlarmConfig(void)
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
    EXTI_InitTypeDef EXTI_InitStructure;
    RTC_AlarmTypeDef RTC_AlarmStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* EXTI configuration */
    EXTI_ClearITPendingBit(EXTI_Line17);
 8001d16:	2480      	movs	r4, #128	; 0x80
 8001d18:	02a4      	lsls	r4, r4, #10
  * @brief  Configures the RTC Alarm.
  * @param  None
  * @retval None
  */
void RTC_AlarmConfig(void)
{
 8001d1a:	b088      	sub	sp, #32
    EXTI_InitTypeDef EXTI_InitStructure;
    RTC_AlarmTypeDef RTC_AlarmStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* EXTI configuration */
    EXTI_ClearITPendingBit(EXTI_Line17);
 8001d1c:	1c20      	adds	r0, r4, #0
 8001d1e:	f7fe fa65 	bl	80001ec <EXTI_ClearITPendingBit>
    EXTI_InitStructure.EXTI_Line = EXTI_Line17;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001d22:	2500      	movs	r5, #0
    RTC_AlarmTypeDef RTC_AlarmStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* EXTI configuration */
    EXTI_ClearITPendingBit(EXTI_Line17);
    EXTI_InitStructure.EXTI_Line = EXTI_Line17;
 8001d24:	a802      	add	r0, sp, #8
 8001d26:	9402      	str	r4, [sp, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001d28:	2208      	movs	r2, #8
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001d2a:	2401      	movs	r4, #1
    NVIC_InitTypeDef NVIC_InitStructure;

    /* EXTI configuration */
    EXTI_ClearITPendingBit(EXTI_Line17);
    EXTI_InitStructure.EXTI_Line = EXTI_Line17;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001d2c:	7105      	strb	r5, [r0, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001d2e:	7142      	strb	r2, [r0, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001d30:	7184      	strb	r4, [r0, #6]
    EXTI_Init(&EXTI_InitStructure);
 8001d32:	f7fe f9f9 	bl	8000128 <EXTI_Init>

    /* Enable the RTC Alarm Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = RTC_Alarm_IRQn;
 8001d36:	a801      	add	r0, sp, #4
 8001d38:	2229      	movs	r2, #41	; 0x29
 8001d3a:	7002      	strb	r2, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001d3c:	7045      	strb	r5, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001d3e:	7085      	strb	r5, [r0, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d40:	70c4      	strb	r4, [r0, #3]

    RTC_AlarmStructInit(&RTC_AlarmStructure);

    /* Set the alarmA Masks */
    RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_All;
    RTC_SetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
 8001d42:	2680      	movs	r6, #128	; 0x80
    /* Enable the RTC Alarm Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = RTC_Alarm_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
 8001d44:	f7fe fc42 	bl	80005cc <NVIC_Init>


    RTC_AlarmStructInit(&RTC_AlarmStructure);
 8001d48:	a804      	add	r0, sp, #16
 8001d4a:	f7ff fa27 	bl	800119c <RTC_AlarmStructInit>

    /* Set the alarmA Masks */
    RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_All;
    RTC_SetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
 8001d4e:	40a6      	lsls	r6, r4


    RTC_AlarmStructInit(&RTC_AlarmStructure);

    /* Set the alarmA Masks */
    RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_All;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <RTC_AlarmConfig+0x60>)
    RTC_SetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
 8001d52:	aa04      	add	r2, sp, #16
 8001d54:	1c28      	adds	r0, r5, #0
 8001d56:	1c31      	adds	r1, r6, #0


    RTC_AlarmStructInit(&RTC_AlarmStructure);

    /* Set the alarmA Masks */
    RTC_AlarmStructure.RTC_AlarmMask = RTC_AlarmMask_All;
 8001d58:	9305      	str	r3, [sp, #20]
    RTC_SetAlarm(RTC_Format_BIN, RTC_Alarm_A, &RTC_AlarmStructure);
 8001d5a:	f7ff f9a5 	bl	80010a8 <RTC_SetAlarm>

    /* Set AlarmA subseconds and enable SubSec Alarm : generate 8 interripts per Second */
    //RTC_AlarmSubSecondConfig(RTC_Alarm_A, 0xFF, RTC_AlarmSubSecondMask_SS14_5);

    /* Enable AlarmA interrupt */
    RTC_ITConfig(RTC_IT_ALRA, ENABLE);
 8001d5e:	2080      	movs	r0, #128	; 0x80
 8001d60:	1c21      	adds	r1, r4, #0
 8001d62:	0140      	lsls	r0, r0, #5
 8001d64:	f7ff fd1a 	bl	800179c <RTC_ITConfig>

    /* Enable the alarmA */
    RTC_AlarmCmd(RTC_Alarm_A, ENABLE); //////////////// WAS SET TO DISABLE???
 8001d68:	1c30      	adds	r0, r6, #0
 8001d6a:	1c21      	adds	r1, r4, #0
 8001d6c:	f7ff fa6e 	bl	800124c <RTC_AlarmCmd>
}
 8001d70:	b008      	add	sp, #32
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	80808080 	.word	0x80808080

08001d78 <itoa>:

void itoa(char* a, int i, int n) {
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	1c06      	adds	r6, r0, #0
 8001d7c:	1c0d      	adds	r5, r1, #0
    for (int j = n - 1; j >= 0; --j) {
 8001d7e:	1e54      	subs	r4, r2, #1
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	db11      	blt.n	8001da8 <itoa+0x30>
        if (i) {
 8001d84:	2d00      	cmp	r5, #0
 8001d86:	d00b      	beq.n	8001da0 <itoa+0x28>
            a[j] = (i % 10) + '0';
 8001d88:	1c28      	adds	r0, r5, #0
 8001d8a:	210a      	movs	r1, #10
 8001d8c:	f7ff ff40 	bl	8001c10 <__aeabi_idivmod>
 8001d90:	3130      	adds	r1, #48	; 0x30
 8001d92:	5531      	strb	r1, [r6, r4]
            i /= 10;
 8001d94:	1c28      	adds	r0, r5, #0
 8001d96:	210a      	movs	r1, #10
 8001d98:	f7ff fee4 	bl	8001b64 <__aeabi_idiv>
 8001d9c:	1c05      	adds	r5, r0, #0
 8001d9e:	e001      	b.n	8001da4 <itoa+0x2c>
        }
        else {
            a[j] = '0';
 8001da0:	2330      	movs	r3, #48	; 0x30
 8001da2:	5533      	strb	r3, [r6, r4]
    /* Enable the alarmA */
    RTC_AlarmCmd(RTC_Alarm_A, ENABLE); //////////////// WAS SET TO DISABLE???
}

void itoa(char* a, int i, int n) {
    for (int j = n - 1; j >= 0; --j) {
 8001da4:	3c01      	subs	r4, #1
 8001da6:	e7eb      	b.n	8001d80 <itoa+0x8>
        }
        else {
            a[j] = '0';
        }
    }
}
 8001da8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dac <display_time>:

void display_time(void) {
    int s = sec;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <display_time+0x58>)
            a[j] = '0';
        }
    }
}

void display_time(void) {
 8001dae:	b513      	push	{r0, r1, r4, lr}
    int s = sec;
 8001db0:	681c      	ldr	r4, [r3, #0]
    if (s < 0) {
        s = -s;
    }

    int h = s / (60 * 60);
 8001db2:	21e1      	movs	r1, #225	; 0xe1
 8001db4:	17e2      	asrs	r2, r4, #31
 8001db6:	18a4      	adds	r4, r4, r2
 8001db8:	4054      	eors	r4, r2
 8001dba:	1c20      	adds	r0, r4, #0
 8001dbc:	0109      	lsls	r1, r1, #4
 8001dbe:	f7ff fed1 	bl	8001b64 <__aeabi_idiv>
    int m = s / 60 % 60;
    s = s % 60;
    
    char v[7];
    itoa(v, h, 2);
 8001dc2:	2202      	movs	r2, #2
    int s = sec;
    if (s < 0) {
        s = -s;
    }

    int h = s / (60 * 60);
 8001dc4:	1c01      	adds	r1, r0, #0
    int m = s / 60 % 60;
    s = s % 60;
    
    char v[7];
    itoa(v, h, 2);
 8001dc6:	4668      	mov	r0, sp
 8001dc8:	f7ff ffd6 	bl	8001d78 <itoa>
    if (s < 0) {
        s = -s;
    }

    int h = s / (60 * 60);
    int m = s / 60 % 60;
 8001dcc:	1c20      	adds	r0, r4, #0
 8001dce:	213c      	movs	r1, #60	; 0x3c
 8001dd0:	f7ff fec8 	bl	8001b64 <__aeabi_idiv>
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	f7ff ff1b 	bl	8001c10 <__aeabi_idivmod>
    s = s % 60;
    
    char v[7];
    itoa(v, h, 2);
    itoa(v + 2, m, 2);
 8001dda:	4668      	mov	r0, sp
 8001ddc:	2202      	movs	r2, #2
 8001dde:	3002      	adds	r0, #2
 8001de0:	f7ff ffca 	bl	8001d78 <itoa>
        s = -s;
    }

    int h = s / (60 * 60);
    int m = s / 60 % 60;
    s = s % 60;
 8001de4:	1c20      	adds	r0, r4, #0
 8001de6:	213c      	movs	r1, #60	; 0x3c
 8001de8:	f7ff ff12 	bl	8001c10 <__aeabi_idivmod>
    
    char v[7];
    itoa(v, h, 2);
    itoa(v + 2, m, 2);
    itoa(v + 4, s, 2);
 8001dec:	a801      	add	r0, sp, #4
 8001dee:	2202      	movs	r2, #2
 8001df0:	f7ff ffc2 	bl	8001d78 <itoa>
    v[6] = '\0';
 8001df4:	2300      	movs	r3, #0
 8001df6:	466a      	mov	r2, sp

    LCD_GLASS_DisplayString((uint8_t*)v);
 8001df8:	4668      	mov	r0, sp
    
    char v[7];
    itoa(v, h, 2);
    itoa(v + 2, m, 2);
    itoa(v + 4, s, 2);
    v[6] = '\0';
 8001dfa:	7193      	strb	r3, [r2, #6]

    LCD_GLASS_DisplayString((uint8_t*)v);
 8001dfc:	f000 fbb8 	bl	8002570 <LCD_GLASS_DisplayString>
}
 8001e00:	bd13      	pop	{r0, r1, r4, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	2000001c 	.word	0x2000001c

08001e08 <EXTI0_IRQHandler>:
const int bump_sec = 15 * 60;


// User button
void EXTI0_IRQHandler(void)
{
 8001e08:	b508      	push	{r3, lr}
    /* configure port 6 and 7 as output */
    *(volatile uint32_t*)GPIOB_MODER |= (1 << (7 * 2)) | (1 << (6 * 2));
}

void green_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <EXTI0_IRQHandler+0x24>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	835a      	strh	r2, [r3, #26]
void blue_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
}

void blue_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	835a      	strh	r2, [r3, #26]
// User button
void EXTI0_IRQHandler(void)
{
  green_off();
  blue_off();
  sec += bump_sec;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <EXTI0_IRQHandler+0x28>)
 8001e16:	21e1      	movs	r1, #225	; 0xe1
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	0089      	lsls	r1, r1, #2
 8001e1c:	1852      	adds	r2, r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
  display_time();
 8001e20:	f7ff ffc4 	bl	8001dac <display_time>
  EXTI_ClearITPendingBit(EXTI_Line0);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7fe f9e1 	bl	80001ec <EXTI_ClearITPendingBit>
}
 8001e2a:	bd08      	pop	{r3, pc}
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	2000001c 	.word	0x2000001c

08001e34 <RTC_Alarm_IRQHandler>:

    LCD_GLASS_DisplayString((uint8_t*)v);
}

void RTC_Alarm_IRQHandler(void)
{
 8001e34:	b508      	push	{r3, lr}
    --sec;
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <RTC_Alarm_IRQHandler+0x20>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

    display_time();
 8001e3e:	f7ff ffb5 	bl	8001dac <display_time>

    /* Clear RTC AlarmA Flags */
    // both must be cleared. why?
    RTC_ClearITPendingBit(RTC_IT_ALRA);
 8001e42:	2080      	movs	r0, #128	; 0x80
 8001e44:	0140      	lsls	r0, r0, #5
 8001e46:	f7ff fd07 	bl	8001858 <RTC_ClearITPendingBit>

    /* Clear the EXTIL line 17 */
    // If this is not cleared, things freeze.
    EXTI_ClearITPendingBit(EXTI_Line17);
 8001e4a:	2080      	movs	r0, #128	; 0x80
 8001e4c:	0280      	lsls	r0, r0, #10
 8001e4e:	f7fe f9cd 	bl	80001ec <EXTI_ClearITPendingBit>
}
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	2000001c 	.word	0x2000001c

08001e58 <main>:



//static void __attribute__((naked)) __attribute__((used)) main(void)
int main(void)
{
 8001e58:	b530      	push	{r4, r5, lr}
 8001e5a:	b087      	sub	sp, #28
#if CONFIG_BOOT_SRAM
    /* do not use previsouly setup stack, if any */
    setup_stack();
#endif /* CONFIG_BOOT_SRAM */

    RCC_Configuration();
 8001e5c:	f7ff fee4 	bl	8001c28 <RCC_Configuration>
    NVIC_InitTypeDef NVIC_InitStructure;
////#endif

////#if 0
    /* Configure User Button pin as input */
    GPIO_InitStructure.GPIO_Pin = USERBUTTON_GPIO_PIN;
 8001e60:	2501      	movs	r5, #1
 8001e62:	a902      	add	r1, sp, #8
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001e64:	2400      	movs	r4, #0
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001e66:	2303      	movs	r3, #3
    GPIO_Init(USERBUTTON_GPIO_PORT, &GPIO_InitStructure);
 8001e68:	4823      	ldr	r0, [pc, #140]	; (8001ef8 <main+0xa0>)
////#if 0
    /* Configure User Button pin as input */
    GPIO_InitStructure.GPIO_Pin = USERBUTTON_GPIO_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001e6a:	714b      	strb	r3, [r1, #5]
    NVIC_InitTypeDef NVIC_InitStructure;
////#endif

////#if 0
    /* Configure User Button pin as input */
    GPIO_InitStructure.GPIO_Pin = USERBUTTON_GPIO_PIN;
 8001e6c:	9502      	str	r5, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001e6e:	710c      	strb	r4, [r1, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e70:	71cc      	strb	r4, [r1, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
    GPIO_Init(USERBUTTON_GPIO_PORT, &GPIO_InitStructure);
 8001e72:	f7fe fa33 	bl	80002dc <GPIO_Init>
////#endif

////#if 0
    /* Select User Button pin as input source for EXTI Line */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
 8001e76:	1c21      	adds	r1, r4, #0
 8001e78:	1c20      	adds	r0, r4, #0
 8001e7a:	f7ff fd2f 	bl	80018dc <SYSCFG_EXTILineConfig>

    /* Configure EXT1 Line 0 in interrupt mode trigged on Rising edge */
    // The EXT1 Line 0 interrupt is handled by void EXTI0_IRQHandler(void).
    EXTI_InitStructure.EXTI_Line = EXTI_Line0 ;  // PA0 for User button AND IDD_WakeUP
 8001e7e:	a804      	add	r0, sp, #16
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001e80:	2308      	movs	r3, #8
 8001e82:	7143      	strb	r3, [r0, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001e84:	7185      	strb	r5, [r0, #6]
    /* Select User Button pin as input source for EXTI Line */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);

    /* Configure EXT1 Line 0 in interrupt mode trigged on Rising edge */
    // The EXT1 Line 0 interrupt is handled by void EXTI0_IRQHandler(void).
    EXTI_InitStructure.EXTI_Line = EXTI_Line0 ;  // PA0 for User button AND IDD_WakeUP
 8001e86:	9504      	str	r5, [sp, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001e88:	7104      	strb	r4, [r0, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 8001e8a:	f7fe f94d 	bl	8000128 <EXTI_Init>

    /* Enable and set EXTI0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn ;
 8001e8e:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e90:	70c5      	strb	r5, [r0, #3]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set EXTI0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn ;
 8001e92:	2306      	movs	r3, #6
#define LED_GREEN (1 << 7) /* port B, pin 7 */

static inline void setup_leds(void)
{
    /* configure port 6 and 7 as output */
    *(volatile uint32_t*)GPIOB_MODER |= (1 << (7 * 2)) | (1 << (6 * 2));
 8001e94:	4d19      	ldr	r5, [pc, #100]	; (8001efc <main+0xa4>)
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set EXTI0 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn ;
 8001e96:	7003      	strb	r3, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	7043      	strb	r3, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001e9c:	7083      	strb	r3, [r0, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
 8001e9e:	f7fe fb95 	bl	80005cc <NVIC_Init>
#endif /* CONFIG_BOOT_SRAM */

    RCC_Configuration();
    Init_GPIOs();

    LCD_GLASS_Configure_GPIO();
 8001ea2:	f000 f8bb 	bl	800201c <LCD_GLASS_Configure_GPIO>
    LCD_GLASS_Init();
 8001ea6:	f000 fb91 	bl	80025cc <LCD_GLASS_Init>
    LCD_GLASS_Clear();
 8001eaa:	f000 fb7b 	bl	80025a4 <LCD_GLASS_Clear>

    // Have to do RCC_Configuration both before and after setting up the LCD...???
    RCC_Configuration();
 8001eae:	f7ff febb 	bl	8001c28 <RCC_Configuration>
#define LED_GREEN (1 << 7) /* port B, pin 7 */

static inline void setup_leds(void)
{
    /* configure port 6 and 7 as output */
    *(volatile uint32_t*)GPIOB_MODER |= (1 << (7 * 2)) | (1 << (6 * 2));
 8001eb2:	682a      	ldr	r2, [r5, #0]
 8001eb4:	23a0      	movs	r3, #160	; 0xa0
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	602b      	str	r3, [r5, #0]
    //RTC_Config();

    setup_leds();

    /* Configure the RTC peripheral by selecting the clock source.*/
    RTC_Config();
 8001ebc:	f7ff fef6 	bl	8001cac <RTC_Config>

    /* Configure RTC AlarmA register to generate one interupt per second */
    RTC_AlarmConfig();
 8001ec0:	f7ff ff28 	bl	8001d14 <RTC_AlarmConfig>
    /* configure port 6 and 7 as output */
    *(volatile uint32_t*)GPIOB_MODER |= (1 << (7 * 2)) | (1 << (6 * 2));
}

void green_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	836b      	strh	r3, [r5, #26]
void blue_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
}

void blue_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
 8001ec8:	2340      	movs	r3, #64	; 0x40
 8001eca:	836b      	strh	r3, [r5, #26]
    green_off();
    blue_off();

    while (1)
    {
        if (sec > 0) {
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <main+0xa8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dcfb      	bgt.n	8001ecc <main+0x74>
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	2340      	movs	r3, #64	; 0x40
            continue;
        }

        if (toggle) {
 8001ed8:	2c00      	cmp	r4, #0
 8001eda:	d003      	beq.n	8001ee4 <main+0x8c>
void green_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
}

void green_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
 8001edc:	832a      	strh	r2, [r5, #24]
        if (sec > 0) {
            continue;
        }

        if (toggle) {
            toggle = 0;
 8001ede:	2400      	movs	r4, #0
void blue_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
}

void blue_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
 8001ee0:	836b      	strh	r3, [r5, #26]
 8001ee2:	e002      	b.n	8001eea <main+0x92>
    /* configure port 6 and 7 as output */
    *(volatile uint32_t*)GPIOB_MODER |= (1 << (7 * 2)) | (1 << (6 * 2));
}

void green_off(void) {
    GPIO_LOW(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
 8001ee4:	836a      	strh	r2, [r5, #26]
            toggle = 0;
            green_on();
            blue_off();
        }
        else {
            toggle = 1;
 8001ee6:	2401      	movs	r4, #1
void green_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_GREEN_GPIO_PIN);
}

void blue_on(void) {
    GPIO_HIGH(LD_GPIO_PORT, LD_BLUE_GPIO_PIN);
 8001ee8:	832b      	strh	r3, [r5, #24]
            toggle = 0;
            green_on();
            blue_off();
        }
        else {
            toggle = 1;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <main+0xac>)
            green_off();
            blue_on();
        }

        delay();
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1fb      	bne.n	8001eec <main+0x94>
 8001ef4:	e7ea      	b.n	8001ecc <main+0x74>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	2000001c 	.word	0x2000001c
 8001f04:	000493e0 	.word	0x000493e0

08001f08 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <SystemInit+0xf4>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0052      	lsls	r2, r2, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	4a39      	ldr	r2, [pc, #228]	; (8002000 <SystemInit+0xf8>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	; (8002004 <SystemInit+0xfc>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	4a37      	ldr	r2, [pc, #220]	; (8002008 <SystemInit+0x100>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	4936      	ldr	r1, [pc, #216]	; (800200c <SystemInit+0x104>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f3a:	9200      	str	r2, [sp, #0]
 8001f3c:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	0252      	lsls	r2, r2, #9
 8001f44:	4302      	orrs	r2, r0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	1c08      	adds	r0, r1, #0
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	0292      	lsls	r2, r2, #10
 8001f50:	4011      	ands	r1, r2
 8001f52:	9101      	str	r1, [sp, #4]
    StartUpCounter++;
 8001f54:	9900      	ldr	r1, [sp, #0]
 8001f56:	3101      	adds	r1, #1
 8001f58:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001f5a:	9901      	ldr	r1, [sp, #4]
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d104      	bne.n	8001f6a <SystemInit+0x62>
 8001f60:	9c00      	ldr	r4, [sp, #0]
 8001f62:	21a0      	movs	r1, #160	; 0xa0
 8001f64:	00c9      	lsls	r1, r1, #3
 8001f66:	428c      	cmp	r4, r1
 8001f68:	d1ef      	bne.n	8001f4a <SystemInit+0x42>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	d000      	beq.n	8001f72 <SystemInit+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8001f70:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f72:	9201      	str	r2, [sp, #4]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001f74:	9901      	ldr	r1, [sp, #4]
 8001f76:	2901      	cmp	r1, #1
 8001f78:	d004      	beq.n	8001f84 <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <SystemInit+0x108>)
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	0512      	lsls	r2, r2, #20
 8001f80:	609a      	str	r2, [r3, #8]
#endif
}
 8001f82:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  }
  
  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <SystemInit+0x10c>)
 8001f86:	2504      	movs	r5, #4
 8001f88:	6814      	ldr	r4, [r2, #0]
 8001f8a:	432c      	orrs	r4, r5
 8001f8c:	6014      	str	r4, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001f8e:	6814      	ldr	r4, [r2, #0]
 8001f90:	2502      	movs	r5, #2
 8001f92:	432c      	orrs	r4, r5
 8001f94:	6014      	str	r4, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001f96:	6814      	ldr	r4, [r2, #0]
 8001f98:	4321      	orrs	r1, r4
 8001f9a:	6011      	str	r1, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0552      	lsls	r2, r2, #21
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <SystemInit+0x110>)
 8001faa:	0109      	lsls	r1, r1, #4
 8001fac:	6011      	str	r1, [r2, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001fae:	6851      	ldr	r1, [r2, #4]
 8001fb0:	06cc      	lsls	r4, r1, #27
 8001fb2:	d4fc      	bmi.n	8001fae <SystemInit+0xa6>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001fc0:	6899      	ldr	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001fc2:	2291      	movs	r2, #145	; 0x91
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001fc4:	4001      	ands	r1, r0
 8001fc6:	6099      	str	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	0412      	lsls	r2, r2, #16
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	0452      	lsls	r2, r2, #17
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <SystemInit+0xf4>)
 8001fde:	0188      	lsls	r0, r1, #6
 8001fe0:	d5fb      	bpl.n	8001fda <SystemInit+0xd2>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001fe2:	6890      	ldr	r0, [r2, #8]
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	4388      	bics	r0, r1
 8001fe8:	6090      	str	r0, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001fea:	6890      	ldr	r0, [r2, #8]
 8001fec:	4301      	orrs	r1, r0
 8001fee:	6091      	str	r1, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	2a0c      	cmp	r2, #12
 8001ff8:	d1fa      	bne.n	8001ff0 <SystemInit+0xe8>
 8001ffa:	e7be      	b.n	8001f7a <SystemInit+0x72>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	88ffc00c 	.word	0x88ffc00c
 8002004:	eefefffe 	.word	0xeefefffe
 8002008:	fffbffff 	.word	0xfffbffff
 800200c:	ff02ffff 	.word	0xff02ffff
 8002010:	e000ed00 	.word	0xe000ed00
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40007000 	.word	0x40007000

0800201c <LCD_GLASS_Configure_GPIO>:
  * @param None
  * @retval None
  */

void LCD_GLASS_Configure_GPIO(void)
{
 800201c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
/* Enable GPIOs clock */ 	
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC |
 800201e:	2101      	movs	r1, #1
 8002020:	203f      	movs	r0, #63	; 0x3f
 8002022:	f7fe fd47 	bl	8000ab4 <RCC_AHBPeriphClockCmd>
                        RCC_AHBPeriph_GPIOD | RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOH, ENABLE);

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
 8002026:	4668      	mov	r0, sp
 8002028:	f7fe f9ae 	bl	8000388 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 800202c:	4c56      	ldr	r4, [pc, #344]	; (8002188 <LCD_GLASS_Configure_GPIO+0x16c>)

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <LCD_GLASS_Configure_GPIO+0x170>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002030:	2502      	movs	r5, #2

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
 8002032:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8002034:	1c20      	adds	r0, r4, #0
  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002036:	466b      	mov	r3, sp
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8002038:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800203a:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 800203c:	f7fe f94e 	bl	80002dc <GPIO_Init>

  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1,GPIO_AF_LCD) ;
 8002040:	1c20      	adds	r0, r4, #0
 8002042:	2101      	movs	r1, #1
 8002044:	220b      	movs	r2, #11
 8002046:	f7fe f9df 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,GPIO_AF_LCD) ;
 800204a:	1c29      	adds	r1, r5, #0
 800204c:	1c20      	adds	r0, r4, #0
 800204e:	220b      	movs	r2, #11
 8002050:	f7fe f9da 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,GPIO_AF_LCD) ;
 8002054:	1c20      	adds	r0, r4, #0
 8002056:	2103      	movs	r1, #3
 8002058:	220b      	movs	r2, #11
 800205a:	f7fe f9d5 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,GPIO_AF_LCD) ;
 800205e:	1c20      	adds	r0, r4, #0
 8002060:	2108      	movs	r1, #8
 8002062:	220b      	movs	r2, #11
 8002064:	f7fe f9d0 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_LCD) ;
 8002068:	1c20      	adds	r0, r4, #0
 800206a:	2109      	movs	r1, #9
 800206c:	220b      	movs	r2, #11
 800206e:	f7fe f9cb 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
 8002072:	1c20      	adds	r0, r4, #0
 8002074:	210a      	movs	r1, #10
 8002076:	220b      	movs	r2, #11
 8002078:	f7fe f9c6 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
 800207c:	1c20      	adds	r0, r4, #0
 800207e:	220b      	movs	r2, #11
 8002080:	210f      	movs	r1, #15
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8002082:	4c43      	ldr	r4, [pc, #268]	; (8002190 <LCD_GLASS_Configure_GPIO+0x174>)
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
 8002084:	f7fe f9c0 	bl	8000408 <GPIO_PinAFConfig>
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <LCD_GLASS_Configure_GPIO+0x178>)
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 800208a:	1c20      	adds	r0, r4, #0
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
 800208c:	9300      	str	r3, [sp, #0]
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 800208e:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002090:	466b      	mov	r3, sp
 8002092:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8002094:	f7fe f922 	bl	80002dc <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource3,GPIO_AF_LCD) ;
 8002098:	1c20      	adds	r0, r4, #0
 800209a:	2103      	movs	r1, #3
 800209c:	220b      	movs	r2, #11
 800209e:	f7fe f9b3 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource4,GPIO_AF_LCD) ;
 80020a2:	1c20      	adds	r0, r4, #0
 80020a4:	2104      	movs	r1, #4
 80020a6:	220b      	movs	r2, #11
 80020a8:	f7fe f9ae 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5,GPIO_AF_LCD) ;
 80020ac:	1c20      	adds	r0, r4, #0
 80020ae:	2105      	movs	r1, #5
 80020b0:	220b      	movs	r2, #11
 80020b2:	f7fe f9a9 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8,GPIO_AF_LCD) ;
 80020b6:	1c20      	adds	r0, r4, #0
 80020b8:	2108      	movs	r1, #8
 80020ba:	220b      	movs	r2, #11
 80020bc:	f7fe f9a4 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9,GPIO_AF_LCD) ;
 80020c0:	1c20      	adds	r0, r4, #0
 80020c2:	2109      	movs	r1, #9
 80020c4:	220b      	movs	r2, #11
 80020c6:	f7fe f99f 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10,GPIO_AF_LCD) ;
 80020ca:	1c20      	adds	r0, r4, #0
 80020cc:	210a      	movs	r1, #10
 80020ce:	220b      	movs	r2, #11
 80020d0:	f7fe f99a 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11,GPIO_AF_LCD) ;  
 80020d4:	210b      	movs	r1, #11
 80020d6:	1c20      	adds	r0, r4, #0
 80020d8:	1c0a      	adds	r2, r1, #0
 80020da:	f7fe f995 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12,GPIO_AF_LCD) ;
 80020de:	1c20      	adds	r0, r4, #0
 80020e0:	210c      	movs	r1, #12
 80020e2:	220b      	movs	r2, #11
 80020e4:	f7fe f990 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,GPIO_AF_LCD) ;   
 80020e8:	1c20      	adds	r0, r4, #0
 80020ea:	210d      	movs	r1, #13
 80020ec:	220b      	movs	r2, #11
 80020ee:	f7fe f98b 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
 80020f2:	1c20      	adds	r0, r4, #0
 80020f4:	210e      	movs	r1, #14
 80020f6:	220b      	movs	r2, #11
 80020f8:	f7fe f986 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
 80020fc:	1c20      	adds	r0, r4, #0
 80020fe:	220b      	movs	r2, #11
 8002100:	210f      	movs	r1, #15
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8002102:	4c25      	ldr	r4, [pc, #148]	; (8002198 <LCD_GLASS_Configure_GPIO+0x17c>)
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11,GPIO_AF_LCD) ;  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,GPIO_AF_LCD) ;   
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
 8002104:	f7fe f980 	bl	8000408 <GPIO_PinAFConfig>
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <LCD_GLASS_Configure_GPIO+0x180>)
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 800210a:	1c20      	adds	r0, r4, #0
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
 800210c:	9300      	str	r3, [sp, #0]
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 800210e:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002110:	466b      	mov	r3, sp
 8002112:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8002114:	f7fe f8e2 	bl	80002dc <GPIO_Init>
  

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0,GPIO_AF_LCD) ;
 8002118:	1c20      	adds	r0, r4, #0
 800211a:	2100      	movs	r1, #0
 800211c:	220b      	movs	r2, #11
 800211e:	f7fe f973 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource1,GPIO_AF_LCD) ; 
 8002122:	1c20      	adds	r0, r4, #0
 8002124:	2101      	movs	r1, #1
 8002126:	220b      	movs	r2, #11
 8002128:	f7fe f96e 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource2,GPIO_AF_LCD) ;
 800212c:	1c29      	adds	r1, r5, #0
 800212e:	1c20      	adds	r0, r4, #0
 8002130:	220b      	movs	r2, #11
 8002132:	f7fe f969 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource3,GPIO_AF_LCD) ;
 8002136:	1c20      	adds	r0, r4, #0
 8002138:	2103      	movs	r1, #3
 800213a:	220b      	movs	r2, #11
 800213c:	f7fe f964 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6,GPIO_AF_LCD) ;
 8002140:	1c20      	adds	r0, r4, #0
 8002142:	2106      	movs	r1, #6
 8002144:	220b      	movs	r2, #11
 8002146:	f7fe f95f 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7,GPIO_AF_LCD) ;
 800214a:	1c20      	adds	r0, r4, #0
 800214c:	2107      	movs	r1, #7
 800214e:	220b      	movs	r2, #11
 8002150:	f7fe f95a 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8,GPIO_AF_LCD) ;
 8002154:	1c20      	adds	r0, r4, #0
 8002156:	2108      	movs	r1, #8
 8002158:	220b      	movs	r2, #11
 800215a:	f7fe f955 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9,GPIO_AF_LCD) ;
 800215e:	1c20      	adds	r0, r4, #0
 8002160:	2109      	movs	r1, #9
 8002162:	220b      	movs	r2, #11
 8002164:	f7fe f950 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10,GPIO_AF_LCD) ; 
 8002168:	1c20      	adds	r0, r4, #0
 800216a:	210a      	movs	r1, #10
 800216c:	220b      	movs	r2, #11
 800216e:	f7fe f94b 	bl	8000408 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11,GPIO_AF_LCD) ;  
 8002172:	210b      	movs	r1, #11
 8002174:	1c0a      	adds	r2, r1, #0
 8002176:	1c20      	adds	r0, r4, #0
 8002178:	f7fe f946 	bl	8000408 <GPIO_PinAFConfig>

/* Disable GPIOs clock */ 	
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC |
 800217c:	203f      	movs	r0, #63	; 0x3f
 800217e:	2100      	movs	r1, #0
 8002180:	f7fe fc98 	bl	8000ab4 <RCC_AHBPeriphClockCmd>
                        RCC_AHBPeriph_GPIOD | RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOH, DISABLE);
  
}
 8002184:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40020000 	.word	0x40020000
 800218c:	0000870e 	.word	0x0000870e
 8002190:	40020400 	.word	0x40020400
 8002194:	0000ff38 	.word	0x0000ff38
 8002198:	40020800 	.word	0x40020800
 800219c:	00000fcf 	.word	0x00000fcf

080021a0 <LCD_bar>:
  * @retval None
  */
void LCD_bar()
{
        
  LCD->RAM[LCD_RAMRegister_4] &= 0xffff5fff;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <LCD_bar+0x28>)
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LCD_bar+0x2c>)
 80021a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021a6:	4011      	ands	r1, r2
 80021a8:	6259      	str	r1, [r3, #36]	; 0x24
  LCD->RAM[LCD_RAMRegister_6] &= 0xffff5fff;
 80021aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ac:	400a      	ands	r2, r1
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
/* bar1 bar3 */
  LCD->RAM[LCD_RAMRegister_4] |= (uint32_t)(t_bar[0]<<12);
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <LCD_bar+0x30>)
 80021b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80021b4:	7811      	ldrb	r1, [r2, #0]
 80021b6:	0309      	lsls	r1, r1, #12
 80021b8:	4301      	orrs	r1, r0
 80021ba:	6259      	str	r1, [r3, #36]	; 0x24
  
/*bar0 bar2 */
  LCD->RAM[LCD_RAMRegister_6] |= (uint32_t)(t_bar[1]<<12);
 80021bc:	7852      	ldrb	r2, [r2, #1]
 80021be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c0:	0312      	lsls	r2, r2, #12
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
 
}
 80021c6:	4770      	bx	lr
 80021c8:	40002400 	.word	0x40002400
 80021cc:	ffff5fff 	.word	0xffff5fff
 80021d0:	20000020 	.word	0x20000020

080021d4 <LCD_GLASS_WriteChar>:
  * @retval None
  * @par    Required preconditions: The LCD should be cleared before to start the
  *         write operation.  
  */
void LCD_GLASS_WriteChar(uint8_t* ch, bool point, bool column, uint8_t position)
{
 80021d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  * @param  position: position in the LCD of the caracter to write [0:7]
  * @retval None
  * @par    Required preconditions: The LCD should be cleared before to start the
  *         write operation.  
  */
void LCD_GLASS_WriteChar(uint8_t* ch, bool point, bool column, uint8_t position)
 80021d6:	7800      	ldrb	r0, [r0, #0]
{
 80021d8:	1c1f      	adds	r7, r3, #0
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80021da:	282f      	cmp	r0, #47	; 0x2f
 80021dc:	d020      	beq.n	8002220 <LCD_GLASS_WriteChar+0x4c>
 80021de:	d80c      	bhi.n	80021fa <LCD_GLASS_WriteChar+0x26>
 80021e0:	2825      	cmp	r0, #37	; 0x25
 80021e2:	d01f      	beq.n	8002224 <LCD_GLASS_WriteChar+0x50>
 80021e4:	d803      	bhi.n	80021ee <LCD_GLASS_WriteChar+0x1a>
    {
    case ' ' : 
      ch = 0x00;
 80021e6:	2300      	movs	r3, #0
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80021e8:	2820      	cmp	r0, #32
 80021ea:	d030      	beq.n	800224e <LCD_GLASS_WriteChar+0x7a>
 80021ec:	e01d      	b.n	800222a <LCD_GLASS_WriteChar+0x56>
 80021ee:	282a      	cmp	r0, #42	; 0x2a
 80021f0:	d02c      	beq.n	800224c <LCD_GLASS_WriteChar+0x78>
    case 'n' :
      ch = C_nMap;
      break;					
                  
    case '-' :
      ch = C_minus;
 80021f2:	23a0      	movs	r3, #160	; 0xa0
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80021f4:	282d      	cmp	r0, #45	; 0x2d
 80021f6:	d016      	beq.n	8002226 <LCD_GLASS_WriteChar+0x52>
 80021f8:	e017      	b.n	800222a <LCD_GLASS_WriteChar+0x56>
 80021fa:	286d      	cmp	r0, #109	; 0x6d
 80021fc:	d00c      	beq.n	8002218 <LCD_GLASS_WriteChar+0x44>
 80021fe:	d805      	bhi.n	800220c <LCD_GLASS_WriteChar+0x38>
 8002200:	2839      	cmp	r0, #57	; 0x39
 8002202:	d812      	bhi.n	800222a <LCD_GLASS_WriteChar+0x56>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':			
      ch = NumberMap[*c-0x30];		
 8002204:	3830      	subs	r0, #48	; 0x30
 8002206:	0040      	lsls	r0, r0, #1
 8002208:	4bcb      	ldr	r3, [pc, #812]	; (8002538 <LCD_GLASS_WriteChar+0x364>)
 800220a:	e01d      	b.n	8002248 <LCD_GLASS_WriteChar+0x74>
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 800220c:	286e      	cmp	r0, #110	; 0x6e
 800220e:	d005      	beq.n	800221c <LCD_GLASS_WriteChar+0x48>
 8002210:	28ff      	cmp	r0, #255	; 0xff
 8002212:	d10a      	bne.n	800222a <LCD_GLASS_WriteChar+0x56>
    //  break;  
    case '%' :
      ch = C_percent_2; 
      break;
    case 255 :
      ch = C_full;
 8002214:	4bc9      	ldr	r3, [pc, #804]	; (800253c <LCD_GLASS_WriteChar+0x368>)
 8002216:	e01a      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
    //case 'µ' :
    //  ch = C_UMAP;
    //  break;
    
    case 'm' :
      ch = C_mMap;
 8002218:	4bc9      	ldr	r3, [pc, #804]	; (8002540 <LCD_GLASS_WriteChar+0x36c>)
 800221a:	e018      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
      break;
                  
    case 'n' :
      ch = C_nMap;
 800221c:	4bc9      	ldr	r3, [pc, #804]	; (8002544 <LCD_GLASS_WriteChar+0x370>)
 800221e:	e016      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
    case '-' :
      ch = C_minus;
      break;
      
    case '/' :
      ch = C_slatch;
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	e014      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
      
    //case '°' :
    //  ch = C_percent_1;
    //  break;  
    case '%' :
      ch = C_percent_2; 
 8002224:	23b3      	movs	r3, #179	; 0xb3
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	e011      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
      ch = NumberMap[*c-0x30];		
      break;
          
    default:
      /* The character c is one letter in upper case*/
      if ( (*c < 0x5b) && (*c > 0x40) )
 800222a:	1c04      	adds	r4, r0, #0
 800222c:	3c41      	subs	r4, #65	; 0x41
 800222e:	b2e5      	uxtb	r5, r4
	* @param 	digit array with segment 
  * @retval None
  */
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
 8002230:	2300      	movs	r3, #0
      ch = NumberMap[*c-0x30];		
      break;
          
    default:
      /* The character c is one letter in upper case*/
      if ( (*c < 0x5b) && (*c > 0x40) )
 8002232:	2d19      	cmp	r5, #25
 8002234:	d802      	bhi.n	800223c <LCD_GLASS_WriteChar+0x68>
      {
        ch = CapLetterMap[*c-'A'];
 8002236:	4bc4      	ldr	r3, [pc, #784]	; (8002548 <LCD_GLASS_WriteChar+0x374>)
 8002238:	0064      	lsls	r4, r4, #1
 800223a:	5ae3      	ldrh	r3, [r4, r3]
      }
      /* The character c is one letter in lower case*/
      if ( (*c <0x7b) && ( *c> 0x60) )
 800223c:	3861      	subs	r0, #97	; 0x61
 800223e:	b2c4      	uxtb	r4, r0
 8002240:	2c19      	cmp	r4, #25
 8002242:	d804      	bhi.n	800224e <LCD_GLASS_WriteChar+0x7a>
      {
        ch = CapLetterMap[*c-'a'];
 8002244:	4bc0      	ldr	r3, [pc, #768]	; (8002548 <LCD_GLASS_WriteChar+0x374>)
 8002246:	0040      	lsls	r0, r0, #1
 8002248:	5ac3      	ldrh	r3, [r0, r3]
 800224a:	e000      	b.n	800224e <LCD_GLASS_WriteChar+0x7a>
    case ' ' : 
      ch = 0x00;
      break;
    
    case '*':
      ch = star;
 800224c:	4bbf      	ldr	r3, [pc, #764]	; (800254c <LCD_GLASS_WriteChar+0x378>)
      }
      break;
  }
       
  /* Set the digital point can be displayed if the point is on */
  if (point)
 800224e:	2900      	cmp	r1, #0
 8002250:	d001      	beq.n	8002256 <LCD_GLASS_WriteChar+0x82>
  {
    ch |= 0x0002;
 8002252:	2102      	movs	r1, #2
 8002254:	430b      	orrs	r3, r1
  }

  /* Set the "COL" segment in the character that can be displayed if the column is on */
  if (column)
 8002256:	2a00      	cmp	r2, #0
 8002258:	d001      	beq.n	800225e <LCD_GLASS_WriteChar+0x8a>
  {
    ch |= 0x0020;
 800225a:	2220      	movs	r2, #32
 800225c:	4313      	orrs	r3, r2
  }		

  for (i = 12,j=0 ;j<4; i-=4,j++)
  {
    digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
 800225e:	131c      	asrs	r4, r3, #12
 8002260:	9401      	str	r4, [sp, #4]
 8002262:	b2e6      	uxtb	r6, r4
 8002264:	0a1d      	lsrs	r5, r3, #8
 8002266:	111c      	asrs	r4, r3, #4
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b2e4      	uxtb	r4, r4
 800226c:	9300      	str	r3, [sp, #0]
   
/* To convert displayed character in segment in array digit */
  LCD_Conv_Char_Seg(ch,point,column,digit);

/* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
 800226e:	2004      	movs	r0, #4
 8002270:	f7fe f97e 	bl	8000570 <LCD_GetFlagStatus>
 8002274:	2800      	cmp	r0, #0
 8002276:	d1fa      	bne.n	800226e <LCD_GLASS_WriteChar+0x9a>
  
  switch (position)
 8002278:	1e78      	subs	r0, r7, #1
 800227a:	2805      	cmp	r0, #5
 800227c:	d900      	bls.n	8002280 <LCD_GLASS_WriteChar+0xac>
 800227e:	e155      	b.n	800252c <LCD_GLASS_WriteChar+0x358>
 8002280:	4bb3      	ldr	r3, [pc, #716]	; (8002550 <LCD_GLASS_WriteChar+0x37c>)
      
      break;
    
    /* Position 6 on LCD (Digit6)*/
    case 6:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
 8002282:	6959      	ldr	r1, [r3, #20]
  LCD_Conv_Char_Seg(ch,point,column,digit);

/* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
  
  switch (position)
 8002284:	f7ff fc16 	bl	8001ab4 <__gnu_thumb1_case_uhi>
 8002288:	00320006 	.word	0x00320006
 800228c:	00a90079 	.word	0x00a90079
 8002290:	010b00d9 	.word	0x010b00d9
  {
    /* Position 1 on LCD (Digit1)*/
    case 1:
      LCD->RAM[LCD_RAMRegister_0] &= 0xcffffffc;
 8002294:	4aaf      	ldr	r2, [pc, #700]	; (8002554 <LCD_GLASS_WriteChar+0x380>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
 8002296:	1c37      	adds	r7, r6, #0
  
  switch (position)
  {
    /* Position 1 on LCD (Digit1)*/
    case 1:
      LCD->RAM[LCD_RAMRegister_0] &= 0xcffffffc;
 8002298:	4011      	ands	r1, r2
 800229a:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
 800229c:	69d9      	ldr	r1, [r3, #28]
 800229e:	4011      	ands	r1, r2
 80022a0:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
 80022a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022a4:	4011      	ands	r1, r2
 80022a6:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;
 80022a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022aa:	400a      	ands	r2, r1

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
 80022ac:	210c      	movs	r1, #12
    /* Position 1 on LCD (Digit1)*/
    case 1:
      LCD->RAM[LCD_RAMRegister_0] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
 80022b0:	400f      	ands	r7, r1
 80022b2:	2203      	movs	r2, #3
 80022b4:	6958      	ldr	r0, [r3, #20]
 80022b6:	4016      	ands	r6, r2
 80022b8:	06bf      	lsls	r7, r7, #26
 80022ba:	433e      	orrs	r6, r7
 80022bc:	4306      	orrs	r6, r0
 80022be:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
 80022c0:	1c2e      	adds	r6, r5, #0
 80022c2:	400e      	ands	r6, r1
 80022c4:	69d8      	ldr	r0, [r3, #28]
 80022c6:	4015      	ands	r5, r2
 80022c8:	06b6      	lsls	r6, r6, #26
 80022ca:	4335      	orrs	r5, r6
 80022cc:	4305      	orrs	r5, r0
 80022ce:	61dd      	str	r5, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P                                                                                                                                    
 80022d0:	1c25      	adds	r5, r4, #0
 80022d2:	400d      	ands	r5, r1
 80022d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022d6:	06ad      	lsls	r5, r5, #26
 80022d8:	4014      	ands	r4, r2
 80022da:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 26 ) | (digit[3]& 0x03) ; // 1H 1J 1DP 1N
 80022dc:	9d00      	ldr	r5, [sp, #0]
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P                                                                                                                                    
 80022de:	4304      	orrs	r4, r0
 80022e0:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 26 ) | (digit[3]& 0x03) ; // 1H 1J 1DP 1N
 80022e2:	4029      	ands	r1, r5
 80022e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80022e6:	0689      	lsls	r1, r1, #26
 80022e8:	402a      	ands	r2, r5
 80022ea:	e0d6      	b.n	800249a <LCD_GLASS_WriteChar+0x2c6>

      break;
    
    /* Position 2 on LCD (Digit2)*/
    case 2:
      LCD->RAM[LCD_RAMRegister_0] &= 0xf3ffff03;
 80022ec:	4a9a      	ldr	r2, [pc, #616]	; (8002558 <LCD_GLASS_WriteChar+0x384>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
 80022ee:	1c30      	adds	r0, r6, #0

      break;
    
    /* Position 2 on LCD (Digit2)*/
    case 2:
      LCD->RAM[LCD_RAMRegister_0] &= 0xf3ffff03;
 80022f0:	4011      	ands	r1, r2
 80022f2:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
 80022f4:	69d9      	ldr	r1, [r3, #28]
 80022f6:	4011      	ands	r1, r2
 80022f8:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
 80022fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022fc:	4011      	ands	r1, r2
 80022fe:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
 8002300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002302:	400a      	ands	r2, r1
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
 8002306:	2102      	movs	r1, #2
 8002308:	220c      	movs	r2, #12
 800230a:	4694      	mov	ip, r2
 800230c:	4008      	ands	r0, r1
 800230e:	4032      	ands	r2, r6
 8002310:	0612      	lsls	r2, r2, #24
 8002312:	0180      	lsls	r0, r0, #6
 8002314:	4310      	orrs	r0, r2
 8002316:	2201      	movs	r2, #1
 8002318:	4016      	ands	r6, r2
 800231a:	695f      	ldr	r7, [r3, #20]
 800231c:	408e      	lsls	r6, r1
 800231e:	4306      	orrs	r6, r0
 8002320:	4337      	orrs	r7, r6
 8002322:	615f      	str	r7, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
 8002324:	4666      	mov	r6, ip
 8002326:	1c2f      	adds	r7, r5, #0
 8002328:	400f      	ands	r7, r1
 800232a:	402e      	ands	r6, r5
 800232c:	01bf      	lsls	r7, r7, #6
 800232e:	4015      	ands	r5, r2
 8002330:	0636      	lsls	r6, r6, #24
 8002332:	69d8      	ldr	r0, [r3, #28]
 8002334:	433e      	orrs	r6, r7
 8002336:	00af      	lsls	r7, r5, #2
 8002338:	433e      	orrs	r6, r7
 800233a:	4330      	orrs	r0, r6
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 24 )|((digit[2]& 0x02) << 6 )|((digit[2]& 0x01) << 2 ) ; // 2Q 2K 2Col 2P
 800233c:	4665      	mov	r5, ip
 800233e:	1c26      	adds	r6, r4, #0
 8002340:	400e      	ands	r6, r1
 8002342:	4025      	ands	r5, r4
 8002344:	062d      	lsls	r5, r5, #24
 8002346:	01b6      	lsls	r6, r6, #6
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
 8002348:	61d8      	str	r0, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 24 )|((digit[2]& 0x02) << 6 )|((digit[2]& 0x01) << 2 ) ; // 2Q 2K 2Col 2P
 800234a:	4014      	ands	r4, r2
 800234c:	432e      	orrs	r6, r5
 800234e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002350:	00a5      	lsls	r5, r4, #2
 8002352:	1c34      	adds	r4, r6, #0
 8002354:	432c      	orrs	r4, r5
 8002356:	4304      	orrs	r4, r0
 8002358:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 24 )|((digit[3]& 0x02) << 6 )|((digit[3]& 0x01) << 2 ) ; // 2H 2J 2DP 2N
 800235a:	9c00      	ldr	r4, [sp, #0]
 800235c:	4665      	mov	r5, ip
 800235e:	4021      	ands	r1, r4
 8002360:	9f00      	ldr	r7, [sp, #0]
 8002362:	402c      	ands	r4, r5
 8002364:	0624      	lsls	r4, r4, #24
 8002366:	0189      	lsls	r1, r1, #6
 8002368:	4321      	orrs	r1, r4
 800236a:	403a      	ands	r2, r7
 800236c:	0094      	lsls	r4, r2, #2
 800236e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002370:	1c0a      	adds	r2, r1, #0
 8002372:	4322      	orrs	r2, r4
 8002374:	4302      	orrs	r2, r0
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
      
      break;
 8002378:	e0d8      	b.n	800252c <LCD_GLASS_WriteChar+0x358>
    
    /* Position 3 on LCD (Digit3)*/
    case 3:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfcfffcff;
 800237a:	4a78      	ldr	r2, [pc, #480]	; (800255c <LCD_GLASS_WriteChar+0x388>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
 800237c:	1c37      	adds	r7, r6, #0
      
      break;
    
    /* Position 3 on LCD (Digit3)*/
    case 3:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfcfffcff;
 800237e:	4011      	ands	r1, r2
 8002380:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfcfffcff;
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	4011      	ands	r1, r2
 8002386:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
 8002388:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800238a:	4011      	ands	r1, r2
 800238c:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;
 800238e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002390:	400a      	ands	r2, r1
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
 8002394:	2103      	movs	r1, #3
 8002396:	220c      	movs	r2, #12
 8002398:	400f      	ands	r7, r1
 800239a:	4016      	ands	r6, r2
 800239c:	6958      	ldr	r0, [r3, #20]
 800239e:	023f      	lsls	r7, r7, #8
 80023a0:	05b6      	lsls	r6, r6, #22
 80023a2:	433e      	orrs	r6, r7
 80023a4:	4306      	orrs	r6, r0
 80023a6:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
 80023a8:	1c2e      	adds	r6, r5, #0
 80023aa:	400e      	ands	r6, r1
 80023ac:	4015      	ands	r5, r2
 80023ae:	69d8      	ldr	r0, [r3, #28]
 80023b0:	0236      	lsls	r6, r6, #8
 80023b2:	05ad      	lsls	r5, r5, #22
 80023b4:	4335      	orrs	r5, r6
 80023b6:	4305      	orrs	r5, r0
 80023b8:	61dd      	str	r5, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 22 ) | ((digit[2]& 0x03) << 8 ) ; // 3Q 3K 3Col 3P
 80023ba:	1c25      	adds	r5, r4, #0
 80023bc:	400d      	ands	r5, r1
 80023be:	4014      	ands	r4, r2
 80023c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80023c2:	022d      	lsls	r5, r5, #8
 80023c4:	05a4      	lsls	r4, r4, #22
 80023c6:	432c      	orrs	r4, r5
 80023c8:	4304      	orrs	r4, r0
 80023ca:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 22 ) | ((digit[3]& 0x03) << 8 ) ; // 3H 3J 3DP 3N
 80023cc:	9c00      	ldr	r4, [sp, #0]
 80023ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023d0:	4021      	ands	r1, r4
 80023d2:	4022      	ands	r2, r4
 80023d4:	0209      	lsls	r1, r1, #8
 80023d6:	0592      	lsls	r2, r2, #22
 80023d8:	e05f      	b.n	800249a <LCD_GLASS_WriteChar+0x2c6>
      
      break;
    
    /* Position 4 on LCD (Digit4)*/
    case 4:
      LCD->RAM[LCD_RAMRegister_0] &= 0xffcff3ff;
 80023da:	4a61      	ldr	r2, [pc, #388]	; (8002560 <LCD_GLASS_WriteChar+0x38c>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
 80023dc:	1c37      	adds	r7, r6, #0
      
      break;
    
    /* Position 4 on LCD (Digit4)*/
    case 4:
      LCD->RAM[LCD_RAMRegister_0] &= 0xffcff3ff;
 80023de:	4011      	ands	r1, r2
 80023e0:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xffcff3ff;
 80023e2:	69d9      	ldr	r1, [r3, #28]
 80023e4:	4011      	ands	r1, r2
 80023e6:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
 80023e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ea:	4011      	ands	r1, r2
 80023ec:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
 80023ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f0:	400a      	ands	r2, r1
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
 80023f4:	2103      	movs	r1, #3
 80023f6:	220c      	movs	r2, #12
 80023f8:	400f      	ands	r7, r1
 80023fa:	4016      	ands	r6, r2
 80023fc:	6958      	ldr	r0, [r3, #20]
 80023fe:	02bf      	lsls	r7, r7, #10
 8002400:	04b6      	lsls	r6, r6, #18
 8002402:	433e      	orrs	r6, r7
 8002404:	4306      	orrs	r6, r0
 8002406:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
 8002408:	1c2e      	adds	r6, r5, #0
 800240a:	400e      	ands	r6, r1
 800240c:	4015      	ands	r5, r2
 800240e:	69d8      	ldr	r0, [r3, #28]
 8002410:	02b6      	lsls	r6, r6, #10
 8002412:	04ad      	lsls	r5, r5, #18
 8002414:	4335      	orrs	r5, r6
 8002416:	4305      	orrs	r5, r0
 8002418:	61dd      	str	r5, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 18 ) | ((digit[2]& 0x03) << 10 ) ; // 4Q 4K 4Col 4P
 800241a:	1c25      	adds	r5, r4, #0
 800241c:	400d      	ands	r5, r1
 800241e:	4014      	ands	r4, r2
 8002420:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002422:	02ad      	lsls	r5, r5, #10
 8002424:	04a4      	lsls	r4, r4, #18
 8002426:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 18 ) | ((digit[3]& 0x03) << 10 ) ; // 4H 4J 4DP 4N
 8002428:	9d00      	ldr	r5, [sp, #0]
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 18 ) | ((digit[2]& 0x03) << 10 ) ; // 4Q 4K 4Col 4P
 800242a:	4304      	orrs	r4, r0
 800242c:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 18 ) | ((digit[3]& 0x03) << 10 ) ; // 4H 4J 4DP 4N
 800242e:	4029      	ands	r1, r5
 8002430:	402a      	ands	r2, r5
 8002432:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002434:	0289      	lsls	r1, r1, #10
 8002436:	0492      	lsls	r2, r2, #18
 8002438:	e02f      	b.n	800249a <LCD_GLASS_WriteChar+0x2c6>
      
      break;
    
    /* Position 5 on LCD (Digit5)*/
    case 5:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfff3cfff;
 800243a:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <LCD_GLASS_WriteChar+0x390>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xfff3cfff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
 800243c:	1c37      	adds	r7, r6, #0
      
      break;
    
    /* Position 5 on LCD (Digit5)*/
    case 5:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfff3cfff;
 800243e:	4011      	ands	r1, r2
 8002440:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfff3cfff;
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	400a      	ands	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
 8002448:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800244a:	4a47      	ldr	r2, [pc, #284]	; (8002568 <LCD_GLASS_WriteChar+0x394>)
 800244c:	4011      	ands	r1, r2
 800244e:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	400a      	ands	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
 8002456:	2103      	movs	r1, #3
 8002458:	220c      	movs	r2, #12
 800245a:	400f      	ands	r7, r1
 800245c:	4016      	ands	r6, r2
 800245e:	6958      	ldr	r0, [r3, #20]
 8002460:	033f      	lsls	r7, r7, #12
 8002462:	0436      	lsls	r6, r6, #16
 8002464:	433e      	orrs	r6, r7
 8002466:	4306      	orrs	r6, r0
 8002468:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
 800246a:	4029      	ands	r1, r5
 800246c:	4015      	ands	r5, r2
 800246e:	69d8      	ldr	r0, [r3, #28]
 8002470:	4091      	lsls	r1, r2
 8002472:	042d      	lsls	r5, r5, #16
 8002474:	4329      	orrs	r1, r5
 8002476:	4301      	orrs	r1, r0
 8002478:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 16 ) | ((digit[2]& 0x01) << 12 ) ; // 5Q 5K   5P 
 800247a:	1c25      	adds	r5, r4, #0
 800247c:	2101      	movs	r1, #1
 800247e:	400d      	ands	r5, r1
 8002480:	4014      	ands	r4, r2
 8002482:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002484:	4095      	lsls	r5, r2
 8002486:	0424      	lsls	r4, r4, #16
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 16 ) | ((digit[3]& 0x01) << 12 ) ; // 5H 5J   5N
 8002488:	9f00      	ldr	r7, [sp, #0]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 16 ) | ((digit[2]& 0x01) << 12 ) ; // 5Q 5K   5P 
 800248a:	432c      	orrs	r4, r5
 800248c:	4304      	orrs	r4, r0
 800248e:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 16 ) | ((digit[3]& 0x01) << 12 ) ; // 5H 5J   5N
 8002490:	4039      	ands	r1, r7
 8002492:	4091      	lsls	r1, r2
 8002494:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002496:	403a      	ands	r2, r7
 8002498:	0412      	lsls	r2, r2, #16
 800249a:	430a      	orrs	r2, r1
 800249c:	e76a      	b.n	8002374 <LCD_GLASS_WriteChar+0x1a0>
      
      break;
    
    /* Position 6 on LCD (Digit6)*/
    case 6:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <LCD_GLASS_WriteChar+0x398>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
 80024a0:	1c30      	adds	r0, r6, #0
      
      break;
    
    /* Position 6 on LCD (Digit6)*/
    case 6:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
 80024a2:	4011      	ands	r1, r2
 80024a4:	6159      	str	r1, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
 80024a6:	69d9      	ldr	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
 80024a8:	9f01      	ldr	r7, [sp, #4]
      break;
    
    /* Position 6 on LCD (Digit6)*/
    case 6:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
 80024aa:	4011      	ands	r1, r2
 80024ac:	61d9      	str	r1, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
 80024ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024b0:	4011      	ands	r1, r2
 80024b2:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;
 80024b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024b6:	400a      	ands	r2, r1
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
 80024ba:	6959      	ldr	r1, [r3, #20]
 80024bc:	2204      	movs	r2, #4
 80024be:	468c      	mov	ip, r1
 80024c0:	2108      	movs	r1, #8
 80024c2:	4010      	ands	r0, r2
 80024c4:	400e      	ands	r6, r1
 80024c6:	03c0      	lsls	r0, r0, #15
 80024c8:	0376      	lsls	r6, r6, #13
 80024ca:	4306      	orrs	r6, r0
 80024cc:	07b8      	lsls	r0, r7, #30
 80024ce:	0c00      	lsrs	r0, r0, #16
 80024d0:	4306      	orrs	r6, r0
 80024d2:	4667      	mov	r7, ip
 80024d4:	4337      	orrs	r7, r6
 80024d6:	615f      	str	r7, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
 80024d8:	1c2e      	adds	r6, r5, #0
 80024da:	1c2f      	adds	r7, r5, #0
 80024dc:	400f      	ands	r7, r1
 80024de:	4016      	ands	r6, r2
 80024e0:	03f6      	lsls	r6, r6, #15
 80024e2:	037f      	lsls	r7, r7, #13
 80024e4:	4337      	orrs	r7, r6
 80024e6:	07ad      	lsls	r5, r5, #30
 80024e8:	69d8      	ldr	r0, [r3, #28]
 80024ea:	0c2e      	lsrs	r6, r5, #16
 80024ec:	1c3d      	adds	r5, r7, #0
 80024ee:	4335      	orrs	r5, r6
 80024f0:	4305      	orrs	r5, r0
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P 
 80024f2:	1c27      	adds	r7, r4, #0
 80024f4:	1c20      	adds	r0, r4, #0
 80024f6:	400f      	ands	r7, r1
 80024f8:	4010      	ands	r0, r2
 80024fa:	03c0      	lsls	r0, r0, #15
 80024fc:	037f      	lsls	r7, r7, #13
 80024fe:	4307      	orrs	r7, r0
 8002500:	2001      	movs	r0, #1
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
 8002502:	61dd      	str	r5, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P 
 8002504:	4004      	ands	r4, r0
 8002506:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002508:	03a6      	lsls	r6, r4, #14
 800250a:	1c3c      	adds	r4, r7, #0
 800250c:	4334      	orrs	r4, r6
 800250e:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x04) << 15 ) | ((digit[3]& 0x08) << 13 ) | ((digit[3]& 0x01) << 14 ) ; // 6J 6H   6N
 8002510:	9d00      	ldr	r5, [sp, #0]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P 
 8002512:	625c      	str	r4, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x04) << 15 ) | ((digit[3]& 0x08) << 13 ) | ((digit[3]& 0x01) << 14 ) ; // 6J 6H   6N
 8002514:	4029      	ands	r1, r5
 8002516:	402a      	ands	r2, r5
 8002518:	0349      	lsls	r1, r1, #13
 800251a:	03d2      	lsls	r2, r2, #15
 800251c:	4028      	ands	r0, r5
 800251e:	430a      	orrs	r2, r1
 8002520:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002522:	0385      	lsls	r5, r0, #14
 8002524:	1c10      	adds	r0, r2, #0
 8002526:	4328      	orrs	r0, r5
 8002528:	4320      	orrs	r0, r4
 800252a:	62d8      	str	r0, [r3, #44]	; 0x2c
     default:
      break;
  }

/* Refresh LCD  bar */
  LCD_bar();
 800252c:	f7ff fe38 	bl	80021a0 <LCD_bar>

/* Update the LCD display */
  LCD_UpdateDisplayRequest();
 8002530:	f7fe f80c 	bl	800054c <LCD_UpdateDisplayRequest>
  
}
 8002534:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	08002704 	.word	0x08002704
 800253c:	0000ffdd 	.word	0x0000ffdd
 8002540:	0000b210 	.word	0x0000b210
 8002544:	00002210 	.word	0x00002210
 8002548:	080026d0 	.word	0x080026d0
 800254c:	0000a0dd 	.word	0x0000a0dd
 8002550:	40002400 	.word	0x40002400
 8002554:	cffffffc 	.word	0xcffffffc
 8002558:	f3ffff03 	.word	0xf3ffff03
 800255c:	fcfffcff 	.word	0xfcfffcff
 8002560:	ffcff3ff 	.word	0xffcff3ff
 8002564:	fff3cfff 	.word	0xfff3cfff
 8002568:	fff3efff 	.word	0xfff3efff
 800256c:	fffc3fff 	.word	0xfffc3fff

08002570 <LCD_GLASS_DisplayString>:
  * @brief  This function writes a char in the LCD RAM.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void LCD_GLASS_DisplayString(uint8_t* ptr)
{
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	1c05      	adds	r5, r0, #0
  uint8_t i = 0x01;

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 8))
 8002574:	1c04      	adds	r4, r0, #0
 8002576:	2201      	movs	r2, #1
 8002578:	1b53      	subs	r3, r2, r5
 800257a:	18e3      	adds	r3, r4, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2600      	movs	r6, #0
 8002580:	2b07      	cmp	r3, #7
 8002582:	d80d      	bhi.n	80025a0 <LCD_GLASS_DisplayString+0x30>
 8002584:	7821      	ldrb	r1, [r4, #0]
 8002586:	42b1      	cmp	r1, r6
 8002588:	d00a      	beq.n	80025a0 <LCD_GLASS_DisplayString+0x30>
  {
    /* Display one character on LCD */
		if (i%2) {
 800258a:	1c19      	adds	r1, r3, #0
 800258c:	4011      	ands	r1, r2
				LCD_GLASS_WriteChar(ptr, FALSE, FALSE, i);
 800258e:	1c20      	adds	r0, r4, #0

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 8))
  {
    /* Display one character on LCD */
		if (i%2) {
 8002590:	2900      	cmp	r1, #0
 8002592:	d001      	beq.n	8002598 <LCD_GLASS_DisplayString+0x28>
				LCD_GLASS_WriteChar(ptr, FALSE, FALSE, i);
 8002594:	1c31      	adds	r1, r6, #0
 8002596:	1c32      	adds	r2, r6, #0
		}
		else {
				LCD_GLASS_WriteChar(ptr, FALSE, TRUE, i);
 8002598:	f7ff fe1c 	bl	80021d4 <LCD_GLASS_WriteChar>
		}

    /* Point on the next character */
    ptr++;
 800259c:	3401      	adds	r4, #1
 800259e:	e7ea      	b.n	8002576 <LCD_GLASS_DisplayString+0x6>

    /* Increment the character counter */
    i++;
  }
}
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025a4 <LCD_GLASS_Clear>:
  * @brief  This function Clear the whole LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_GLASS_Clear(void)
{
 80025a4:	b508      	push	{r3, lr}
  uint8_t counter = 0;

  /* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
 80025a6:	2004      	movs	r0, #4
 80025a8:	f7fd ffe2 	bl	8000570 <LCD_GetFlagStatus>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d1fa      	bne.n	80025a6 <LCD_GLASS_Clear+0x2>
  
  for (counter = LCD_RAMRegister_0; counter <= LCD_RAMRegister_15; counter++)
  {
    LCD->RAM[counter] = 0;
 80025b0:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <LCD_GLASS_Clear+0x24>)
 80025b2:	0083      	lsls	r3, r0, #2
 80025b4:	189b      	adds	r3, r3, r2
 80025b6:	3001      	adds	r0, #1
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
  uint8_t counter = 0;

  /* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
  
  for (counter = LCD_RAMRegister_0; counter <= LCD_RAMRegister_15; counter++)
 80025bc:	2810      	cmp	r0, #16
 80025be:	d1f7      	bne.n	80025b0 <LCD_GLASS_Clear+0xc>
  {
    LCD->RAM[counter] = 0;
  }

  /* Update the LCD display */
  LCD_UpdateDisplayRequest();
 80025c0:	f7fd ffc4 	bl	800054c <LCD_UpdateDisplayRequest>
  
}
 80025c4:	bd08      	pop	{r3, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40002410 	.word	0x40002410

080025cc <LCD_GLASS_Init>:
  * @brief  Configures the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @param  None
  * @retval None
  */
void LCD_GLASS_Init(void)
{
 80025cc:	b530      	push	{r4, r5, lr}
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 80025ce:	23f0      	movs	r3, #240	; 0xf0
  * @brief  Configures the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @param  None
  * @retval None
  */
void LCD_GLASS_Init(void)
{
 80025d0:	b087      	sub	sp, #28
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 80025d2:	039b      	lsls	r3, r3, #14
void LCD_GLASS_Init(void)
{
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
 80025d4:	2400      	movs	r4, #0
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 80025d6:	9302      	str	r3, [sp, #8]
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
 80025d8:	2540      	movs	r5, #64	; 0x40
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
 80025da:	230c      	movs	r3, #12
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
  LCD_InitStruct.LCD_VoltageSource = LCD_VoltageSource_Internal;

 
  /* Initialize the LCD */
  LCD_Init(&LCD_InitStruct);
 80025dc:	a801      	add	r0, sp, #4
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
 80025de:	9303      	str	r3, [sp, #12]
void LCD_GLASS_Init(void)
{
  LCD_InitTypeDef LCD_InitStruct;

 
  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
 80025e0:	9401      	str	r4, [sp, #4]
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
 80025e2:	9504      	str	r5, [sp, #16]
  LCD_InitStruct.LCD_VoltageSource = LCD_VoltageSource_Internal;
 80025e4:	9405      	str	r4, [sp, #20]

 
  /* Initialize the LCD */
  LCD_Init(&LCD_InitStruct);
 80025e6:	f7fd ff2d 	bl	8000444 <LCD_Init>
  
  LCD_MuxSegmentCmd(ENABLE);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7fd ff68 	bl	80004c0 <LCD_MuxSegmentCmd>
  
  /* To set contrast to mean value */
  LCD_ContrastConfig(LCD_Contrast_Level_4);
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	0140      	lsls	r0, r0, #5
 80025f4:	f7fd ff94 	bl	8000520 <LCD_ContrastConfig>
  
  LCD_DeadTimeConfig(LCD_DeadTime_0);
 80025f8:	1c20      	adds	r0, r4, #0
 80025fa:	f7fd ff73 	bl	80004e4 <LCD_DeadTimeConfig>
  LCD_PulseOnDurationConfig(LCD_PulseOnDuration_4);
 80025fe:	1c28      	adds	r0, r5, #0
 8002600:	f7fd ff64 	bl	80004cc <LCD_PulseOnDurationConfig>

  /* Wait Until the LCD FCR register is synchronized */
  LCD_WaitForSynchro();
 8002604:	f7fd ff4e 	bl	80004a4 <LCD_WaitForSynchro>
  
  /* Enable LCD peripheral */
  LCD_Cmd(ENABLE);
 8002608:	2001      	movs	r0, #1
 800260a:	f7fd ff45 	bl	8000498 <LCD_Cmd>
  
  /* Wait Until the LCD is enabled */
  while(LCD_GetFlagStatus(LCD_FLAG_ENS) == RESET)
 800260e:	2001      	movs	r0, #1
 8002610:	f7fd ffae 	bl	8000570 <LCD_GetFlagStatus>
 8002614:	2800      	cmp	r0, #0
 8002616:	d0fa      	beq.n	800260e <LCD_GLASS_Init+0x42>
  {
  }
  /*!< Wait Until the LCD Booster is ready */  
  while(LCD_GetFlagStatus(LCD_FLAG_RDY) == RESET)
 8002618:	2010      	movs	r0, #16
 800261a:	f7fd ffa9 	bl	8000570 <LCD_GetFlagStatus>
 800261e:	2800      	cmp	r0, #0
 8002620:	d0fa      	beq.n	8002618 <LCD_GLASS_Init+0x4c>
  {
  } 

  LCD_BlinkConfig(LCD_BlinkMode_Off,LCD_BlinkFrequency_Div32);	  
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	2000      	movs	r0, #0
 8002626:	01c9      	lsls	r1, r1, #7
 8002628:	f7fd ff6a 	bl	8000500 <LCD_BlinkConfig>
  LCD_GLASS_Clear();
 800262c:	f7ff ffba 	bl	80025a4 <LCD_GLASS_Clear>
}
 8002630:	b007      	add	sp, #28
 8002632:	bd30      	pop	{r4, r5, pc}

08002634 <Reset_Handler>:
.weak Reset_Handler
.type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
 8002634:	2100      	movs	r1, #0
b LoopCopyDataInit
 8002636:	f000 b804 	b.w	8002642 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
ldr r3, =_sidata
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
ldr r3, [r3, r1]
 800263c:	585b      	ldr	r3, [r3, r1]
str r3, [r0, r1]
 800263e:	5043      	str	r3, [r0, r1]
adds r1, r1, #4
 8002640:	3104      	adds	r1, #4

08002642 <LoopCopyDataInit>:

LoopCopyDataInit:
ldr r0, =_sdata
 8002642:	480c      	ldr	r0, [pc, #48]	; (8002674 <LoopFillZerobss+0x1a>)
ldr r3, =_edata
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <LoopFillZerobss+0x1e>)
adds r2, r0, r1
 8002646:	1842      	adds	r2, r0, r1
cmp r2, r3
 8002648:	429a      	cmp	r2, r3
bcc CopyDataInit
 800264a:	f4ff aff6 	bcc.w	800263a <CopyDataInit>
ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopFillZerobss+0x22>)
b LoopFillZerobss
 8002650:	f000 b803 	b.w	800265a <LoopFillZerobss>

08002654 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
movs r3, #0
 8002654:	2300      	movs	r3, #0
str r3, [r2], #4
 8002656:	f842 3b04 	str.w	r3, [r2], #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
ldr r3, = _ebss
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <LoopFillZerobss+0x26>)
cmp r2, r3
 800265c:	429a      	cmp	r2, r3
bcc FillZerobss
 800265e:	f4ff aff9 	bcc.w	8002654 <FillZerobss>

/* Call the clock system intitialization function.*/
bl SystemInit
 8002662:	f7ff fc51 	bl	8001f08 <SystemInit>
/* Call static constructors */
bl __libc_init_array
 8002666:	f000 f80f 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
bl main
 800266a:	f7ff fbf5 	bl	8001e58 <main>
bx lr
 800266e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
b LoopCopyDataInit

CopyDataInit:
ldr r3, =_sidata
 8002670:	08002730 	.word	0x08002730
ldr r3, [r3, r1]
str r3, [r0, r1]
adds r1, r1, #4

LoopCopyDataInit:
ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
ldr r3, =_edata
 8002678:	20000020 	.word	0x20000020
adds r2, r0, r1
cmp r2, r3
bcc CopyDataInit
ldr r2, =_sbss
 800267c:	20000020 	.word	0x20000020
FillZerobss:
movs r3, #0
str r3, [r2], #4

LoopFillZerobss:
ldr r3, = _ebss
 8002680:	20000024 	.word	0x20000024

08002684 <ADC1_IRQHandler>:
* @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
b Infinite_Loop
 8002684:	f7ff bffe 	b.w	8002684 <ADC1_IRQHandler>

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4e0d      	ldr	r6, [pc, #52]	; (80026c0 <__libc_init_array+0x38>)
 800268c:	4d0d      	ldr	r5, [pc, #52]	; (80026c4 <__libc_init_array+0x3c>)
 800268e:	2400      	movs	r4, #0
 8002690:	1bad      	subs	r5, r5, r6
 8002692:	10ad      	asrs	r5, r5, #2
 8002694:	d005      	beq.n	80026a2 <__libc_init_array+0x1a>
 8002696:	00a3      	lsls	r3, r4, #2
 8002698:	58f3      	ldr	r3, [r6, r3]
 800269a:	3401      	adds	r4, #1
 800269c:	4798      	blx	r3
 800269e:	42a5      	cmp	r5, r4
 80026a0:	d1f9      	bne.n	8002696 <__libc_init_array+0xe>
 80026a2:	f000 f839 	bl	8002718 <_init>
 80026a6:	4e08      	ldr	r6, [pc, #32]	; (80026c8 <__libc_init_array+0x40>)
 80026a8:	4d08      	ldr	r5, [pc, #32]	; (80026cc <__libc_init_array+0x44>)
 80026aa:	2400      	movs	r4, #0
 80026ac:	1bad      	subs	r5, r5, r6
 80026ae:	10ad      	asrs	r5, r5, #2
 80026b0:	d005      	beq.n	80026be <__libc_init_array+0x36>
 80026b2:	00a3      	lsls	r3, r4, #2
 80026b4:	58f3      	ldr	r3, [r6, r3]
 80026b6:	3401      	adds	r4, #1
 80026b8:	4798      	blx	r3
 80026ba:	42a5      	cmp	r5, r4
 80026bc:	d1f9      	bne.n	80026b2 <__libc_init_array+0x2a>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
	...

080026d0 <CapLetterMap>:
 80026d0:	fe00 6714 1d00 4714 9d00 9c00 3f00 fa00     ...g...G.....?..
 80026e0:	0014 5300 9841 1900 5a48 5a09 5f00 fc00     ...SA...HZ.Z._..
 80026f0:	5f01 fc01 af00 0414 5b00 18c0 5a81 00c9     ._.......[...Z..
 8002700:	0058 05c0                                   X...

08002704 <NumberMap>:
 8002704:	5f00 4200 f500 6700 ea00 af00 bf00 4600     ._.B...g.......F
 8002714:	ff00 ef00                                   ....

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
